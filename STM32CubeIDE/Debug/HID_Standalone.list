
HID_Standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd0  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800a10c  0800a10c  0000b10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a214  0800a214  0000b214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800a218  0800a218  0000b218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000134  20000008  0800a21c  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000744  2000013c  0800a350  0000c13c  2**2
                  ALLOC
  7 ._user_heap_stack 00002000  20000880  0800a350  0000c880  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000c13c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019566  00000000  00000000  0000c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003fb1  00000000  00000000  000256d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000019c8  00000000  00000000  00029688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001347  00000000  00000000  0002b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002536b  00000000  00000000  0002c397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00018f23  00000000  00000000  00051702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e5005  00000000  00000000  0006a625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0014f62a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006ad8  00000000  00000000  0014f670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000073  00000000  00000000  00156148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000013c 	.word	0x2000013c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800a0f4 	.word	0x0800a0f4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000140 	.word	0x20000140
 8000178:	0800a0f4 	.word	0x0800a0f4

0800017c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000188:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000198:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001ae:	b480      	push	{r7}
 80001b0:	b085      	sub	sp, #20
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4313      	orrs	r3, r2
 80001c4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80001ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4013      	ands	r3, r2
 80001d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d2:	68fb      	ldr	r3, [r7, #12]
}
 80001d4:	bf00      	nop
 80001d6:	3714      	adds	r7, #20
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr

080001e0 <HAL_ADC_ConvCpltCallback>:
 * @param:
 * 		hadc	ADC Peripheral
 * @retval None
**/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	joystick_X = rawADC[0];
 80001e8:	4b07      	ldr	r3, [pc, #28]	@ (8000208 <HAL_ADC_ConvCpltCallback+0x28>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	4b07      	ldr	r3, [pc, #28]	@ (800020c <HAL_ADC_ConvCpltCallback+0x2c>)
 80001f0:	801a      	strh	r2, [r3, #0]
	joystick_Y = rawADC[1];
 80001f2:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <HAL_ADC_ConvCpltCallback+0x28>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	4b05      	ldr	r3, [pc, #20]	@ (8000210 <HAL_ADC_ConvCpltCallback+0x30>)
 80001fa:	801a      	strh	r2, [r3, #0]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	20000250 	.word	0x20000250
 800020c:	2000024a 	.word	0x2000024a
 8000210:	2000024c 	.word	0x2000024c

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000218:	f001 f8fc 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f838 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f920 	bl	8000464 <MX_GPIO_Init>
  MX_DMA_Init();
 8000224:	f000 f90c 	bl	8000440 <MX_DMA_Init>
  MX_USB_Device_Init();
 8000228:	f000 fbe2 	bl	80009f0 <MX_USB_Device_Init>
  MX_ADC1_Init();
 800022c:	f000 f894 	bl	8000358 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* Configure the application hardware resources */
  BSP_PB_Init(BUTTON_KEY1, BUTTON_MODE_EXTI);
 8000230:	2101      	movs	r1, #1
 8000232:	2000      	movs	r0, #0
 8000234:	f001 f86a 	bl	800130c <BSP_PB_Init>
  BSP_LED_Init(LED3);
 8000238:	2002      	movs	r0, #2
 800023a:	f001 f813 	bl	8001264 <BSP_LED_Init>
  HAL_ADC_Start_DMA(&hadc1, rawADC, 4);
 800023e:	2204      	movs	r2, #4
 8000240:	490f      	ldr	r1, [pc, #60]	@ (8000280 <main+0x6c>)
 8000242:	4810      	ldr	r0, [pc, #64]	@ (8000284 <main+0x70>)
 8000244:	f001 fcdc 	bl	8001c00 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() - adc_lastTime > ADC_SCAN_RATE){
 8000248:	f001 f952 	bl	80014f0 <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <main+0x74>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	1ad3      	subs	r3, r2, r3
 8000254:	2b64      	cmp	r3, #100	@ 0x64
 8000256:	d90c      	bls.n	8000272 <main+0x5e>
		  adc_lastTime = HAL_GetTick();
 8000258:	f001 f94a 	bl	80014f0 <HAL_GetTick>
 800025c:	4603      	mov	r3, r0
 800025e:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <main+0x74>)
 8000260:	6013      	str	r3, [r2, #0]
		  flagDir = JOYSTICK_IDLE;
 8000262:	4b0a      	ldr	r3, [pc, #40]	@ (800028c <main+0x78>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_DMA(&hadc1, rawADC, 4);
 8000268:	2204      	movs	r2, #4
 800026a:	4905      	ldr	r1, [pc, #20]	@ (8000280 <main+0x6c>)
 800026c:	4805      	ldr	r0, [pc, #20]	@ (8000284 <main+0x70>)
 800026e:	f001 fcc7 	bl	8001c00 <HAL_ADC_Start_DMA>
	  }

	  // Detect user input and control the mouse
	  JoystickControl();
 8000272:	f000 facb 	bl	800080c <JoystickControl>
	  HAL_Delay(10);
 8000276:	200a      	movs	r0, #10
 8000278:	f000 f8fe 	bl	8000478 <HAL_Delay>
	  if(HAL_GetTick() - adc_lastTime > ADC_SCAN_RATE){
 800027c:	e7e4      	b.n	8000248 <main+0x34>
 800027e:	bf00      	nop
 8000280:	20000250 	.word	0x20000250
 8000284:	20000158 	.word	0x20000158
 8000288:	20000260 	.word	0x20000260
 800028c:	20000248 	.word	0x20000248

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b09a      	sub	sp, #104	@ 0x68
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	f107 0320 	add.w	r3, r7, #32
 800029a:	2248      	movs	r2, #72	@ 0x48
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f009 fefb 	bl	800a09a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]
 80002b2:	615a      	str	r2, [r3, #20]
 80002b4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b6:	4b27      	ldr	r3, [pc, #156]	@ (8000354 <SystemClock_Config+0xc4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80002be:	4a25      	ldr	r2, [pc, #148]	@ (8000354 <SystemClock_Config+0xc4>)
 80002c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002c4:	6013      	str	r3, [r2, #0]
 80002c6:	4b23      	ldr	r3, [pc, #140]	@ (8000354 <SystemClock_Config+0xc4>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80002ce:	603b      	str	r3, [r7, #0]
 80002d0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002d2:	2320      	movs	r3, #32
 80002d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002da:	2300      	movs	r3, #0
 80002dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002de:	2360      	movs	r3, #96	@ 0x60
 80002e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	2302      	movs	r3, #2
 80002e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002e6:	2301      	movs	r3, #1
 80002e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80002ee:	2320      	movs	r3, #32
 80002f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 80002f2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80002f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002f8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80002fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80002fe:	f04f 63c0 	mov.w	r3, #100663296	@ 0x6000000
 8000302:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0320 	add.w	r3, r7, #32
 8000308:	4618      	mov	r0, r3
 800030a:	f005 f823 	bl	8005354 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000314:	f000 f8ca 	bl	80004ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000318:	236f      	movs	r3, #111	@ 0x6f
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	2303      	movs	r3, #3
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800032c:	2380      	movs	r3, #128	@ 0x80
 800032e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2103      	movs	r1, #3
 8000338:	4618      	mov	r0, r3
 800033a:	f005 fb7f 	bl	8005a3c <HAL_RCC_ClockConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000344:	f000 f8b2 	bl	80004ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000348:	f005 fe22 	bl	8005f90 <HAL_RCCEx_EnableMSIPLLMode>
}
 800034c:	bf00      	nop
 800034e:	3768      	adds	r7, #104	@ 0x68
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	58000400 	.word	0x58000400

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	463b      	mov	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
 800036c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800036e:	4b30      	ldr	r3, [pc, #192]	@ (8000430 <MX_ADC1_Init+0xd8>)
 8000370:	4a30      	ldr	r2, [pc, #192]	@ (8000434 <MX_ADC1_Init+0xdc>)
 8000372:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000374:	4b2e      	ldr	r3, [pc, #184]	@ (8000430 <MX_ADC1_Init+0xd8>)
 8000376:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800037a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800037c:	4b2c      	ldr	r3, [pc, #176]	@ (8000430 <MX_ADC1_Init+0xd8>)
 800037e:	2208      	movs	r2, #8
 8000380:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000382:	4b2b      	ldr	r3, [pc, #172]	@ (8000430 <MX_ADC1_Init+0xd8>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000388:	4b29      	ldr	r3, [pc, #164]	@ (8000430 <MX_ADC1_Init+0xd8>)
 800038a:	2201      	movs	r2, #1
 800038c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800038e:	4b28      	ldr	r3, [pc, #160]	@ (8000430 <MX_ADC1_Init+0xd8>)
 8000390:	2204      	movs	r2, #4
 8000392:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000394:	4b26      	ldr	r3, [pc, #152]	@ (8000430 <MX_ADC1_Init+0xd8>)
 8000396:	2200      	movs	r2, #0
 8000398:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800039a:	4b25      	ldr	r3, [pc, #148]	@ (8000430 <MX_ADC1_Init+0xd8>)
 800039c:	2201      	movs	r2, #1
 800039e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80003a0:	4b23      	ldr	r3, [pc, #140]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003a2:	2202      	movs	r2, #2
 80003a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b22      	ldr	r3, [pc, #136]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ae:	4b20      	ldr	r3, [pc, #128]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003c8:	4b19      	ldr	r3, [pc, #100]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d0:	4817      	ldr	r0, [pc, #92]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003d2:	f001 fa8d 	bl	80018f0 <HAL_ADC_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80003dc:	f000 f866 	bl	80004ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003e0:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <MX_ADC1_Init+0xe0>)
 80003e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e4:	2306      	movs	r3, #6
 80003e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80003e8:	2302      	movs	r3, #2
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003ec:	237f      	movs	r3, #127	@ 0x7f
 80003ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003f0:	2304      	movs	r3, #4
 80003f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f8:	463b      	mov	r3, r7
 80003fa:	4619      	mov	r1, r3
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <MX_ADC1_Init+0xd8>)
 80003fe:	f001 fca1 	bl	8001d44 <HAL_ADC_ConfigChannel>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000408:	f000 f850 	bl	80004ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800040c:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <MX_ADC1_Init+0xe4>)
 800040e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000410:	230c      	movs	r3, #12
 8000412:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000414:	463b      	mov	r3, r7
 8000416:	4619      	mov	r1, r3
 8000418:	4805      	ldr	r0, [pc, #20]	@ (8000430 <MX_ADC1_Init+0xd8>)
 800041a:	f001 fc93 	bl	8001d44 <HAL_ADC_ConfigChannel>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000424:	f000 f842 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	3718      	adds	r7, #24
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000158 	.word	0x20000158
 8000434:	50040000 	.word	0x50040000
 8000438:	04300002 	.word	0x04300002
 800043c:	08600004 	.word	0x08600004

08000440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000444:	2004      	movs	r0, #4
 8000446:	f7ff fe99 	bl	800017c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800044a:	2001      	movs	r0, #1
 800044c:	f7ff fe96 	bl	800017c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	200b      	movs	r0, #11
 8000456:	f002 fa5a 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800045a:	200b      	movs	r0, #11
 800045c:	f002 fa71 	bl	8002942 <HAL_NVIC_EnableIRQ>

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000468:	2004      	movs	r0, #4
 800046a:	f7ff fea0 	bl	80001ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046e:	2001      	movs	r0, #1
 8000470:	f7ff fe9d 	bl	80001ae <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <HAL_Delay>:
  * implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  while (Delay)
 8000480:	e008      	b.n	8000494 <HAL_Delay+0x1c>
  {
    if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <HAL_Delay+0x30>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d002      	beq.n	8000494 <HAL_Delay+0x1c>
    {
      Delay--;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3b01      	subs	r3, #1
 8000492:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1f3      	bne.n	8000482 <HAL_Delay+0xa>
    }
  }
}
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000e010 	.word	0xe000e010

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  BSP_LED_On(LED3);
 80004b0:	2002      	movs	r0, #2
 80004b2:	f000 ff11 	bl	80012d8 <BSP_LED_On>
  while (1)
 80004b6:	bf00      	nop
 80004b8:	e7fd      	b.n	80004b6 <Error_Handler+0xa>

080004ba <LL_AHB2_GRP1_EnableClock>:
{
 80004ba:	b480      	push	{r7}
 80004bc:	b085      	sub	sp, #20
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
	...

080004fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a22      	ldr	r2, [pc, #136]	@ (80005a4 <HAL_ADC_MspInit+0xa8>)
 800051a:	4293      	cmp	r3, r2
 800051c:	d13d      	bne.n	800059a <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800051e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000522:	f7ff ffca 	bl	80004ba <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	2004      	movs	r0, #4
 8000528:	f7ff ffc7 	bl	80004ba <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JoyStick_X_Pin|JoyStick_Y_Pin;
 800052c:	2303      	movs	r3, #3
 800052e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000530:	2303      	movs	r3, #3
 8000532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	4619      	mov	r1, r3
 800053e:	481a      	ldr	r0, [pc, #104]	@ (80005a8 <HAL_ADC_MspInit+0xac>)
 8000540:	f002 fc8e 	bl	8002e60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000544:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 8000546:	4a1a      	ldr	r2, [pc, #104]	@ (80005b0 <HAL_ADC_MspInit+0xb4>)
 8000548:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800054a:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 800054c:	2205      	movs	r2, #5
 800054e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000550:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000556:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800055c:	4b13      	ldr	r3, [pc, #76]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 8000564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000568:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800056a:	4b10      	ldr	r3, [pc, #64]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 800056c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000570:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 8000574:	2200      	movs	r2, #0
 8000576:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 800057a:	2200      	movs	r2, #0
 800057c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800057e:	480b      	ldr	r0, [pc, #44]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 8000580:	f002 f9fa 	bl	8002978 <HAL_DMA_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 800058a:	f7ff ff8f 	bl	80004ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4a06      	ldr	r2, [pc, #24]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000594:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <HAL_ADC_MspInit+0xb0>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800059a:	bf00      	nop
 800059c:	3720      	adds	r7, #32
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	50040000 	.word	0x50040000
 80005a8:	48000800 	.word	0x48000800
 80005ac:	200001e8 	.word	0x200001e8
 80005b0:	40020008 	.word	0x40020008

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <NMI_Handler+0x4>

080005bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <MemManage_Handler+0x4>

080005cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <UsageFault_Handler+0x4>

080005dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060a:	f000 ff5d 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000618:	4802      	ldr	r0, [pc, #8]	@ (8000624 <DMA1_Channel1_IRQHandler+0x10>)
 800061a:	f002 fad0 	bl	8002bbe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200001e8 	.word	0x200001e8

08000628 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800062c:	4802      	ldr	r0, [pc, #8]	@ (8000638 <USB_LP_IRQHandler+0x10>)
 800062e:	f002 feb2 	bl	8003396 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000588 	.word	0x20000588

0800063c <EXTI4_IRQHandler>:
  * @param  None
  * @retval None
  */

void EXTI4_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_KEY1_PIN);
 8000640:	2010      	movs	r0, #16
 8000642:	f002 fd95 	bl	8003170 <HAL_GPIO_EXTI_IRQHandler>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800064a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800064c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064e:	3304      	adds	r3, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000652:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000654:	d3f9      	bcc.n	800064a <CopyDataInit>
  bx lr
 8000656:	4770      	bx	lr

08000658 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000658:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800065a:	3004      	adds	r0, #4

0800065c <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800065c:	4288      	cmp	r0, r1
  bcc FillZerobss
 800065e:	d3fb      	bcc.n	8000658 <FillZerobss>
  bx lr
 8000660:	4770      	bx	lr
	...

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480c      	ldr	r0, [pc, #48]	@ (8000698 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <LoopForever+0x8>)
 800066a:	490d      	ldr	r1, [pc, #52]	@ (80006a0 <LoopForever+0xc>)
 800066c:	4a0d      	ldr	r2, [pc, #52]	@ (80006a4 <LoopForever+0x10>)
 800066e:	2300      	movs	r3, #0
 8000670:	f7ff ffee 	bl	8000650 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <LoopForever+0x14>)
 8000676:	490d      	ldr	r1, [pc, #52]	@ (80006ac <LoopForever+0x18>)
 8000678:	2300      	movs	r3, #0
 800067a:	f7ff ffef 	bl	800065c <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800067e:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <LoopForever+0x1c>)
 8000680:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <LoopForever+0x20>)
 8000682:	2300      	movs	r3, #0
 8000684:	f7ff ffea 	bl	800065c <LoopFillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000688:	f000 feb0 	bl	80013ec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800068c:	f009 fd0e 	bl	800a0ac <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000690:	f7ff fdc0 	bl	8000214 <main>

08000694 <LoopForever>:

LoopForever:
  b LoopForever
 8000694:	e7fe      	b.n	8000694 <LoopForever>
 8000696:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000698:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800069c:	20000008 	.word	0x20000008
 80006a0:	2000013c 	.word	0x2000013c
 80006a4:	0800a21c 	.word	0x0800a21c
  INIT_BSS _sbss, _ebss
 80006a8:	2000013c 	.word	0x2000013c
 80006ac:	20000880 	.word	0x20000880
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80006b0:	20030000 	.word	0x20030000
 80006b4:	20030000 	.word	0x20030000

080006b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_IRQHandler>

080006ba <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b085      	sub	sp, #20
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4013      	ands	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <USBD_Clock_Config>:
/**
  * @brief USB Clock Configuration
  * @retval None
  */
void USBD_Clock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b098      	sub	sp, #96	@ 0x60
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	2248      	movs	r2, #72	@ 0x48
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f009 fccd 	bl	800a09a <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct= {0};
 8000700:	463b      	mov	r3, r7
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]

  /* Enable HSI48 */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000710:	2340      	movs	r3, #64	@ 0x40
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4618      	mov	r0, r3
 8000722:	f004 fe17 	bl	8005354 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <USBD_Clock_Config+0x44>
  {
    Error_Handler();
 800072c:	f7ff febe 	bl	80004ac <Error_Handler>
  }
  /*Configure the clock recovery system (CRS)**********************************/

  /*Enable CRS Clock*/
  __HAL_RCC_CRS_CLK_ENABLE();
 8000730:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000734:	f7ff ffc1 	bl	80006ba <LL_APB1_GRP1_EnableClock>

  /* Default Synchro Signal division factor (not divided) */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]

  /* Set the SYNCSRC[1:0] bits according to CRS_Source value */
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800073c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000740:	607b      	str	r3, [r7, #4]

  /* HSI48 is synchronized with USB SOF at 1KHz rate */
  RCC_CRSInitStruct.ReloadValue =  __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000, 1000);
 8000742:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8000748:	2322      	movs	r3, #34	@ 0x22
 800074a:	613b      	str	r3, [r7, #16]

  /* Set the TRIM[5:0] to the default value */
  RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 800074c:	2320      	movs	r3, #32
 800074e:	617b      	str	r3, [r7, #20]

  /* Start automatic synchronization */
  HAL_RCCEx_CRSConfig (&RCC_CRSInitStruct);
 8000750:	463b      	mov	r3, r7
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fc22 	bl	8005f9c <HAL_RCCEx_CRSConfig>
}
 8000758:	bf00      	nop
 800075a:	3760      	adds	r7, #96	@ 0x60
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <GetPointerData>:
  * @brief  Gets Pointer Data X
  * @param  pbuf: Pointer to report
  * @retval None
  */
void GetPointerData(uint8_t * pbuf, joystick_dir _dir)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
  int8_t x = 0, y = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	2300      	movs	r3, #0
 8000772:	73bb      	strb	r3, [r7, #14]

  if (_dir == JOYSTICK_RIGHT){
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b06      	cmp	r3, #6
 8000778:	d102      	bne.n	8000780 <GetPointerData+0x20>
	  x = +CURSOR_STEP;
 800077a:	2302      	movs	r3, #2
 800077c:	73fb      	strb	r3, [r7, #15]
 800077e:	e030      	b.n	80007e2 <GetPointerData+0x82>
  }
  else if(_dir == JOYSTICK_LEFT){
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d102      	bne.n	800078c <GetPointerData+0x2c>
	  x = -CURSOR_STEP;
 8000786:	23fe      	movs	r3, #254	@ 0xfe
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	e02a      	b.n	80007e2 <GetPointerData+0x82>
  }
  else if (_dir == JOYSTICK_UP){
 800078c:	78fb      	ldrb	r3, [r7, #3]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d102      	bne.n	8000798 <GetPointerData+0x38>
	  y = -CURSOR_STEP;
 8000792:	23fe      	movs	r3, #254	@ 0xfe
 8000794:	73bb      	strb	r3, [r7, #14]
 8000796:	e024      	b.n	80007e2 <GetPointerData+0x82>
  }
  else if (_dir == JOYSTICK_DOWN){
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d102      	bne.n	80007a4 <GetPointerData+0x44>
	  y = +CURSOR_STEP;
 800079e:	2302      	movs	r3, #2
 80007a0:	73bb      	strb	r3, [r7, #14]
 80007a2:	e01e      	b.n	80007e2 <GetPointerData+0x82>
  }
  else if (_dir == JOYSTICK_UP_LEFT){
 80007a4:	78fb      	ldrb	r3, [r7, #3]
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	d104      	bne.n	80007b4 <GetPointerData+0x54>
	  x = -CURSOR_STEP;
 80007aa:	23fe      	movs	r3, #254	@ 0xfe
 80007ac:	73fb      	strb	r3, [r7, #15]
	  y = -CURSOR_STEP;
 80007ae:	23fe      	movs	r3, #254	@ 0xfe
 80007b0:	73bb      	strb	r3, [r7, #14]
 80007b2:	e016      	b.n	80007e2 <GetPointerData+0x82>
  }
  else if (_dir == JOYSTICK_DOWN_LEFT){
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	2b05      	cmp	r3, #5
 80007b8:	d104      	bne.n	80007c4 <GetPointerData+0x64>
  	  x = -CURSOR_STEP;
 80007ba:	23fe      	movs	r3, #254	@ 0xfe
 80007bc:	73fb      	strb	r3, [r7, #15]
  	  y = +CURSOR_STEP;
 80007be:	2302      	movs	r3, #2
 80007c0:	73bb      	strb	r3, [r7, #14]
 80007c2:	e00e      	b.n	80007e2 <GetPointerData+0x82>
  }
  else if (_dir == JOYSTICK_UP_RIGHT){
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d104      	bne.n	80007d4 <GetPointerData+0x74>
  	  x = +CURSOR_STEP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	73fb      	strb	r3, [r7, #15]
  	  y = -CURSOR_STEP;
 80007ce:	23fe      	movs	r3, #254	@ 0xfe
 80007d0:	73bb      	strb	r3, [r7, #14]
 80007d2:	e006      	b.n	80007e2 <GetPointerData+0x82>
  }
  else if (_dir == JOYSTICK_DOWN_RIGHT){
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	2b08      	cmp	r3, #8
 80007d8:	d103      	bne.n	80007e2 <GetPointerData+0x82>
  	  x = +CURSOR_STEP;
 80007da:	2302      	movs	r3, #2
 80007dc:	73fb      	strb	r3, [r7, #15]
  	  y = +CURSOR_STEP;
 80007de:	2302      	movs	r3, #2
 80007e0:	73bb      	strb	r3, [r7, #14]
  }


  pbuf[0] = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
  pbuf[1] = x;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3301      	adds	r3, #1
 80007ec:	7bfa      	ldrb	r2, [r7, #15]
 80007ee:	701a      	strb	r2, [r3, #0]
  pbuf[2] = y;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3302      	adds	r3, #2
 80007f4:	7bba      	ldrb	r2, [r7, #14]
 80007f6:	701a      	strb	r2, [r3, #0]
  pbuf[3] = 0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3303      	adds	r3, #3
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <JoystickControl>:
  *         Handle joystick ADC input to control the mouse through USB Device
  * @param  None
  * @retval None
  */
void JoystickControl(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	if ((((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup == 1) && (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_SUSPENDED))
 8000810:	4b70      	ldr	r3, [pc, #448]	@ (80009d4 <JoystickControl+0x1c8>)
 8000812:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000816:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800081a:	2b01      	cmp	r3, #1
 800081c:	d128      	bne.n	8000870 <JoystickControl+0x64>
 800081e:	4b6d      	ldr	r3, [pc, #436]	@ (80009d4 <JoystickControl+0x1c8>)
 8000820:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b04      	cmp	r3, #4
 800082c:	d120      	bne.n	8000870 <JoystickControl+0x64>
	{
		if ((&hpcd_USB_FS)->Init.low_power_enable)
 800082e:	4b69      	ldr	r3, [pc, #420]	@ (80009d4 <JoystickControl+0x1c8>)
 8000830:	7a5b      	ldrb	r3, [r3, #9]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d003      	beq.n	800083e <JoystickControl+0x32>
		{
			HAL_ResumeTick();
 8000836:	f000 fe83 	bl	8001540 <HAL_ResumeTick>
			SystemClockConfig_Resume();
 800083a:	f000 fcc5 	bl	80011c8 <SystemClockConfig_Resume>
		}
		/* Activate Remote wakeup */
		HAL_PCD_ActivateRemoteWakeup((&hpcd_USB_FS));
 800083e:	4865      	ldr	r0, [pc, #404]	@ (80009d4 <JoystickControl+0x1c8>)
 8000840:	f003 f8a7 	bl	8003992 <HAL_PCD_ActivateRemoteWakeup>

		/* Remote wakeup delay */
		HAL_Delay(10);
 8000844:	200a      	movs	r0, #10
 8000846:	f7ff fe17 	bl	8000478 <HAL_Delay>

		/* Disable Remote wakeup */
		HAL_PCD_DeActivateRemoteWakeup((&hpcd_USB_FS));
 800084a:	4862      	ldr	r0, [pc, #392]	@ (80009d4 <JoystickControl+0x1c8>)
 800084c:	f003 f8af 	bl	80039ae <HAL_PCD_DeActivateRemoteWakeup>

		/* change state to configured */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state = USBD_STATE_CONFIGURED;
 8000850:	4b60      	ldr	r3, [pc, #384]	@ (80009d4 <JoystickControl+0x1c8>)
 8000852:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000856:	2203      	movs	r2, #3
 8000858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

		/* Change remote_wakeup feature to 0 */
		((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_remote_wakeup = 0;
 800085c:	4b5d      	ldr	r3, [pc, #372]	@ (80009d4 <JoystickControl+0x1c8>)
 800085e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
		remotewakeupon = 1;
 8000868:	4b5b      	ldr	r3, [pc, #364]	@ (80009d8 <JoystickControl+0x1cc>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_DOWN_LEFT);
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
		  }
		}
	}
}
 800086e:	e0af      	b.n	80009d0 <JoystickControl+0x1c4>
	else if (((USBD_HandleTypeDef *) hpcd_USB_FS.pData)->dev_state == USBD_STATE_CONFIGURED){
 8000870:	4b58      	ldr	r3, [pc, #352]	@ (80009d4 <JoystickControl+0x1c8>)
 8000872:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b03      	cmp	r3, #3
 800087e:	f040 80a7 	bne.w	80009d0 <JoystickControl+0x1c4>
		if(joystick_X >= THR_MOVE_1AXIS_MIN && joystick_X <= THR_MOVE_1AXIS_MAX){
 8000882:	4b56      	ldr	r3, [pc, #344]	@ (80009dc <JoystickControl+0x1d0>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800088a:	d327      	bcc.n	80008dc <JoystickControl+0xd0>
 800088c:	4b53      	ldr	r3, [pc, #332]	@ (80009dc <JoystickControl+0x1d0>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000894:	d822      	bhi.n	80008dc <JoystickControl+0xd0>
		  if (joystick_Y < THR_MOVE_UP)
 8000896:	4b52      	ldr	r3, [pc, #328]	@ (80009e0 <JoystickControl+0x1d4>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800089e:	d20c      	bcs.n	80008ba <JoystickControl+0xae>
			  flagDir = JOYSTICK_UP;
 80008a0:	4b50      	ldr	r3, [pc, #320]	@ (80009e4 <JoystickControl+0x1d8>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_UP);
 80008a6:	2101      	movs	r1, #1
 80008a8:	484f      	ldr	r0, [pc, #316]	@ (80009e8 <JoystickControl+0x1dc>)
 80008aa:	f7ff ff59 	bl	8000760 <GetPointerData>
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
 80008ae:	2204      	movs	r2, #4
 80008b0:	494d      	ldr	r1, [pc, #308]	@ (80009e8 <JoystickControl+0x1dc>)
 80008b2:	484e      	ldr	r0, [pc, #312]	@ (80009ec <JoystickControl+0x1e0>)
 80008b4:	f009 faea 	bl	8009e8c <USBD_HID_SendReport>
 80008b8:	e010      	b.n	80008dc <JoystickControl+0xd0>
		  else if (joystick_Y > THR_MOVE_DOWN)
 80008ba:	4b49      	ldr	r3, [pc, #292]	@ (80009e0 <JoystickControl+0x1d4>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80008c2:	d90b      	bls.n	80008dc <JoystickControl+0xd0>
			  flagDir = JOYSTICK_DOWN;
 80008c4:	4b47      	ldr	r3, [pc, #284]	@ (80009e4 <JoystickControl+0x1d8>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	701a      	strb	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_DOWN);
 80008ca:	2102      	movs	r1, #2
 80008cc:	4846      	ldr	r0, [pc, #280]	@ (80009e8 <JoystickControl+0x1dc>)
 80008ce:	f7ff ff47 	bl	8000760 <GetPointerData>
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
 80008d2:	2204      	movs	r2, #4
 80008d4:	4944      	ldr	r1, [pc, #272]	@ (80009e8 <JoystickControl+0x1dc>)
 80008d6:	4845      	ldr	r0, [pc, #276]	@ (80009ec <JoystickControl+0x1e0>)
 80008d8:	f009 fad8 	bl	8009e8c <USBD_HID_SendReport>
		if(joystick_Y >= THR_MOVE_1AXIS_MIN && joystick_Y <= THR_MOVE_1AXIS_MAX)
 80008dc:	4b40      	ldr	r3, [pc, #256]	@ (80009e0 <JoystickControl+0x1d4>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80008e4:	d327      	bcc.n	8000936 <JoystickControl+0x12a>
 80008e6:	4b3e      	ldr	r3, [pc, #248]	@ (80009e0 <JoystickControl+0x1d4>)
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008ee:	d822      	bhi.n	8000936 <JoystickControl+0x12a>
		  if (joystick_X < THR_MOVE_LEFT)
 80008f0:	4b3a      	ldr	r3, [pc, #232]	@ (80009dc <JoystickControl+0x1d0>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80008f8:	d20c      	bcs.n	8000914 <JoystickControl+0x108>
			  flagDir = JOYSTICK_LEFT;
 80008fa:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <JoystickControl+0x1d8>)
 80008fc:	2203      	movs	r2, #3
 80008fe:	701a      	strb	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_LEFT);
 8000900:	2103      	movs	r1, #3
 8000902:	4839      	ldr	r0, [pc, #228]	@ (80009e8 <JoystickControl+0x1dc>)
 8000904:	f7ff ff2c 	bl	8000760 <GetPointerData>
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
 8000908:	2204      	movs	r2, #4
 800090a:	4937      	ldr	r1, [pc, #220]	@ (80009e8 <JoystickControl+0x1dc>)
 800090c:	4837      	ldr	r0, [pc, #220]	@ (80009ec <JoystickControl+0x1e0>)
 800090e:	f009 fabd 	bl	8009e8c <USBD_HID_SendReport>
 8000912:	e010      	b.n	8000936 <JoystickControl+0x12a>
		  else if (joystick_X > THR_MOVE_RIGHT)
 8000914:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <JoystickControl+0x1d0>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800091c:	d90b      	bls.n	8000936 <JoystickControl+0x12a>
			  flagDir = JOYSTICK_RIGHT;
 800091e:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <JoystickControl+0x1d8>)
 8000920:	2206      	movs	r2, #6
 8000922:	701a      	strb	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_RIGHT);
 8000924:	2106      	movs	r1, #6
 8000926:	4830      	ldr	r0, [pc, #192]	@ (80009e8 <JoystickControl+0x1dc>)
 8000928:	f7ff ff1a 	bl	8000760 <GetPointerData>
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
 800092c:	2204      	movs	r2, #4
 800092e:	492e      	ldr	r1, [pc, #184]	@ (80009e8 <JoystickControl+0x1dc>)
 8000930:	482e      	ldr	r0, [pc, #184]	@ (80009ec <JoystickControl+0x1e0>)
 8000932:	f009 faab 	bl	8009e8c <USBD_HID_SendReport>
		if(joystick_X >= THR_MOVE_Q14_X){
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <JoystickControl+0x1d0>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800093e:	d321      	bcc.n	8000984 <JoystickControl+0x178>
		  if(joystick_Y <= THR_MOVE_Q1_Y){
 8000940:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <JoystickControl+0x1d4>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	2b64      	cmp	r3, #100	@ 0x64
 8000946:	d80c      	bhi.n	8000962 <JoystickControl+0x156>
			  flagDir = JOYSTICK_UP_RIGHT;
 8000948:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <JoystickControl+0x1d8>)
 800094a:	2207      	movs	r2, #7
 800094c:	701a      	strb	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_UP_RIGHT);
 800094e:	2107      	movs	r1, #7
 8000950:	4825      	ldr	r0, [pc, #148]	@ (80009e8 <JoystickControl+0x1dc>)
 8000952:	f7ff ff05 	bl	8000760 <GetPointerData>
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
 8000956:	2204      	movs	r2, #4
 8000958:	4923      	ldr	r1, [pc, #140]	@ (80009e8 <JoystickControl+0x1dc>)
 800095a:	4824      	ldr	r0, [pc, #144]	@ (80009ec <JoystickControl+0x1e0>)
 800095c:	f009 fa96 	bl	8009e8c <USBD_HID_SendReport>
 8000960:	e010      	b.n	8000984 <JoystickControl+0x178>
		  else if(joystick_Y >= THR_MOVE_Q4_Y){
 8000962:	4b1f      	ldr	r3, [pc, #124]	@ (80009e0 <JoystickControl+0x1d4>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800096a:	d30b      	bcc.n	8000984 <JoystickControl+0x178>
			  flagDir = JOYSTICK_DOWN_RIGHT;
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <JoystickControl+0x1d8>)
 800096e:	2208      	movs	r2, #8
 8000970:	701a      	strb	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_DOWN_RIGHT);
 8000972:	2108      	movs	r1, #8
 8000974:	481c      	ldr	r0, [pc, #112]	@ (80009e8 <JoystickControl+0x1dc>)
 8000976:	f7ff fef3 	bl	8000760 <GetPointerData>
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
 800097a:	2204      	movs	r2, #4
 800097c:	491a      	ldr	r1, [pc, #104]	@ (80009e8 <JoystickControl+0x1dc>)
 800097e:	481b      	ldr	r0, [pc, #108]	@ (80009ec <JoystickControl+0x1e0>)
 8000980:	f009 fa84 	bl	8009e8c <USBD_HID_SendReport>
		if(joystick_X <= THR_MOVE_Q23_X){
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <JoystickControl+0x1d0>)
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2b64      	cmp	r3, #100	@ 0x64
 800098a:	d821      	bhi.n	80009d0 <JoystickControl+0x1c4>
		  if(joystick_Y <= THR_MOVE_Q2_Y){
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <JoystickControl+0x1d4>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	2b64      	cmp	r3, #100	@ 0x64
 8000992:	d80c      	bhi.n	80009ae <JoystickControl+0x1a2>
			  flagDir = JOYSTICK_UP_LEFT;
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <JoystickControl+0x1d8>)
 8000996:	2204      	movs	r2, #4
 8000998:	701a      	strb	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_UP_LEFT);
 800099a:	2104      	movs	r1, #4
 800099c:	4812      	ldr	r0, [pc, #72]	@ (80009e8 <JoystickControl+0x1dc>)
 800099e:	f7ff fedf 	bl	8000760 <GetPointerData>
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
 80009a2:	2204      	movs	r2, #4
 80009a4:	4910      	ldr	r1, [pc, #64]	@ (80009e8 <JoystickControl+0x1dc>)
 80009a6:	4811      	ldr	r0, [pc, #68]	@ (80009ec <JoystickControl+0x1e0>)
 80009a8:	f009 fa70 	bl	8009e8c <USBD_HID_SendReport>
}
 80009ac:	e010      	b.n	80009d0 <JoystickControl+0x1c4>
		  else if(joystick_Y >= THR_MOVE_Q3_Y){
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <JoystickControl+0x1d4>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80009b6:	d30b      	bcc.n	80009d0 <JoystickControl+0x1c4>
			  flagDir = JOYSTICK_DOWN_LEFT;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <JoystickControl+0x1d8>)
 80009ba:	2205      	movs	r2, #5
 80009bc:	701a      	strb	r2, [r3, #0]
			  GetPointerData(HID_Buffer, JOYSTICK_DOWN_LEFT);
 80009be:	2105      	movs	r1, #5
 80009c0:	4809      	ldr	r0, [pc, #36]	@ (80009e8 <JoystickControl+0x1dc>)
 80009c2:	f7ff fecd 	bl	8000760 <GetPointerData>
			  USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 4);
 80009c6:	2204      	movs	r2, #4
 80009c8:	4907      	ldr	r1, [pc, #28]	@ (80009e8 <JoystickControl+0x1dc>)
 80009ca:	4808      	ldr	r0, [pc, #32]	@ (80009ec <JoystickControl+0x1e0>)
 80009cc:	f009 fa5e 	bl	8009e8c <USBD_HID_SendReport>
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000588 	.word	0x20000588
 80009d8:	20000264 	.word	0x20000264
 80009dc:	2000024a 	.word	0x2000024a
 80009e0:	2000024c 	.word	0x2000024c
 80009e4:	20000248 	.word	0x20000248
 80009e8:	20000268 	.word	0x20000268
 80009ec:	2000026c 	.word	0x2000026c

080009f0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  /* USB Clock Initialization */
   USBD_Clock_Config();
 80009f4:	f7ff fe7a 	bl	80006ec <USBD_Clock_Config>
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &HID_Desc, DEVICE_FS) != USBD_OK) {
 80009f8:	2200      	movs	r2, #0
 80009fa:	490e      	ldr	r1, [pc, #56]	@ (8000a34 <MX_USB_Device_Init+0x44>)
 80009fc:	480e      	ldr	r0, [pc, #56]	@ (8000a38 <MX_USB_Device_Init+0x48>)
 80009fe:	f007 feab 	bl	8008758 <USBD_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USB_Device_Init+0x1c>
    Error_Handler();
 8000a08:	f7ff fd50 	bl	80004ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK) {
 8000a0c:	490b      	ldr	r1, [pc, #44]	@ (8000a3c <MX_USB_Device_Init+0x4c>)
 8000a0e:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <MX_USB_Device_Init+0x48>)
 8000a10:	f007 fed2 	bl	80087b8 <USBD_RegisterClass>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USB_Device_Init+0x2e>
    Error_Handler();
 8000a1a:	f7ff fd47 	bl	80004ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8000a1e:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <MX_USB_Device_Init+0x48>)
 8000a20:	f007 ff00 	bl	8008824 <USBD_Start>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USB_Device_Init+0x3e>
    Error_Handler();
 8000a2a:	f7ff fd3f 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000008 	.word	0x20000008
 8000a38:	2000026c 	.word	0x2000026c
 8000a3c:	2000007c 	.word	0x2000007c

08000a40 <USBD_HID_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HID_DeviceDesc);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2212      	movs	r2, #18
 8000a50:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceDesc;
 8000a52:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <USBD_HID_DeviceDescriptor+0x20>)
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	20000024 	.word	0x20000024

08000a64 <USBD_HID_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2204      	movs	r2, #4
 8000a74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8000a76:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <USBD_HID_LangIDStrDescriptor+0x20>)
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	20000038 	.word	0x20000038

08000a88 <USBD_HID_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d105      	bne.n	8000aa6 <USBD_HID_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	4907      	ldr	r1, [pc, #28]	@ (8000abc <USBD_HID_ProductStrDescriptor+0x34>)
 8000a9e:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <USBD_HID_ProductStrDescriptor+0x38>)
 8000aa0:	f008 ffde 	bl	8009a60 <USBD_GetString>
 8000aa4:	e004      	b.n	8000ab0 <USBD_HID_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	4904      	ldr	r1, [pc, #16]	@ (8000abc <USBD_HID_ProductStrDescriptor+0x34>)
 8000aaa:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <USBD_HID_ProductStrDescriptor+0x38>)
 8000aac:	f008 ffd8 	bl	8009a60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	@ (8000abc <USBD_HID_ProductStrDescriptor+0x34>)
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000548 	.word	0x20000548
 8000ac0:	0800a10c 	.word	0x0800a10c

08000ac4 <USBD_HID_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	4904      	ldr	r1, [pc, #16]	@ (8000ae4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <USBD_HID_ManufacturerStrDescriptor+0x24>)
 8000ad6:	f008 ffc3 	bl	8009a60 <USBD_GetString>
  return USBD_StrDesc;
 8000ada:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <USBD_HID_ManufacturerStrDescriptor+0x20>)
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000548 	.word	0x20000548
 8000ae8:	0800a124 	.word	0x0800a124

08000aec <USBD_HID_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	221a      	movs	r2, #26
 8000afc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8000afe:	f000 f843 	bl	8000b88 <Get_SerialNum>

  /* USER CODE BEGIN USBD_HID_SerialStrDescriptor */

  /* USER CODE END USBD_HID_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8000b02:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <USBD_HID_SerialStrDescriptor+0x20>)
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000003c 	.word	0x2000003c

08000b10 <USBD_HID_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d105      	bne.n	8000b2e <USBD_HID_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8000b22:	683a      	ldr	r2, [r7, #0]
 8000b24:	4907      	ldr	r1, [pc, #28]	@ (8000b44 <USBD_HID_ConfigStrDescriptor+0x34>)
 8000b26:	4808      	ldr	r0, [pc, #32]	@ (8000b48 <USBD_HID_ConfigStrDescriptor+0x38>)
 8000b28:	f008 ff9a 	bl	8009a60 <USBD_GetString>
 8000b2c:	e004      	b.n	8000b38 <USBD_HID_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	4904      	ldr	r1, [pc, #16]	@ (8000b44 <USBD_HID_ConfigStrDescriptor+0x34>)
 8000b32:	4805      	ldr	r0, [pc, #20]	@ (8000b48 <USBD_HID_ConfigStrDescriptor+0x38>)
 8000b34:	f008 ff94 	bl	8009a60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000b38:	4b02      	ldr	r3, [pc, #8]	@ (8000b44 <USBD_HID_ConfigStrDescriptor+0x34>)
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000548 	.word	0x20000548
 8000b48:	0800a138 	.word	0x0800a138

08000b4c <USBD_HID_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HID_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d105      	bne.n	8000b6a <USBD_HID_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	4907      	ldr	r1, [pc, #28]	@ (8000b80 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8000b64:	f008 ff7c 	bl	8009a60 <USBD_GetString>
 8000b68:	e004      	b.n	8000b74 <USBD_HID_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	4904      	ldr	r1, [pc, #16]	@ (8000b80 <USBD_HID_InterfaceStrDescriptor+0x34>)
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <USBD_HID_InterfaceStrDescriptor+0x38>)
 8000b70:	f008 ff76 	bl	8009a60 <USBD_GetString>
  }
  return USBD_StrDesc;
 8000b74:	4b02      	ldr	r3, [pc, #8]	@ (8000b80 <USBD_HID_InterfaceStrDescriptor+0x34>)
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000548 	.word	0x20000548
 8000b84:	0800a144 	.word	0x0800a144

08000b88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <Get_SerialNum+0x44>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <Get_SerialNum+0x48>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <Get_SerialNum+0x4c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d009      	beq.n	8000bc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000bae:	2208      	movs	r2, #8
 8000bb0:	4909      	ldr	r1, [pc, #36]	@ (8000bd8 <Get_SerialNum+0x50>)
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f000 f814 	bl	8000be0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000bb8:	2204      	movs	r2, #4
 8000bba:	4908      	ldr	r1, [pc, #32]	@ (8000bdc <Get_SerialNum+0x54>)
 8000bbc:	68b8      	ldr	r0, [r7, #8]
 8000bbe:	f000 f80f 	bl	8000be0 <IntToUnicode>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	1fff7590 	.word	0x1fff7590
 8000bd0:	1fff7594 	.word	0x1fff7594
 8000bd4:	1fff7598 	.word	0x1fff7598
 8000bd8:	2000003e 	.word	0x2000003e
 8000bdc:	2000004e 	.word	0x2000004e

08000be0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	4613      	mov	r3, r2
 8000bec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	75fb      	strb	r3, [r7, #23]
 8000bf6:	e027      	b.n	8000c48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	0f1b      	lsrs	r3, r3, #28
 8000bfc:	2b09      	cmp	r3, #9
 8000bfe:	d80b      	bhi.n	8000c18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	0f1b      	lsrs	r3, r3, #28
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	7dfb      	ldrb	r3, [r7, #23]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	440b      	add	r3, r1
 8000c10:	3230      	adds	r2, #48	@ 0x30
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e00a      	b.n	8000c2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	0f1b      	lsrs	r3, r3, #28
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	7dfb      	ldrb	r3, [r7, #23]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	4619      	mov	r1, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	440b      	add	r3, r1
 8000c28:	3237      	adds	r2, #55	@ 0x37
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	3301      	adds	r3, #1
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	3301      	adds	r3, #1
 8000c46:	75fb      	strb	r3, [r7, #23]
 8000c48:	7dfa      	ldrb	r2, [r7, #23]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d3d3      	bcc.n	8000bf8 <IntToUnicode+0x18>
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <LL_AHB2_GRP1_EnableClock>:
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b085      	sub	sp, #20
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_APB1_GRP1_EnableClock>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <HAL_PCD_MspInit+0x6c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d120      	bne.n	8000d28 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ffb9 	bl	8000c5e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000cf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000cfe:	230a      	movs	r3, #10
 8000d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0c:	f002 f8a8 	bl	8002e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d10:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000d14:	f7ff ffbc 	bl	8000c90 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 6, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2106      	movs	r1, #6
 8000d1c:	2014      	movs	r0, #20
 8000d1e:	f001 fdf6 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8000d22:	2014      	movs	r0, #20
 8000d24:	f001 fe0d 	bl	8002942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40006800 	.word	0x40006800

08000d34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4610      	mov	r0, r2
 8000d4c:	f007 fdb7 	bl	80088be <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8000d6a:	78fa      	ldrb	r2, [r7, #3]
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	440b      	add	r3, r1
 8000d78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f007 fdf1 	bl	8008968 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	460b      	mov	r3, r1
 8000d98:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	3324      	adds	r3, #36	@ 0x24
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f007 fe8a 	bl	8008ace <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f007 ffc4 	bl	8008d5e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	795b      	ldrb	r3, [r3, #5]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d001      	beq.n	8000df6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8000df2:	f7ff fb5b 	bl	80004ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f007 ff68 	bl	8008cd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 ff10 	bl	8008c32 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f007 ff63 	bl	8008cf6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7a5b      	ldrb	r3, [r3, #9]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00d      	beq.n	8000e54 <HAL_PCD_SuspendCallback+0x38>
  {
    HAL_SuspendTick();
 8000e38:	f000 fb72 	bl	8001520 <HAL_SuspendTick>

    /* Stop 1 mode with Main Regulator */
    PWR->CR1 |= PWR_CR1_LPMS_1;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	@ (8000e5c <HAL_PCD_SuspendCallback+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_PCD_SuspendCallback+0x40>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	6013      	str	r3, [r2, #0]
    /* Set SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)(SCB_SCR_SLEEPDEEP_Msk);
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_PCD_SuspendCallback+0x44>)
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <HAL_PCD_SuspendCallback+0x44>)
 8000e4e:	f043 0304 	orr.w	r3, r3, #4
 8000e52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58000400 	.word	0x58000400
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7a5b      	ldrb	r3, [r3, #9]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d009      	beq.n	8000e88 <HAL_PCD_ResumeCallback+0x24>
  {
    HAL_ResumeTick();
 8000e74:	f000 fb64 	bl	8001540 <HAL_ResumeTick>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_PCD_ResumeCallback+0x38>)
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_PCD_ResumeCallback+0x38>)
 8000e7e:	f023 0306 	bic.w	r3, r3, #6
 8000e82:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8000e84:	f000 f9a0 	bl	80011c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f007 ff4d 	bl	8008d2e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8000ea8:	4a23      	ldr	r2, [pc, #140]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a21      	ldr	r2, [pc, #132]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000eb4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8000eb8:	f003 fede 	bl	8004c78 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8000f3c <USBD_LL_Init+0x9c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000eec:	4812      	ldr	r0, [pc, #72]	@ (8000f38 <USBD_LL_Init+0x98>)
 8000eee:	f002 f962 	bl	80031b6 <HAL_PCD_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8000ef8:	f7ff fad8 	bl	80004ac <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, 0x00, PCD_SNG_BUF, 0x0C);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8000f02:	230c      	movs	r3, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	2100      	movs	r1, #0
 8000f08:	f003 fe1f 	bl	8004b4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, 0x80, PCD_SNG_BUF, 0x4C);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8000f12:	234c      	movs	r3, #76	@ 0x4c
 8000f14:	2200      	movs	r2, #0
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	f003 fe17 	bl	8004b4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData, HID_EPIN_ADDR, PCD_SNG_BUF, 0x8C);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8000f22:	238c      	movs	r3, #140	@ 0x8c
 8000f24:	2200      	movs	r2, #0
 8000f26:	2181      	movs	r1, #129	@ 0x81
 8000f28:	f003 fe0f 	bl	8004b4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000588 	.word	0x20000588
 8000f3c:	40006800 	.word	0x40006800

08000f40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 f9fb 	bl	8003352 <HAL_PCD_Start>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f938 	bl	80011d8 <USBD_Get_USB_Status>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	4608      	mov	r0, r1
 8000f80:	4611      	mov	r1, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	4603      	mov	r3, r0
 8000f86:	70fb      	strb	r3, [r7, #3]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70bb      	strb	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8000f9e:	78bb      	ldrb	r3, [r7, #2]
 8000fa0:	883a      	ldrh	r2, [r7, #0]
 8000fa2:	78f9      	ldrb	r1, [r7, #3]
 8000fa4:	f002 fb42 	bl	800362c <HAL_PCD_EP_Open>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f912 	bl	80011d8 <USBD_Get_USB_Status>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 fb80 	bl	80036e6 <HAL_PCD_EP_Close>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f8f3 	bl	80011d8 <USBD_Get_USB_Status>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800101a:	78fa      	ldrb	r2, [r7, #3]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fc11 	bl	8003846 <HAL_PCD_EP_SetStall>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f8d4 	bl	80011d8 <USBD_Get_USB_Status>
 8001030:	4603      	mov	r3, r0
 8001032:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fc44 	bl	80038ea <HAL_PCD_EP_ClrStall>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f8b5 	bl	80011d8 <USBD_Get_USB_Status>
 800106e:	4603      	mov	r3, r0
 8001070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001072:	7bbb      	ldrb	r3, [r7, #14]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800108e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001094:	2b00      	cmp	r3, #0
 8001096:	da0b      	bge.n	80010b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800109e:	68f9      	ldr	r1, [r7, #12]
 80010a0:	4613      	mov	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	440b      	add	r3, r1
 80010aa:	3312      	adds	r3, #18
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	e00b      	b.n	80010c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80010b6:	68f9      	ldr	r1, [r7, #12]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80010c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80010ee:	78fa      	ldrb	r2, [r7, #3]
 80010f0:	4611      	mov	r1, r2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fa76 	bl	80035e4 <HAL_PCD_SetAddress>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f86a 	bl	80011d8 <USBD_Get_USB_Status>
 8001104:	4603      	mov	r3, r0
 8001106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001108:	7bbb      	ldrb	r3, [r7, #14]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	460b      	mov	r3, r1
 8001120:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8001130:	7af9      	ldrb	r1, [r7, #11]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	f002 fb4f 	bl	80037d8 <HAL_PCD_EP_Transmit>
 800113a:	4603      	mov	r3, r0
 800113c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f849 	bl	80011d8 <USBD_Get_USB_Status>
 8001146:	4603      	mov	r3, r0
 8001148:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800114a:	7dbb      	ldrb	r3, [r7, #22]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	460b      	mov	r3, r1
 8001162:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8001172:	7af9      	ldrb	r1, [r7, #11]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	f002 fafd 	bl	8003776 <HAL_PCD_EP_Receive>
 800117c:	4603      	mov	r3, r0
 800117e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f828 	bl	80011d8 <USBD_Get_USB_Status>
 8001188:	4603      	mov	r3, r0
 800118a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800118c:	7dbb      	ldrb	r3, [r7, #22]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80011a0:	4b03      	ldr	r3, [pc, #12]	@ (80011b0 <USBD_static_malloc+0x18>)
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000864 	.word	0x20000864

080011b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
void SystemClockConfig_Resume(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80011cc:	f7ff f860 	bl	8000290 <SystemClock_Config>
  USBD_Clock_Config();
 80011d0:	f7ff fa8c 	bl	80006ec <USBD_Clock_Config>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d817      	bhi.n	800121c <USBD_Get_USB_Status+0x44>
 80011ec:	a201      	add	r2, pc, #4	@ (adr r2, 80011f4 <USBD_Get_USB_Status+0x1c>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001205 	.word	0x08001205
 80011f8:	0800120b 	.word	0x0800120b
 80011fc:	08001211 	.word	0x08001211
 8001200:	08001217 	.word	0x08001217
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
    break;
 8001208:	e00b      	b.n	8001222 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800120a:	2303      	movs	r3, #3
 800120c:	73fb      	strb	r3, [r7, #15]
    break;
 800120e:	e008      	b.n	8001222 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
    break;
 8001214:	e005      	b.n	8001222 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8001216:	2303      	movs	r3, #3
 8001218:	73fb      	strb	r3, [r7, #15]
    break;
 800121a:	e002      	b.n	8001222 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800121c:	2303      	movs	r3, #3
 800121e:	73fb      	strb	r3, [r7, #15]
    break;
 8001220:	bf00      	nop
  }
  return usb_status;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_AHB2_GRP1_EnableClock>:
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800123c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800123e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800124c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001254:	68fb      	ldr	r3, [r7, #12]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800127e:	2002      	movs	r0, #2
 8001280:	f7ff ffd6 	bl	8001230 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a12      	ldr	r2, [pc, #72]	@ (80012d0 <BSP_LED_Init+0x6c>)
 8001288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <BSP_LED_Init+0x70>)
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 fdd9 	bl	8002e60 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <BSP_LED_Init+0x70>)
 80012b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <BSP_LED_Init+0x6c>)
 80012ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012be:	2200      	movs	r2, #0
 80012c0:	4619      	mov	r1, r3
 80012c2:	f001 ff3d 	bl	8003140 <HAL_GPIO_WritePin>
}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800a180 	.word	0x0800a180
 80012d4:	20000058 	.word	0x20000058

080012d8 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	4a07      	ldr	r2, [pc, #28]	@ (8001304 <BSP_LED_On+0x2c>)
 80012e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4a06      	ldr	r2, [pc, #24]	@ (8001308 <BSP_LED_On+0x30>)
 80012ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f2:	2201      	movs	r2, #1
 80012f4:	4619      	mov	r1, r3
 80012f6:	f001 ff23 	bl	8003140 <HAL_GPIO_WritePin>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000058 	.word	0x20000058
 8001308:	0800a180 	.word	0x0800a180

0800130c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	460a      	mov	r2, r1
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	4613      	mov	r3, r2
 800131a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d103      	bne.n	800133a <BSP_PB_Init+0x2e>
 8001332:	2004      	movs	r0, #4
 8001334:	f7ff ff7c 	bl	8001230 <LL_AHB2_GRP1_EnableClock>
 8001338:	e00c      	b.n	8001354 <BSP_PB_Init+0x48>
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d103      	bne.n	8001348 <BSP_PB_Init+0x3c>
 8001340:	2008      	movs	r0, #8
 8001342:	f7ff ff75 	bl	8001230 <LL_AHB2_GRP1_EnableClock>
 8001346:	e005      	b.n	8001354 <BSP_PB_Init+0x48>
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d102      	bne.n	8001354 <BSP_PB_Init+0x48>
 800134e:	2008      	movs	r0, #8
 8001350:	f7ff ff6e 	bl	8001230 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d117      	bne.n	800138a <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4a20      	ldr	r2, [pc, #128]	@ (80013e0 <BSP_PB_Init+0xd4>)
 800135e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001362:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001368:	2301      	movs	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2302      	movs	r3, #2
 800136e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <BSP_PB_Init+0xd8>)
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	f107 020c 	add.w	r2, r7, #12
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f001 fd6e 	bl	8002e60 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff f877 	bl	8000478 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d123      	bne.n	80013d8 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4a13      	ldr	r2, [pc, #76]	@ (80013e0 <BSP_PB_Init+0xd4>)
 8001394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001398:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800139a:	2301      	movs	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800139e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013a2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4a0f      	ldr	r2, [pc, #60]	@ (80013e4 <BSP_PB_Init+0xd8>)
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	f107 020c 	add.w	r2, r7, #12
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fd54 	bl	8002e60 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <BSP_PB_Init+0xdc>)
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	2200      	movs	r2, #0
 80013c2:	210f      	movs	r1, #15
 80013c4:	4618      	mov	r0, r3
 80013c6:	f001 faa2 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <BSP_PB_Init+0xdc>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 fab5 	bl	8002942 <HAL_NVIC_EnableIRQ>
  }
}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	0800a188 	.word	0x0800a188
 80013e4:	20000064 	.word	0x20000064
 80013e8:	0800a190 	.word	0x0800a190

080013ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <SystemInit+0x24>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x24>)
 80013f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fc:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <SystemInit+0x24>)
 80013fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001402:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_Init+0x3c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a0b      	ldr	r2, [pc, #44]	@ (8001450 <HAL_Init+0x3c>)
 8001424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001428:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142a:	2003      	movs	r0, #3
 800142c:	f001 fa64 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001430:	2000      	movs	r0, #0
 8001432:	f000 f80f 	bl	8001454 <HAL_InitTick>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	e001      	b.n	8001446 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001442:	f7ff f853 	bl	80004ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001446:	79fb      	ldrb	r3, [r7, #7]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	58004000 	.word	0x58004000

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_InitTick+0x6c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d024      	beq.n	80014b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001468:	f004 fc96 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 800146c:	4602      	mov	r2, r0
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <HAL_InitTick+0x6c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4619      	mov	r1, r3
 8001474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001478:	fbb3 f3f1 	udiv	r3, r3, r1
 800147c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f001 fa6c 	bl	800295e <HAL_SYSTICK_Config>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d10f      	bne.n	80014ac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	d809      	bhi.n	80014a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001492:	2200      	movs	r2, #0
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	f04f 30ff 	mov.w	r0, #4294967295
 800149a:	f001 fa38 	bl	800290e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800149e:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <HAL_InitTick+0x70>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e007      	b.n	80014b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	73fb      	strb	r3, [r7, #15]
 80014aa:	e004      	b.n	80014b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e001      	b.n	80014b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000078 	.word	0x20000078
 80014c4:	20000074 	.word	0x20000074

080014c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000078 	.word	0x20000078
 80014ec:	20000878 	.word	0x20000878

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000878 	.word	0x20000878

08001508 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <HAL_GetTickPrio+0x14>)
 800150e:	681b      	ldr	r3, [r3, #0]
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000074 	.word	0x20000074

08001520 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_SuspendTick+0x1c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_SuspendTick+0x1c>)
 800152a:	f023 0302 	bic.w	r3, r3, #2
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001544:	4b05      	ldr	r3, [pc, #20]	@ (800155c <HAL_ResumeTick+0x1c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_ResumeTick+0x1c>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e010 	.word	0xe000e010

08001560 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3360      	adds	r3, #96	@ 0x60
 80015da:	461a      	mov	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <LL_ADC_SetOffset+0x44>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	4313      	orrs	r3, r2
 80015f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001600:	bf00      	nop
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	03fff000 	.word	0x03fff000

08001610 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3360      	adds	r3, #96	@ 0x60
 800161e:	461a      	mov	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	3360      	adds	r3, #96	@ 0x60
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	431a      	orrs	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800168a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3330      	adds	r3, #48	@ 0x30
 80016a8:	461a      	mov	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	f003 030c 	and.w	r3, r3, #12
 80016b4:	4413      	add	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	f003 031f 	and.w	r3, r3, #31
 80016c2:	211f      	movs	r1, #31
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	401a      	ands	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	0e9b      	lsrs	r3, r3, #26
 80016d0:	f003 011f 	and.w	r1, r3, #31
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f003 031f 	and.w	r3, r3, #31
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	431a      	orrs	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80016e4:	bf00      	nop
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3314      	adds	r3, #20
 8001700:	461a      	mov	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	0e5b      	lsrs	r3, r3, #25
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	0d1b      	lsrs	r3, r3, #20
 8001718:	f003 031f 	and.w	r3, r3, #31
 800171c:	2107      	movs	r1, #7
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	401a      	ands	r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	0d1b      	lsrs	r3, r3, #20
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800173a:	bf00      	nop
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001760:	43db      	mvns	r3, r3
 8001762:	401a      	ands	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0318 	and.w	r3, r3, #24
 800176a:	4908      	ldr	r1, [pc, #32]	@ (800178c <LL_ADC_SetChannelSingleDiff+0x44>)
 800176c:	40d9      	lsrs	r1, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	400b      	ands	r3, r1
 8001772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001776:	431a      	orrs	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	0007ffff 	.word	0x0007ffff

08001790 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80017a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6093      	str	r3, [r2, #8]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017c8:	d101      	bne.n	80017ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001818:	d101      	bne.n	800181e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800183c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001840:	f043 0201 	orr.w	r2, r3, #1
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <LL_ADC_IsEnabled+0x18>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <LL_ADC_IsEnabled+0x1a>
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800188a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800188e:	f043 0204 	orr.w	r2, r3, #4
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d101      	bne.n	80018ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d101      	bne.n	80018e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e174      	b.n	8001bf8 <HAL_ADC_Init+0x308>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001918:	2b00      	cmp	r3, #0
 800191a:	d131      	bne.n	8001980 <HAL_ADC_Init+0x90>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a9a      	ldr	r2, [pc, #616]	@ (8001b88 <HAL_ADC_Init+0x298>)
 8001920:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a99      	ldr	r2, [pc, #612]	@ (8001b8c <HAL_ADC_Init+0x29c>)
 8001926:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a99      	ldr	r2, [pc, #612]	@ (8001b90 <HAL_ADC_Init+0x2a0>)
 800192c:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a98      	ldr	r2, [pc, #608]	@ (8001b94 <HAL_ADC_Init+0x2a4>)
 8001932:	671a      	str	r2, [r3, #112]	@ 0x70
#if !defined(ADC_SUPPORT_2_5_MSPS)
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a98      	ldr	r2, [pc, #608]	@ (8001b98 <HAL_ADC_Init+0x2a8>)
 8001938:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a97      	ldr	r2, [pc, #604]	@ (8001b9c <HAL_ADC_Init+0x2ac>)
 800193e:	679a      	str	r2, [r3, #120]	@ 0x78
#endif  /* !ADC_SUPPORT_2_5_MSPS */
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a97      	ldr	r2, [pc, #604]	@ (8001ba0 <HAL_ADC_Init+0x2b0>)
 8001944:	67da      	str	r2, [r3, #124]	@ 0x7c
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a96      	ldr	r2, [pc, #600]	@ (8001ba4 <HAL_ADC_Init+0x2b4>)
 800194a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a95      	ldr	r2, [pc, #596]	@ (8001ba8 <HAL_ADC_Init+0x2b8>)
 8001952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (hadc->MspInitCallback == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <HAL_ADC_Init+0x78>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a92      	ldr	r2, [pc, #584]	@ (8001bac <HAL_ADC_Init+0x2bc>)
 8001964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff15 	bl	80017b4 <LL_ADC_IsDeepPowerDownEnabled>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <HAL_ADC_Init+0xaa>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fefb 	bl	8001790 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff30 	bl	8001804 <LL_ADC_IsInternalRegulatorEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d115      	bne.n	80019d6 <HAL_ADC_Init+0xe6>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff14 	bl	80017dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b4:	4b7e      	ldr	r3, [pc, #504]	@ (8001bb0 <HAL_ADC_Init+0x2c0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	4a7e      	ldr	r2, [pc, #504]	@ (8001bb4 <HAL_ADC_Init+0x2c4>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019c8:	e002      	b.n	80019d0 <HAL_ADC_Init+0xe0>
    {
      wait_loop_index--;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f9      	bne.n	80019ca <HAL_ADC_Init+0xda>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff12 	bl	8001804 <LL_ADC_IsInternalRegulatorEnabled>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_ADC_Init+0x112>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff4b 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001a0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 80e5 	bne.w	8001be6 <HAL_ADC_Init+0x2f6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 80e1 	bne.w	8001be6 <HAL_ADC_Init+0x2f6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a2c:	f043 0202 	orr.w	r2, r3, #2
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff0b 	bl	8001854 <LL_ADC_IsEnabled>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a44:	485c      	ldr	r0, [pc, #368]	@ (8001bb8 <HAL_ADC_Init+0x2c8>)
 8001a46:	f7ff ff05 	bl	8001854 <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4859      	ldr	r0, [pc, #356]	@ (8001bbc <HAL_ADC_Init+0x2cc>)
 8001a58:	f7ff fd82 	bl	8001560 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7e5b      	ldrb	r3, [r3, #25]
 8001a60:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a66:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a6c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a72:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001a7c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d106      	bne.n	8001a9c <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	3b01      	subs	r3, #1
 8001a94:	045b      	lsls	r3, r3, #17
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	4b40      	ldr	r3, [pc, #256]	@ (8001bc0 <HAL_ADC_Init+0x2d0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fee6 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001ad6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fef3 	bl	80018c8 <LL_ADC_INJ_IsConversionOngoing>
 8001ae2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d13d      	bne.n	8001b66 <HAL_ADC_Init+0x276>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d13a      	bne.n	8001b66 <HAL_ADC_Init+0x276>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001af4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001afc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b0c:	f023 0302 	bic.w	r3, r3, #2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d118      	bne.n	8001b56 <HAL_ADC_Init+0x266>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b46:	430a      	orrs	r2, r1
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	611a      	str	r2, [r3, #16]
 8001b54:	e007      	b.n	8001b66 <HAL_ADC_Init+0x276>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d12a      	bne.n	8001bc4 <HAL_ADC_Init+0x2d4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b74:	f023 010f 	bic.w	r1, r3, #15
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b86:	e025      	b.n	8001bd4 <HAL_ADC_Init+0x2e4>
 8001b88:	080001e1 	.word	0x080001e1
 8001b8c:	08001d09 	.word	0x08001d09
 8001b90:	08001d1d 	.word	0x08001d1d
 8001b94:	08001d31 	.word	0x08001d31
 8001b98:	080026f5 	.word	0x080026f5
 8001b9c:	08002709 	.word	0x08002709
 8001ba0:	0800271d 	.word	0x0800271d
 8001ba4:	08002731 	.word	0x08002731
 8001ba8:	08002745 	.word	0x08002745
 8001bac:	080004fd 	.word	0x080004fd
 8001bb0:	20000070 	.word	0x20000070
 8001bb4:	053e2d63 	.word	0x053e2d63
 8001bb8:	50040000 	.word	0x50040000
 8001bbc:	50040300 	.word	0x50040300
 8001bc0:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 020f 	bic.w	r2, r2, #15
 8001bd2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd8:	f023 0303 	bic.w	r3, r3, #3
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_Init+0x306>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe46 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d167      	bne.n	8001cec <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x2a>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e063      	b.n	8001cf2 <HAL_ADC_Start_DMA+0xf2>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 fc4c 	bl	80024d0 <ADC_Enable>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d14f      	bne.n	8001ce2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	f023 0206 	bic.w	r2, r3, #6
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c6e:	e002      	b.n	8001c76 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	4a20      	ldr	r2, [pc, #128]	@ (8001cfc <HAL_ADC_Start_DMA+0xfc>)
 8001c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	4a1f      	ldr	r2, [pc, #124]	@ (8001d00 <HAL_ADC_Start_DMA+0x100>)
 8001c84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <HAL_ADC_Start_DMA+0x104>)
 8001c8c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	221c      	movs	r2, #28
 8001c94:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0210 	orr.w	r2, r2, #16
 8001cac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3340      	adds	r3, #64	@ 0x40
 8001cc8:	4619      	mov	r1, r3
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f000 fefb 	bl	8002ac8 <HAL_DMA_Start_IT>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fdcd 	bl	800187a <LL_ADC_REG_StartConversion>
 8001ce0:	e006      	b.n	8001cf0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001cea:	e001      	b.n	8001cf0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
 8001cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	080025c5 	.word	0x080025c5
 8001d00:	080026a1 	.word	0x080026a1
 8001d04:	080026bf 	.word	0x080026bf

08001d08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0b6      	sub	sp, #216	@ 0xd8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x22>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e39f      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x762>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fd95 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 8384 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f7ff fc83 	bl	8001698 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fd83 	bl	80018a2 <LL_ADC_REG_IsConversionOngoing>
 8001d9c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fd8f 	bl	80018c8 <LL_ADC_INJ_IsConversionOngoing>
 8001daa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 81a6 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001db8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 81a1 	bne.w	8002104 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6819      	ldr	r1, [r3, #0]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f7ff fc8e 	bl	80016f0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d00a      	beq.n	8001e0c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e06:	f7ff fbdf 	bl	80015c8 <LL_ADC_SetOffset>
 8001e0a:	e17b      	b.n	8002104 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fbfc 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10a      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0xf4>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fbf1 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	0e9b      	lsrs	r3, r3, #26
 8001e32:	f003 021f 	and.w	r2, r3, #31
 8001e36:	e01e      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x132>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fbe6 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e004      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x14a>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0e9b      	lsrs	r3, r3, #26
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	e018      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x17c>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e9a:	fa93 f3a3 	rbit	r3, r3
 8001e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001eaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	e004      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fbb5 	bl	800163c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fb99 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x1ba>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fb8e 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	e01e      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x1f8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2101      	movs	r1, #1
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fb83 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001f1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001f20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	e004      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x210>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	e018      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x242>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e004      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d106      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fb52 	bl	800163c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fb36 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x280>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fb2b 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	f003 021f 	and.w	r2, r3, #31
 8001fc2:	e01e      	b.n	8002002 <HAL_ADC_ConfigChannel+0x2be>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fb20 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e004      	b.n	8002000 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001ff6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_ADC_ConfigChannel+0x2d6>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	e016      	b.n	8002048 <HAL_ADC_ConfigChannel+0x304>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800202c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800202e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002032:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e004      	b.n	8002048 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800203e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	2102      	movs	r1, #2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff faf1 	bl	800163c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2103      	movs	r1, #3
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fad5 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10a      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x342>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2103      	movs	r1, #3
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff faca 	bl	8001610 <LL_ADC_GetOffsetChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	0e9b      	lsrs	r3, r3, #26
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	e017      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x372>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2103      	movs	r1, #3
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fabf 	bl	8001610 <LL_ADC_GetOffsetChannel>
 8002092:	4603      	mov	r3, r0
 8002094:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800209e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80020a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80020ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x38a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	e011      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x3ae>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80020dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80020e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e003      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80020ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d106      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	2103      	movs	r1, #3
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fa9c 	bl	800163c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fba3 	bl	8001854 <LL_ADC_IsEnabled>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 81c2 	bne.w	800249a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	461a      	mov	r2, r3
 8002124:	f7ff fb10 	bl	8001748 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a8e      	ldr	r2, [pc, #568]	@ (8002368 <HAL_ADC_ConfigChannel+0x624>)
 800212e:	4293      	cmp	r3, r2
 8002130:	f040 8130 	bne.w	8002394 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <HAL_ADC_ConfigChannel+0x418>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2b09      	cmp	r3, #9
 8002152:	bf94      	ite	ls
 8002154:	2301      	movls	r3, #1
 8002156:	2300      	movhi	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e019      	b.n	8002190 <HAL_ADC_ConfigChannel+0x44c>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800216a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800216c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800216e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e003      	b.n	8002180 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002178:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	2b09      	cmp	r3, #9
 8002188:	bf94      	ite	ls
 800218a:	2301      	movls	r3, #1
 800218c:	2300      	movhi	r3, #0
 800218e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002190:	2b00      	cmp	r3, #0
 8002192:	d079      	beq.n	8002288 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x46c>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0e9b      	lsrs	r3, r3, #26
 80021a6:	3301      	adds	r3, #1
 80021a8:	069b      	lsls	r3, r3, #26
 80021aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ae:	e015      	b.n	80021dc <HAL_ADC_ConfigChannel+0x498>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80021be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80021c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e003      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80021cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021ce:	fab3 f383 	clz	r3, r3
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	069b      	lsls	r3, r3, #26
 80021d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x4b8>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	3301      	adds	r3, #1
 80021f0:	f003 031f 	and.w	r3, r3, #31
 80021f4:	2101      	movs	r1, #1
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	e017      	b.n	800222c <HAL_ADC_ConfigChannel+0x4e8>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800220a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800220c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800220e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e003      	b.n	8002220 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	ea42 0103 	orr.w	r1, r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x50e>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	3301      	adds	r3, #1
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	051b      	lsls	r3, r3, #20
 8002250:	e018      	b.n	8002284 <HAL_ADC_ConfigChannel+0x540>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800226a:	2320      	movs	r3, #32
 800226c:	e003      	b.n	8002276 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800226e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4613      	mov	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4413      	add	r3, r2
 8002282:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002284:	430b      	orrs	r3, r1
 8002286:	e080      	b.n	800238a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x560>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	3301      	adds	r3, #1
 800229c:	069b      	lsls	r3, r3, #26
 800229e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022a2:	e015      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x58c>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80022b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80022b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	069b      	lsls	r3, r3, #26
 80022cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x5ac>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	3301      	adds	r3, #1
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	e017      	b.n	8002320 <HAL_ADC_ConfigChannel+0x5dc>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	fa93 f3a3 	rbit	r3, r3
 80022fc:	61fb      	str	r3, [r7, #28]
  return result;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002308:	2320      	movs	r3, #32
 800230a:	e003      	b.n	8002314 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f303 	lsl.w	r3, r1, r3
 8002320:	ea42 0103 	orr.w	r1, r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10d      	bne.n	800234c <HAL_ADC_ConfigChannel+0x608>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	3b1e      	subs	r3, #30
 8002344:	051b      	lsls	r3, r3, #20
 8002346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800234a:	e01d      	b.n	8002388 <HAL_ADC_ConfigChannel+0x644>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	613b      	str	r3, [r7, #16]
  return result;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d103      	bne.n	800236c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e005      	b.n	8002374 <HAL_ADC_ConfigChannel+0x630>
 8002368:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f003 021f 	and.w	r2, r3, #31
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	3b1e      	subs	r3, #30
 8002382:	051b      	lsls	r3, r3, #20
 8002384:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002388:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238e:	4619      	mov	r1, r3
 8002390:	f7ff f9ae 	bl	80016f0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b45      	ldr	r3, [pc, #276]	@ (80024b0 <HAL_ADC_ConfigChannel+0x76c>)
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d07c      	beq.n	800249a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a0:	4844      	ldr	r0, [pc, #272]	@ (80024b4 <HAL_ADC_ConfigChannel+0x770>)
 80023a2:	f7ff f903 	bl	80015ac <LL_ADC_GetCommonPathInternalCh>
 80023a6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023aa:	4843      	ldr	r0, [pc, #268]	@ (80024b8 <HAL_ADC_ConfigChannel+0x774>)
 80023ac:	f7ff fa52 	bl	8001854 <LL_ADC_IsEnabled>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d15e      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a40      	ldr	r2, [pc, #256]	@ (80024bc <HAL_ADC_ConfigChannel+0x778>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d127      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x6cc>
 80023c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d121      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a39      	ldr	r2, [pc, #228]	@ (80024b8 <HAL_ADC_ConfigChannel+0x774>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d161      	bne.n	800249a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80023d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023de:	4619      	mov	r1, r3
 80023e0:	4834      	ldr	r0, [pc, #208]	@ (80024b4 <HAL_ADC_ConfigChannel+0x770>)
 80023e2:	f7ff f8d0 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e6:	4b36      	ldr	r3, [pc, #216]	@ (80024c0 <HAL_ADC_ConfigChannel+0x77c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	099b      	lsrs	r3, r3, #6
 80023ec:	4a35      	ldr	r2, [pc, #212]	@ (80024c4 <HAL_ADC_ConfigChannel+0x780>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002400:	e002      	b.n	8002408 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3b01      	subs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f9      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800240e:	e044      	b.n	800249a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2c      	ldr	r2, [pc, #176]	@ (80024c8 <HAL_ADC_ConfigChannel+0x784>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d113      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x6fe>
 800241a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800241e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a23      	ldr	r2, [pc, #140]	@ (80024b8 <HAL_ADC_ConfigChannel+0x774>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d134      	bne.n	800249a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002434:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002438:	4619      	mov	r1, r3
 800243a:	481e      	ldr	r0, [pc, #120]	@ (80024b4 <HAL_ADC_ConfigChannel+0x770>)
 800243c:	f7ff f8a3 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002440:	e02b      	b.n	800249a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a21      	ldr	r2, [pc, #132]	@ (80024cc <HAL_ADC_ConfigChannel+0x788>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d126      	bne.n	800249a <HAL_ADC_ConfigChannel+0x756>
 800244c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002450:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d120      	bne.n	800249a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a16      	ldr	r2, [pc, #88]	@ (80024b8 <HAL_ADC_ConfigChannel+0x774>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d11b      	bne.n	800249a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002466:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800246a:	4619      	mov	r1, r3
 800246c:	4811      	ldr	r0, [pc, #68]	@ (80024b4 <HAL_ADC_ConfigChannel+0x770>)
 800246e:	f7ff f88a 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
 8002472:	e012      	b.n	800249a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002478:	f043 0220 	orr.w	r2, r3, #32
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002486:	e008      	b.n	800249a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80024a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	37d8      	adds	r7, #216	@ 0xd8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	80080000 	.word	0x80080000
 80024b4:	50040300 	.word	0x50040300
 80024b8:	50040000 	.word	0x50040000
 80024bc:	c7520000 	.word	0xc7520000
 80024c0:	20000070 	.word	0x20000070
 80024c4:	053e2d63 	.word	0x053e2d63
 80024c8:	cb840000 	.word	0xcb840000
 80024cc:	80000001 	.word	0x80000001

080024d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024d8:	2300      	movs	r3, #0
 80024da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff f9b7 	bl	8001854 <LL_ADC_IsEnabled>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d15e      	bne.n	80025aa <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	4b30      	ldr	r3, [pc, #192]	@ (80025b4 <ADC_Enable+0xe4>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f043 0201 	orr.w	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e04a      	b.n	80025ac <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f986 	bl	800182c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002520:	4825      	ldr	r0, [pc, #148]	@ (80025b8 <ADC_Enable+0xe8>)
 8002522:	f7ff f843 	bl	80015ac <LL_ADC_GetCommonPathInternalCh>
 8002526:	4603      	mov	r3, r0
 8002528:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00f      	beq.n	8002550 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002530:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <ADC_Enable+0xec>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <ADC_Enable+0xf0>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	3301      	adds	r3, #1
 8002540:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002542:	e002      	b.n	800254a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3b01      	subs	r3, #1
 8002548:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f9      	bne.n	8002544 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002550:	f7fe ffce 	bl	80014f0 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002556:	e021      	b.n	800259c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f979 	bl	8001854 <LL_ADC_IsEnabled>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff f95d 	bl	800182c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002572:	f7fe ffbd 	bl	80014f0 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d90d      	bls.n	800259c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e007      	b.n	80025ac <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d1d6      	bne.n	8002558 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	8000003f 	.word	0x8000003f
 80025b8:	50040300 	.word	0x50040300
 80025bc:	20000070 	.word	0x20000070
 80025c0:	053e2d63 	.word	0x053e2d63

080025c4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d14c      	bne.n	8002678 <ADC_DMAConvCplt+0xb4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d021      	beq.n	800263c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff f838 	bl	8001672 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d032      	beq.n	800266e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d12b      	bne.n	800266e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d11f      	bne.n	800266e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
 800263a:	e018      	b.n	800266e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d111      	bne.n	800266e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002676:	e00f      	b.n	8002698 <ADC_DMAConvCplt+0xd4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <ADC_DMAConvCplt+0xca>
      hadc->ErrorCallback(hadc);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	4798      	blx	r3
}
 800268c:	e004      	b.n	8002698 <ADC_DMAConvCplt+0xd4>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002692:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
}
 8002698:	bf00      	nop
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	f043 0204 	orr.w	r2, r3, #4
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278a:	4a04      	ldr	r2, [pc, #16]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000ed00 	.word	0xe000ed00

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	@ (80027f4 <__NVIC_EnableIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff29 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800291c:	f7ff ff40 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 8002920:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	6978      	ldr	r0, [r7, #20]
 8002928:	f7ff ff90 	bl	800284c <NVIC_EncodePriority>
 800292c:	4602      	mov	r2, r0
 800292e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff5f 	bl	80027f8 <__NVIC_SetPriority>
}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff33 	bl	80027bc <__NVIC_EnableIRQ>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ffa4 	bl	80028b4 <SysTick_Config>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e08e      	b.n	8002aa8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <HAL_DMA_Init+0x138>)
 8002992:	429a      	cmp	r2, r3
 8002994:	d80f      	bhi.n	80029b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	4b45      	ldr	r3, [pc, #276]	@ (8002ab4 <HAL_DMA_Init+0x13c>)
 800299e:	4413      	add	r3, r2
 80029a0:	4a45      	ldr	r2, [pc, #276]	@ (8002ab8 <HAL_DMA_Init+0x140>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	009a      	lsls	r2, r3, #2
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a42      	ldr	r2, [pc, #264]	@ (8002abc <HAL_DMA_Init+0x144>)
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80029b4:	e00e      	b.n	80029d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	4b40      	ldr	r3, [pc, #256]	@ (8002ac0 <HAL_DMA_Init+0x148>)
 80029be:	4413      	add	r3, r2
 80029c0:	4a3d      	ldr	r2, [pc, #244]	@ (8002ab8 <HAL_DMA_Init+0x140>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	009a      	lsls	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a3c      	ldr	r2, [pc, #240]	@ (8002ac4 <HAL_DMA_Init+0x14c>)
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80029ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9b6 	bl	8002d98 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a34:	d102      	bne.n	8002a3c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a44:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002a48:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a52:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d010      	beq.n	8002a7e <HAL_DMA_Init+0x106>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d80c      	bhi.n	8002a7e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 f9d5 	bl	8002e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	e008      	b.n	8002a90 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40020407 	.word	0x40020407
 8002ab4:	bffdfff8 	.word	0xbffdfff8
 8002ab8:	cccccccd 	.word	0xcccccccd
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	bffdfbf8 	.word	0xbffdfbf8
 8002ac4:	40020400 	.word	0x40020400

08002ac8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DMA_Start_IT+0x20>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e066      	b.n	8002bb6 <HAL_DMA_Start_IT+0xee>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d155      	bne.n	8002ba8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f8fb 	bl	8002d1c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 020e 	orr.w	r2, r2, #14
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e00f      	b.n	8002b60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0204 	bic.w	r2, r2, #4
 8002b4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 020a 	orr.w	r2, r2, #10
 8002b5e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b7c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b94:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e005      	b.n	8002bb4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	f003 031c 	and.w	r3, r3, #28
 8002bde:	2204      	movs	r2, #4
 8002be0:	409a      	lsls	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4013      	ands	r3, r2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d026      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x7a>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d021      	beq.n	8002c38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d107      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0204 	bic.w	r2, r2, #4
 8002c10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f003 021c 	and.w	r2, r3, #28
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	2104      	movs	r1, #4
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d071      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c36:	e06c      	b.n	8002d12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3c:	f003 031c 	and.w	r3, r3, #28
 8002c40:	2202      	movs	r2, #2
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02e      	beq.n	8002caa <HAL_DMA_IRQHandler+0xec>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d029      	beq.n	8002caa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 020a 	bic.w	r2, r2, #10
 8002c72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	f003 021c 	and.w	r2, r3, #28
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	2102      	movs	r1, #2
 8002c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d038      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ca8:	e033      	b.n	8002d12 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f003 031c 	and.w	r3, r3, #28
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d02a      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x156>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d025      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020e 	bic.w	r2, r2, #14
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	f003 021c 	and.w	r2, r3, #28
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
}
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d32:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d44:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f003 021c 	and.w	r2, r3, #28
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f202 	lsl.w	r2, r1, r2
 8002d58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d108      	bne.n	8002d7c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d7a:	e007      	b.n	8002d8c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d80a      	bhi.n	8002dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002db8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6493      	str	r3, [r2, #72]	@ 0x48
 8002dc0:	e007      	b.n	8002dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	009a      	lsls	r2, r3, #2
 8002dca:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002dcc:	4413      	add	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3b08      	subs	r3, #8
 8002dda:	4a0c      	ldr	r2, [pc, #48]	@ (8002e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002de8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2201      	movs	r2, #1
 8002df2:	409a      	lsls	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40020407 	.word	0x40020407
 8002e08:	4002081c 	.word	0x4002081c
 8002e0c:	cccccccd 	.word	0xcccccccd
 8002e10:	40020880 	.word	0x40020880

08002e14 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e24:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a09      	ldr	r2, [pc, #36]	@ (8002e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002e38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2201      	movs	r2, #1
 8002e44:	409a      	lsls	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	1000823f 	.word	0x1000823f
 8002e5c:	40020940 	.word	0x40020940

08002e60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6e:	e14c      	b.n	800310a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 813e 	beq.w	8003104 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d005      	beq.n	8002ea0 <HAL_GPIO_Init+0x40>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d130      	bne.n	8002f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 0201 	and.w	r2, r3, #1
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d017      	beq.n	8002f3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d123      	bne.n	8002f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	08da      	lsrs	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3208      	adds	r2, #8
 8002f8c:	6939      	ldr	r1, [r7, #16]
 8002f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8098 	beq.w	8003104 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002fd4:	4a54      	ldr	r2, [pc, #336]	@ (8003128 <HAL_GPIO_Init+0x2c8>)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	3302      	adds	r3, #2
 8002fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ffe:	d019      	beq.n	8003034 <HAL_GPIO_Init+0x1d4>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a4a      	ldr	r2, [pc, #296]	@ (800312c <HAL_GPIO_Init+0x2cc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <HAL_GPIO_Init+0x1d0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a49      	ldr	r2, [pc, #292]	@ (8003130 <HAL_GPIO_Init+0x2d0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00d      	beq.n	800302c <HAL_GPIO_Init+0x1cc>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a48      	ldr	r2, [pc, #288]	@ (8003134 <HAL_GPIO_Init+0x2d4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <HAL_GPIO_Init+0x1c8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a47      	ldr	r2, [pc, #284]	@ (8003138 <HAL_GPIO_Init+0x2d8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_GPIO_Init+0x1c4>
 8003020:	2304      	movs	r3, #4
 8003022:	e008      	b.n	8003036 <HAL_GPIO_Init+0x1d6>
 8003024:	2307      	movs	r3, #7
 8003026:	e006      	b.n	8003036 <HAL_GPIO_Init+0x1d6>
 8003028:	2303      	movs	r3, #3
 800302a:	e004      	b.n	8003036 <HAL_GPIO_Init+0x1d6>
 800302c:	2302      	movs	r3, #2
 800302e:	e002      	b.n	8003036 <HAL_GPIO_Init+0x1d6>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_GPIO_Init+0x1d6>
 8003034:	2300      	movs	r3, #0
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	f002 0203 	and.w	r2, r2, #3
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	4093      	lsls	r3, r2
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003046:	4938      	ldr	r1, [pc, #224]	@ (8003128 <HAL_GPIO_Init+0x2c8>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003054:	4b39      	ldr	r3, [pc, #228]	@ (800313c <HAL_GPIO_Init+0x2dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	43db      	mvns	r3, r3
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4013      	ands	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4313      	orrs	r3, r2
 8003076:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003078:	4a30      	ldr	r2, [pc, #192]	@ (800313c <HAL_GPIO_Init+0x2dc>)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800307e:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <HAL_GPIO_Init+0x2dc>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43db      	mvns	r3, r3
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4013      	ands	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030a2:	4a26      	ldr	r2, [pc, #152]	@ (800313c <HAL_GPIO_Init+0x2dc>)
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030a8:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_GPIO_Init+0x2dc>)
 80030aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030ce:	4a1b      	ldr	r2, [pc, #108]	@ (800313c <HAL_GPIO_Init+0x2dc>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80030d6:	4b19      	ldr	r3, [pc, #100]	@ (800313c <HAL_GPIO_Init+0x2dc>)
 80030d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4013      	ands	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030fc:	4a0f      	ldr	r2, [pc, #60]	@ (800313c <HAL_GPIO_Init+0x2dc>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3301      	adds	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	f47f aeab 	bne.w	8002e70 <HAL_GPIO_Init+0x10>
  }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40010000 	.word	0x40010000
 800312c:	48000400 	.word	0x48000400
 8003130:	48000800 	.word	0x48000800
 8003134:	48000c00 	.word	0x48000c00
 8003138:	48001000 	.word	0x48001000
 800313c:	58000800 	.word	0x58000800

08003140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
 800314c:	4613      	mov	r3, r2
 800314e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003150:	787b      	ldrb	r3, [r7, #1]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003156:	887a      	ldrh	r2, [r7, #2]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800315c:	e002      	b.n	8003164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800317a:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003186:	4a05      	ldr	r2, [pc, #20]	@ (800319c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f806 	bl	80031a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	58000800 	.word	0x58000800

080031a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0c0      	b.n	800334a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d106      	bne.n	80031e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd fd71 	bl	8000cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 ff25 	bl	800603e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e03e      	b.n	8003278 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	3311      	adds	r3, #17
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	440b      	add	r3, r1
 800321c:	3310      	adds	r3, #16
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003222:	7bfa      	ldrb	r2, [r7, #15]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	3313      	adds	r3, #19
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	3320      	adds	r3, #32
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800324a:	7bfa      	ldrb	r2, [r7, #15]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	3324      	adds	r3, #36	@ 0x24
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	1c5a      	adds	r2, r3, #1
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	3301      	adds	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	791b      	ldrb	r3, [r3, #4]
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	429a      	cmp	r2, r3
 8003280:	d3bb      	bcc.n	80031fa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
 8003286:	e044      	b.n	8003312 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	440b      	add	r3, r1
 8003296:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	440b      	add	r3, r1
 8003304:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	3301      	adds	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	791b      	ldrb	r3, [r3, #4]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	429a      	cmp	r2, r3
 800331a:	d3b5      	bcc.n	8003288 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003328:	f002 fea4 	bl	8006074 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7a9b      	ldrb	r3, [r3, #10]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f001 fc44 	bl	8004bd0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_PCD_Start+0x16>
 8003364:	2302      	movs	r3, #2
 8003366:	e012      	b.n	800338e <HAL_PCD_Start+0x3c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f002 fe4b 	bl	8006010 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f005 f90b 	bl	800859a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f005 f910 	bl	80085c8 <USB_ReadInterrupts>
 80033a8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fb08 	bl	80039ca <PCD_EP_ISR_Handler>

    return;
 80033ba:	e110      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d013      	beq.n	80033ee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033d8:	b292      	uxth	r2, r2
 80033da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd fcfd 	bl	8000dde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033e4:	2100      	movs	r1, #0
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8fc 	bl	80035e4 <HAL_PCD_SetAddress>

    return;
 80033ec:	e0f7      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00c      	beq.n	8003412 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003400:	b29a      	uxth	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800340a:	b292      	uxth	r2, r2
 800340c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003410:	e0e5      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800342e:	b292      	uxth	r2, r2
 8003430:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003434:	e0d3      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d034      	beq.n	80034aa <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003448:	b29a      	uxth	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 0204 	bic.w	r2, r2, #4
 8003452:	b292      	uxth	r2, r2
 8003454:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0208 	bic.w	r2, r2, #8
 800346a:	b292      	uxth	r2, r2
 800346c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003482:	2100      	movs	r1, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f001 fbcd 	bl	8004c24 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fcea 	bl	8000e64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034a2:	b292      	uxth	r2, r2
 80034a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80034a8:	e099      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d027      	beq.n	8003504 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034bc:	b29a      	uxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0208 	orr.w	r2, r2, #8
 80034c6:	b292      	uxth	r2, r2
 80034c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034de:	b292      	uxth	r2, r2
 80034e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0204 	orr.w	r2, r2, #4
 80034f6:	b292      	uxth	r2, r2
 80034f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7fd fc8d 	bl	8000e1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003502:	e06c      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d040      	beq.n	8003590 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003520:	b292      	uxth	r2, r2
 8003522:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d12b      	bne.n	8003588 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0204 	orr.w	r2, r2, #4
 8003542:	b292      	uxth	r2, r2
 8003544:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003550:	b29a      	uxth	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0208 	orr.w	r2, r2, #8
 800355a:	b292      	uxth	r2, r2
 800355c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003570:	b29b      	uxth	r3, r3
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800357e:	2101      	movs	r1, #1
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f001 fb4f 	bl	8004c24 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003586:	e02a      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fd fc47 	bl	8000e1c <HAL_PCD_SuspendCallback>
    return;
 800358e:	e026      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00f      	beq.n	80035ba <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fc05 	bl	8000dc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80035b8:	e011      	b.n	80035de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d6:	b292      	uxth	r2, r2
 80035d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80035dc:	bf00      	nop
  }
}
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_PCD_SetAddress+0x1a>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e012      	b.n	8003624 <HAL_PCD_SetAddress+0x40>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f004 ffac 	bl	8008572 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	70fb      	strb	r3, [r7, #3]
 800363e:	460b      	mov	r3, r1
 8003640:	803b      	strh	r3, [r7, #0]
 8003642:	4613      	mov	r3, r2
 8003644:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800364a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364e:	2b00      	cmp	r3, #0
 8003650:	da0e      	bge.n	8003670 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	f003 0207 	and.w	r2, r3, #7
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	3310      	adds	r3, #16
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	705a      	strb	r2, [r3, #1]
 800366e:	e00e      	b.n	800368e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 0207 	and.w	r2, r3, #7
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4413      	add	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800369a:	883a      	ldrh	r2, [r7, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	78ba      	ldrb	r2, [r7, #2]
 80036a4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036a6:	78bb      	ldrb	r3, [r7, #2]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d102      	bne.n	80036b2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_PCD_EP_Open+0x94>
 80036bc:	2302      	movs	r3, #2
 80036be:	e00e      	b.n	80036de <HAL_PCD_EP_Open+0xb2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68f9      	ldr	r1, [r7, #12]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f002 fcee 	bl	80060b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80036dc:	7afb      	ldrb	r3, [r7, #11]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	da0e      	bge.n	8003718 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	f003 0207 	and.w	r2, r3, #7
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	3310      	adds	r3, #16
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	705a      	strb	r2, [r3, #1]
 8003716:	e00e      	b.n	8003736 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	f003 0207 	and.w	r2, r3, #7
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_PCD_EP_Close+0x6a>
 800374c:	2302      	movs	r3, #2
 800374e:	e00e      	b.n	800376e <HAL_PCD_EP_Close+0x88>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68f9      	ldr	r1, [r7, #12]
 800375e:	4618      	mov	r0, r3
 8003760:	f003 f86a 	bl	8006838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	460b      	mov	r3, r1
 8003784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003786:	7afb      	ldrb	r3, [r7, #11]
 8003788:	f003 0207 	and.w	r2, r3, #7
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2200      	movs	r2, #0
 80037ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2200      	movs	r2, #0
 80037b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b6:	7afb      	ldrb	r3, [r7, #11]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6979      	ldr	r1, [r7, #20]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fa22 	bl	8006c12 <USB_EPStartXfer>

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	460b      	mov	r3, r1
 80037e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	f003 0207 	and.w	r2, r3, #7
 80037ee:	4613      	mov	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	3310      	adds	r3, #16
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2201      	movs	r2, #1
 8003822:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003824:	7afb      	ldrb	r3, [r7, #11]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	b2da      	uxtb	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6979      	ldr	r1, [r7, #20]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 f9eb 	bl	8006c12 <USB_EPStartXfer>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	7912      	ldrb	r2, [r2, #4]
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e03e      	b.n	80038e2 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003868:	2b00      	cmp	r3, #0
 800386a:	da0e      	bge.n	800388a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	f003 0207 	and.w	r2, r3, #7
 8003872:	4613      	mov	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	3310      	adds	r3, #16
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	705a      	strb	r2, [r3, #1]
 8003888:	e00c      	b.n	80038a4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4413      	add	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_EP_SetStall+0x7e>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e00e      	b.n	80038e2 <HAL_PCD_EP_SetStall+0x9c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68f9      	ldr	r1, [r7, #12]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 fd4e 	bl	8008374 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	7912      	ldrb	r2, [r2, #4]
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e040      	b.n	800398a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da0e      	bge.n	800392e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 0207 	and.w	r2, r3, #7
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	3310      	adds	r3, #16
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	705a      	strb	r2, [r3, #1]
 800392c:	e00e      	b.n	800394c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	f003 0207 	and.w	r2, r3, #7
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	b2da      	uxtb	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_PCD_EP_ClrStall+0x82>
 8003968:	2302      	movs	r3, #2
 800396a:	e00e      	b.n	800398a <HAL_PCD_EP_ClrStall+0xa0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68f9      	ldr	r1, [r7, #12]
 800397a:	4618      	mov	r0, r3
 800397c:	f004 fd4b 	bl	8008416 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_PCD_ActivateRemoteWakeup>:
  * @brief  Activate remote wakeup signalling
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_ActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  return (USB_ActivateRemoteWakeup(hpcd->Instance));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 fe22 	bl	80085e8 <USB_ActivateRemoteWakeup>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_PCD_DeActivateRemoteWakeup>:
  * @brief  De-activate remote wakeup signalling.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeActivateRemoteWakeup(PCD_HandleTypeDef *hpcd)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  return (USB_DeActivateRemoteWakeup(hpcd->Instance));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 fe29 	bl	8008612 <USB_DeActivateRemoteWakeup>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b096      	sub	sp, #88	@ 0x58
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039d2:	e3ad      	b.n	8004130 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039dc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80039e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80039ee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 816f 	bne.w	8003cd6 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80039f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d14c      	bne.n	8003a9e <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a14:	81fb      	strh	r3, [r7, #14]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	89fb      	ldrh	r3, [r7, #14]
 8003a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3310      	adds	r3, #16
 8003a2c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	461a      	mov	r2, r3
 8003a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a54:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	441a      	add	r2, r3
 8003a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a62:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a64:	2100      	movs	r1, #0
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd f991 	bl	8000d8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7b1b      	ldrb	r3, [r3, #12]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 835c 	beq.w	8004130 <PCD_EP_ISR_Handler+0x766>
 8003a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f040 8357 	bne.w	8004130 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7b1b      	ldrb	r3, [r3, #12]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	731a      	strb	r2, [r3, #12]
 8003a9c:	e348      	b.n	8004130 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003aa4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003ab0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d032      	beq.n	8003b22 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6818      	ldr	r0, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f004 fde2 	bl	80086c0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b08:	4013      	ands	r3, r2
 8003b0a:	823b      	strh	r3, [r7, #16]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	8a3a      	ldrh	r2, [r7, #16]
 8003b12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b16:	b292      	uxth	r2, r2
 8003b18:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd f90a 	bl	8000d34 <HAL_PCD_SetupStageCallback>
 8003b20:	e306      	b.n	8004130 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003b22:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f280 8302 	bge.w	8004130 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b38:	4013      	ands	r3, r2
 8003b3a:	83fb      	strh	r3, [r7, #30]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	8bfa      	ldrh	r2, [r7, #30]
 8003b42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b46:	b292      	uxth	r2, r2
 8003b48:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b70:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <PCD_EP_ISR_Handler+0x1e4>
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d015      	beq.n	8003bae <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b88:	6959      	ldr	r1, [r3, #20]
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b90:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f004 fd94 	bl	80086c0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	441a      	add	r2, r3
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fd f8d5 	bl	8000d58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003bb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 82b5 	bne.w	8004130 <PCD_EP_ISR_Handler+0x766>
 8003bc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003bce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bd2:	f000 82ad 	beq.w	8004130 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	4413      	add	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	801a      	strh	r2, [r3, #0]
 8003c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c0c:	d91d      	bls.n	8003c4a <PCD_EP_ISR_Handler+0x280>
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <PCD_EP_ISR_Handler+0x25e>
 8003c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c24:	3b01      	subs	r3, #1
 8003c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	4313      	orrs	r3, r2
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	801a      	strh	r2, [r3, #0]
 8003c48:	e026      	b.n	8003c98 <PCD_EP_ISR_Handler+0x2ce>
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <PCD_EP_ISR_Handler+0x29e>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	e017      	b.n	8003c98 <PCD_EP_ISR_Handler+0x2ce>
 8003c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	085b      	lsrs	r3, r3, #1
 8003c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <PCD_EP_ISR_Handler+0x2b8>
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7e:	3301      	adds	r3, #1
 8003c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	029b      	lsls	r3, r3, #10
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	4313      	orrs	r3, r2
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca8:	827b      	strh	r3, [r7, #18]
 8003caa:	8a7b      	ldrh	r3, [r7, #18]
 8003cac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003cb0:	827b      	strh	r3, [r7, #18]
 8003cb2:	8a7b      	ldrh	r3, [r7, #18]
 8003cb4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003cb8:	827b      	strh	r3, [r7, #18]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	8a7b      	ldrh	r3, [r7, #18]
 8003cc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ccc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	8013      	strh	r3, [r2, #0]
 8003cd4:	e22c      	b.n	8004130 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f280 80f6 	bge.w	8003ee0 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003d22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d26:	b292      	uxth	r2, r2
 8003d28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d2a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d42:	7b1b      	ldrb	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d123      	bne.n	8003d90 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4413      	add	r3, r2
 8003d62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d6c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003d70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 808e 	beq.w	8003e96 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d80:	6959      	ldr	r1, [r3, #20]
 8003d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d84:	88da      	ldrh	r2, [r3, #6]
 8003d86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003d8a:	f004 fc99 	bl	80086c0 <USB_ReadPMA>
 8003d8e:	e082      	b.n	8003e96 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d92:	78db      	ldrb	r3, [r3, #3]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d10a      	bne.n	8003dae <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003d98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f9d3 	bl	800414c <HAL_PCD_EP_DB_Receive>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003dac:	e073      	b.n	8003e96 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d022      	beq.n	8003e52 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	4413      	add	r3, r2
 8003e26:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e30:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003e34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02c      	beq.n	8003e96 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e42:	6959      	ldr	r1, [r3, #20]
 8003e44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e46:	891a      	ldrh	r2, [r3, #8]
 8003e48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e4c:	f004 fc38 	bl	80086c0 <USB_ReadPMA>
 8003e50:	e021      	b.n	8003e96 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e76:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003e7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6818      	ldr	r0, [r3, #0]
 8003e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e88:	6959      	ldr	r1, [r3, #20]
 8003e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8c:	895a      	ldrh	r2, [r3, #10]
 8003e8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e92:	f004 fc15 	bl	80086c0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e9e:	441a      	add	r2, r3
 8003ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003eac:	441a      	add	r2, r3
 8003eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d005      	beq.n	8003ec6 <PCD_EP_ISR_Handler+0x4fc>
 8003eba:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d206      	bcs.n	8003ed4 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fc ff43 	bl	8000d58 <HAL_PCD_DataOutStageCallback>
 8003ed2:	e005      	b.n	8003ee0 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eda:	4618      	mov	r0, r3
 8003edc:	f002 fe99 	bl	8006c12 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003ee0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8121 	beq.w	8004130 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8003eee:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	3310      	adds	r3, #16
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	441a      	add	r2, r3
 8003f2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f40:	78db      	ldrb	r3, [r3, #3]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f040 80a2 	bne.w	800408c <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8003f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f50:	7b1b      	ldrb	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8093 	beq.w	800407e <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d046      	beq.n	8003ff2 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f66:	785b      	ldrb	r3, [r3, #1]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d126      	bne.n	8003fba <PCD_EP_ISR_Handler+0x5f0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	4413      	add	r3, r2
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	00da      	lsls	r2, r3, #3
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	801a      	strh	r2, [r3, #0]
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	e061      	b.n	800407e <PCD_EP_ISR_Handler+0x6b4>
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d15d      	bne.n	800407e <PCD_EP_ISR_Handler+0x6b4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd6:	4413      	add	r3, r2
 8003fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	00da      	lsls	r2, r3, #3
 8003fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fec:	2200      	movs	r2, #0
 8003fee:	801a      	strh	r2, [r3, #0]
 8003ff0:	e045      	b.n	800407e <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d126      	bne.n	800404e <PCD_EP_ISR_Handler+0x684>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800400e:	b29b      	uxth	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	4413      	add	r3, r2
 8004016:	637b      	str	r3, [r7, #52]	@ 0x34
 8004018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	00da      	lsls	r2, r3, #3
 800401e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004020:	4413      	add	r3, r2
 8004022:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004032:	b29a      	uxth	r2, r3
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	801a      	strh	r2, [r3, #0]
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004046:	b29a      	uxth	r2, r3
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	801a      	strh	r2, [r3, #0]
 800404c:	e017      	b.n	800407e <PCD_EP_ISR_Handler+0x6b4>
 800404e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d113      	bne.n	800407e <PCD_EP_ISR_Handler+0x6b4>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800405e:	b29b      	uxth	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004064:	4413      	add	r3, r2
 8004066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	00da      	lsls	r2, r3, #3
 800406e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004070:	4413      	add	r3, r2
 8004072:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407a:	2200      	movs	r2, #0
 800407c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800407e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fc fe82 	bl	8000d8e <HAL_PCD_DataInStageCallback>
 800408a:	e051      	b.n	8004130 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800408c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d144      	bne.n	8004122 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	4413      	add	r3, r2
 80040b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80040c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c2:	699a      	ldr	r2, [r3, #24]
 80040c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d907      	bls.n	80040dc <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80040cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ce:	699a      	ldr	r2, [r3, #24]
 80040d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80040d4:	1ad2      	subs	r2, r2, r3
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	619a      	str	r2, [r3, #24]
 80040da:	e002      	b.n	80040e2 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80040dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040de:	2200      	movs	r2, #0
 80040e0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80040e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	4619      	mov	r1, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7fc fe4c 	bl	8000d8e <HAL_PCD_DataInStageCallback>
 80040f6:	e01b      	b.n	8004130 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80040f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004100:	441a      	add	r2, r3
 8004102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004104:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800410e:	441a      	add	r2, r3
 8004110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004112:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800411a:	4618      	mov	r0, r3
 800411c:	f002 fd79 	bl	8006c12 <USB_EPStartXfer>
 8004120:	e006      	b.n	8004130 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004122:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004126:	461a      	mov	r2, r3
 8004128:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f917 	bl	800435e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004138:	b29b      	uxth	r3, r3
 800413a:	b21b      	sxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	f6ff ac49 	blt.w	80039d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3758      	adds	r7, #88	@ 0x58
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d07c      	beq.n	800425e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	4413      	add	r3, r2
 800417e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004188:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	8b7b      	ldrh	r3, [r7, #26]
 8004190:	429a      	cmp	r2, r3
 8004192:	d306      	bcc.n	80041a2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	8b7b      	ldrh	r3, [r7, #26]
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	619a      	str	r2, [r3, #24]
 80041a0:	e002      	b.n	80041a8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d123      	bne.n	80041f8 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	461a      	mov	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ca:	833b      	strh	r3, [r7, #24]
 80041cc:	8b3b      	ldrh	r3, [r7, #24]
 80041ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80041d2:	833b      	strh	r3, [r7, #24]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	441a      	add	r2, r3
 80041e2:	8b3b      	ldrh	r3, [r7, #24]
 80041e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d01f      	beq.n	8004242 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421c:	82fb      	strh	r3, [r7, #22]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	441a      	add	r2, r3
 800422c:	8afb      	ldrh	r3, [r7, #22]
 800422e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800423a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800423e:	b29b      	uxth	r3, r3
 8004240:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004242:	8b7b      	ldrh	r3, [r7, #26]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8085 	beq.w	8004354 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6959      	ldr	r1, [r3, #20]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	891a      	ldrh	r2, [r3, #8]
 8004256:	8b7b      	ldrh	r3, [r7, #26]
 8004258:	f004 fa32 	bl	80086c0 <USB_ReadPMA>
 800425c:	e07a      	b.n	8004354 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	4413      	add	r3, r2
 8004278:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004282:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	8b7b      	ldrh	r3, [r7, #26]
 800428a:	429a      	cmp	r2, r3
 800428c:	d306      	bcc.n	800429c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	8b7b      	ldrh	r3, [r7, #26]
 8004294:	1ad2      	subs	r2, r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	619a      	str	r2, [r3, #24]
 800429a:	e002      	b.n	80042a2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2200      	movs	r2, #0
 80042a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d123      	bne.n	80042f2 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c4:	83fb      	strh	r3, [r7, #30]
 80042c6:	8bfb      	ldrh	r3, [r7, #30]
 80042c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80042cc:	83fb      	strh	r3, [r7, #30]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	441a      	add	r2, r3
 80042dc:	8bfb      	ldrh	r3, [r7, #30]
 80042de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11f      	bne.n	800433c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004316:	83bb      	strh	r3, [r7, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	8bbb      	ldrh	r3, [r7, #28]
 8004328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800432c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004334:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004338:	b29b      	uxth	r3, r3
 800433a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800433c:	8b7b      	ldrh	r3, [r7, #26]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6959      	ldr	r1, [r3, #20]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	895a      	ldrh	r2, [r3, #10]
 800434e:	8b7b      	ldrh	r3, [r7, #26]
 8004350:	f004 f9b6 	bl	80086c0 <USB_ReadPMA>
    }
  }

  return count;
 8004354:	8b7b      	ldrh	r3, [r7, #26]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3720      	adds	r7, #32
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b0a4      	sub	sp, #144	@ 0x90
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	4613      	mov	r3, r2
 800436a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 81db 	beq.w	800472e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004380:	b29b      	uxth	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	4413      	add	r3, r2
 8004392:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800439c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d907      	bls.n	80043bc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043b4:	1ad2      	subs	r2, r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	619a      	str	r2, [r3, #24]
 80043ba:	e002      	b.n	80043c2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 80b9 	bne.w	800453e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d126      	bne.n	8004422 <HAL_PCD_EP_DB_Transmit+0xc4>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e8:	4413      	add	r3, r2
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	00da      	lsls	r2, r3, #3
 80043f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f4:	4413      	add	r3, r2
 80043f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	b29b      	uxth	r3, r3
 8004402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004406:	b29a      	uxth	r2, r3
 8004408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440a:	801a      	strh	r2, [r3, #0]
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	b29b      	uxth	r3, r3
 8004412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800441a:	b29a      	uxth	r2, r3
 800441c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441e:	801a      	strh	r2, [r3, #0]
 8004420:	e01a      	b.n	8004458 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	785b      	ldrb	r3, [r3, #1]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d116      	bne.n	8004458 <HAL_PCD_EP_DB_Transmit+0xfa>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443e:	4413      	add	r3, r2
 8004440:	637b      	str	r3, [r7, #52]	@ 0x34
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	00da      	lsls	r2, r3, #3
 8004448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444a:	4413      	add	r3, r2
 800444c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004450:	633b      	str	r3, [r7, #48]	@ 0x30
 8004452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004454:	2200      	movs	r2, #0
 8004456:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d126      	bne.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x156>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004474:	b29b      	uxth	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	00da      	lsls	r2, r3, #3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	4413      	add	r3, r2
 8004488:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004498:	b29a      	uxth	r2, r3
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	801a      	strh	r2, [r3, #0]
 80044b2:	e017      	b.n	80044e4 <HAL_PCD_EP_DB_Transmit+0x186>
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	785b      	ldrb	r3, [r3, #1]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d113      	bne.n	80044e4 <HAL_PCD_EP_DB_Transmit+0x186>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ca:	4413      	add	r3, r2
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	00da      	lsls	r2, r3, #3
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	4413      	add	r3, r2
 80044d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80044dc:	623b      	str	r3, [r7, #32]
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	2200      	movs	r2, #0
 80044e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f7fc fc4f 	bl	8000d8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 82fa 	beq.w	8004af0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	881b      	ldrh	r3, [r3, #0]
 800450c:	b29b      	uxth	r3, r3
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004516:	82fb      	strh	r3, [r7, #22]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	8afb      	ldrh	r3, [r7, #22]
 8004528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800452c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004530:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004538:	b29b      	uxth	r3, r3
 800453a:	8013      	strh	r3, [r2, #0]
 800453c:	e2d8      	b.n	8004af0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800453e:	88fb      	ldrh	r3, [r7, #6]
 8004540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d021      	beq.n	800458c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800455e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004562:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	441a      	add	r2, r3
 8004574:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004578:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800457c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004580:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004588:	b29b      	uxth	r3, r3
 800458a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004592:	2b01      	cmp	r3, #1
 8004594:	f040 82ac 	bne.w	8004af0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045a0:	441a      	add	r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	69da      	ldr	r2, [r3, #28]
 80045aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045ae:	441a      	add	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d30b      	bcc.n	80045d8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	621a      	str	r2, [r3, #32]
 80045d6:	e017      	b.n	8004608 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80045e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80045f0:	e00a      	b.n	8004608 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2200      	movs	r2, #0
 8004606:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d165      	bne.n	80046dc <HAL_PCD_EP_DB_Transmit+0x37e>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004624:	4413      	add	r3, r2
 8004626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	00da      	lsls	r2, r3, #3
 800462e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004630:	4413      	add	r3, r2
 8004632:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004636:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004642:	b29a      	uxth	r2, r3
 8004644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800464c:	2b3e      	cmp	r3, #62	@ 0x3e
 800464e:	d91d      	bls.n	800468c <HAL_PCD_EP_DB_Transmit+0x32e>
 8004650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004658:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <HAL_PCD_EP_DB_Transmit+0x30c>
 8004664:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004666:	3b01      	subs	r3, #1
 8004668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800466a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29a      	uxth	r2, r3
 8004670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004672:	b29b      	uxth	r3, r3
 8004674:	029b      	lsls	r3, r3, #10
 8004676:	b29b      	uxth	r3, r3
 8004678:	4313      	orrs	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004684:	b29a      	uxth	r2, r3
 8004686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	e044      	b.n	8004716 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800468c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <HAL_PCD_EP_DB_Transmit+0x34c>
 8004694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	801a      	strh	r2, [r3, #0]
 80046a8:	e035      	b.n	8004716 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80046aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_PCD_EP_DB_Transmit+0x366>
 80046be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c0:	3301      	adds	r3, #1
 80046c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	029b      	lsls	r3, r3, #10
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	e01c      	b.n	8004716 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	785b      	ldrb	r3, [r3, #1]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d118      	bne.n	8004716 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f8:	4413      	add	r3, r2
 80046fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	00da      	lsls	r2, r3, #3
 8004702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004704:	4413      	add	r3, r2
 8004706:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800470a:	643b      	str	r3, [r7, #64]	@ 0x40
 800470c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004710:	b29a      	uxth	r2, r3
 8004712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004714:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6959      	ldr	r1, [r3, #20]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	891a      	ldrh	r2, [r3, #8]
 8004722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004726:	b29b      	uxth	r3, r3
 8004728:	f003 ff88 	bl	800863c <USB_WritePMA>
 800472c:	e1e0      	b.n	8004af0 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004736:	b29b      	uxth	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	4413      	add	r3, r2
 8004748:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004752:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800475e:	429a      	cmp	r2, r3
 8004760:	d307      	bcc.n	8004772 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800476a:	1ad2      	subs	r2, r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	619a      	str	r2, [r3, #24]
 8004770:	e002      	b.n	8004778 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2200      	movs	r2, #0
 8004776:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 80c0 	bne.w	8004902 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d126      	bne.n	80047d8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004798:	b29b      	uxth	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800479e:	4413      	add	r3, r2
 80047a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	00da      	lsls	r2, r3, #3
 80047a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047aa:	4413      	add	r3, r2
 80047ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80047b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047bc:	b29a      	uxth	r2, r3
 80047be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e01a      	b.n	800480e <HAL_PCD_EP_DB_Transmit+0x4b0>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d116      	bne.n	800480e <HAL_PCD_EP_DB_Transmit+0x4b0>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047f4:	4413      	add	r3, r2
 80047f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	00da      	lsls	r2, r3, #3
 80047fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004800:	4413      	add	r3, r2
 8004802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004806:	663b      	str	r3, [r7, #96]	@ 0x60
 8004808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800480a:	2200      	movs	r2, #0
 800480c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	677b      	str	r3, [r7, #116]	@ 0x74
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	785b      	ldrb	r3, [r3, #1]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d12b      	bne.n	8004874 <HAL_PCD_EP_DB_Transmit+0x516>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800482a:	b29b      	uxth	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004830:	4413      	add	r3, r2
 8004832:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	00da      	lsls	r2, r3, #3
 800483a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800483c:	4413      	add	r3, r2
 800483e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004842:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004846:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004852:	b29a      	uxth	r2, r3
 8004854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486a:	b29a      	uxth	r2, r3
 800486c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	e017      	b.n	80048a4 <HAL_PCD_EP_DB_Transmit+0x546>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d113      	bne.n	80048a4 <HAL_PCD_EP_DB_Transmit+0x546>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004884:	b29b      	uxth	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800488a:	4413      	add	r3, r2
 800488c:	677b      	str	r3, [r7, #116]	@ 0x74
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	00da      	lsls	r2, r3, #3
 8004894:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004896:	4413      	add	r3, r2
 8004898:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800489c:	673b      	str	r3, [r7, #112]	@ 0x70
 800489e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048a0:	2200      	movs	r2, #0
 80048a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f7fc fa6f 	bl	8000d8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f040 811a 	bne.w	8004af0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]
 8004900:	e0f6      	b.n	8004af0 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d121      	bne.n	8004950 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004926:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800493c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004944:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800494c:	b29b      	uxth	r3, r3
 800494e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004956:	2b01      	cmp	r3, #1
 8004958:	f040 80ca 	bne.w	8004af0 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004964:	441a      	add	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004972:	441a      	add	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	429a      	cmp	r2, r3
 8004982:	d30b      	bcc.n	800499c <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004994:	1ad2      	subs	r2, r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	621a      	str	r2, [r3, #32]
 800499a:	e017      	b.n	80049cc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80049a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80049b4:	e00a      	b.n	80049cc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2200      	movs	r2, #0
 80049c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d165      	bne.n	8004aa6 <HAL_PCD_EP_DB_Transmit+0x748>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049ee:	4413      	add	r3, r2
 80049f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	00da      	lsls	r2, r3, #3
 80049f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049fa:	4413      	add	r3, r2
 80049fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a10:	801a      	strh	r2, [r3, #0]
 8004a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a16:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a18:	d91d      	bls.n	8004a56 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d102      	bne.n	8004a34 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004a2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a30:	3b01      	subs	r3, #1
 8004a32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	029b      	lsls	r3, r3, #10
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	4313      	orrs	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a52:	801a      	strh	r2, [r3, #0]
 8004a54:	e041      	b.n	8004ada <HAL_PCD_EP_DB_Transmit+0x77c>
 8004a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x716>
 8004a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a70:	801a      	strh	r2, [r3, #0]
 8004a72:	e032      	b.n	8004ada <HAL_PCD_EP_DB_Transmit+0x77c>
 8004a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a78:	085b      	lsrs	r3, r3, #1
 8004a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_PCD_EP_DB_Transmit+0x730>
 8004a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	029b      	lsls	r3, r3, #10
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	e019      	b.n	8004ada <HAL_PCD_EP_DB_Transmit+0x77c>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d115      	bne.n	8004ada <HAL_PCD_EP_DB_Transmit+0x77c>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004abc:	4413      	add	r3, r2
 8004abe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	00da      	lsls	r2, r3, #3
 8004ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ac8:	4413      	add	r3, r2
 8004aca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ad8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6959      	ldr	r1, [r3, #20]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	895a      	ldrh	r2, [r3, #10]
 8004ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f003 fda6 	bl	800863c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b0a:	82bb      	strh	r3, [r7, #20]
 8004b0c:	8abb      	ldrh	r3, [r7, #20]
 8004b0e:	f083 0310 	eor.w	r3, r3, #16
 8004b12:	82bb      	strh	r3, [r7, #20]
 8004b14:	8abb      	ldrh	r3, [r7, #20]
 8004b16:	f083 0320 	eor.w	r3, r3, #32
 8004b1a:	82bb      	strh	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	8abb      	ldrh	r3, [r7, #20]
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3790      	adds	r7, #144	@ 0x90
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	817b      	strh	r3, [r7, #10]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b5c:	897b      	ldrh	r3, [r7, #10]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b68:	897b      	ldrh	r3, [r7, #10]
 8004b6a:	f003 0207 	and.w	r2, r3, #7
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	3310      	adds	r3, #16
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e009      	b.n	8004b94 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b80:	897a      	ldrh	r2, [r7, #10]
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4413      	add	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d107      	bne.n	8004baa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	80da      	strh	r2, [r3, #6]
 8004ba8:	e00b      	b.n	8004bc2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2201      	movs	r2, #1
 8004bae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	0c1b      	lsrs	r3, r3, #16
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f043 0302 	orr.w	r3, r3, #2
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a04      	ldr	r2, [pc, #16]	@ (8004c58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4a:	6013      	str	r3, [r2, #0]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	58000400 	.word	0x58000400

08004c5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004c60:	4b04      	ldr	r3, [pc, #16]	@ (8004c74 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	58000400 	.word	0x58000400

08004c78 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4a04      	ldr	r2, [pc, #16]	@ (8004c94 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c86:	6053      	str	r3, [r2, #4]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	58000400 	.word	0x58000400

08004c98 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004caa:	d101      	bne.n	8004cb0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cce:	6013      	str	r3, [r2, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d0a:	d101      	bne.n	8004d10 <LL_RCC_HSE_IsReady+0x18>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <LL_RCC_HSE_IsReady+0x1a>
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d4c:	6013      	str	r3, [r2, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d6a:	d101      	bne.n	8004d70 <LL_RCC_HSI_IsReady+0x18>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <LL_RCC_HSI_IsReady+0x1a>
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d96:	4313      	orrs	r3, r2
 8004d98:	604b      	str	r3, [r1, #4]
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004da6:	b480      	push	{r7}
 8004da8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004daa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004db2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004de0:	bf00      	nop
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004dea:	b480      	push	{r7}
 8004dec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d101      	bne.n	8004e02 <LL_RCC_HSI48_IsReady+0x18>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <LL_RCC_HSI48_IsReady+0x1a>
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e26:	bf00      	nop
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004e52:	b480      	push	{r7}
 8004e54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e62:	f043 0304 	orr.w	r3, r3, #4
 8004e66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e6a:	bf00      	nop
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e84:	f023 0304 	bic.w	r3, r3, #4
 8004e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004e8c:	bf00      	nop
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d101      	bne.n	8004eae <LL_RCC_LSE_IsReady+0x18>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <LL_RCC_LSE_IsReady+0x1a>
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004ed2:	bf00      	nop
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8004efe:	b480      	push	{r7}
 8004f00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d101      	bne.n	8004f16 <LL_RCC_LSI1_IsReady+0x18>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <LL_RCC_LSI1_IsReady+0x1a>
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004f22:	b480      	push	{r7}
 8004f24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f32:	f043 0304 	orr.w	r3, r3, #4
 8004f36:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f3a:	bf00      	nop
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f5c:	bf00      	nop
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004f66:	b480      	push	{r7}
 8004f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d101      	bne.n	8004f7e <LL_RCC_LSI2_IsReady+0x18>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <LL_RCC_LSI2_IsReady+0x1a>
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	6013      	str	r3, [r2, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	6013      	str	r3, [r2, #0]
}
 8004fea:	bf00      	nop
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d101      	bne.n	800500a <LL_RCC_MSI_IsReady+0x16>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <LL_RCC_MSI_IsReady+0x18>
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005028:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800504e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2bb0      	cmp	r3, #176	@ 0xb0
 8005054:	d901      	bls.n	800505a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8005056:	23b0      	movs	r3, #176	@ 0xb0
 8005058:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800505a:	687b      	ldr	r3, [r7, #4]
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800509a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f023 0203 	bic.w	r2, r3, #3
 80050a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	608b      	str	r3, [r1, #8]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80050ba:	b480      	push	{r7}
 80050bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80050be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 030c 	and.w	r3, r3, #12
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80050da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005106:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800510a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800510e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005132:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005136:	f023 020f 	bic.w	r2, r3, #15
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4313      	orrs	r3, r2
 800516e:	608b      	str	r3, [r1, #8]
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800518e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80051a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ea:	6013      	str	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005204:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005208:	6013      	str	r3, [r2, #0]
}
 800520a:	bf00      	nop
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005226:	d101      	bne.n	800522c <LL_RCC_PLL_IsReady+0x18>
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <LL_RCC_PLL_IsReady+0x1a>
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	0a1b      	lsrs	r3, r3, #8
 8005244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005248:	4618      	mov	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005252:	b480      	push	{r7}
 8005254:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005282:	b480      	push	{r7}
 8005284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0303 	and.w	r3, r3, #3
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800529a:	b480      	push	{r7}
 800529c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052ac:	d101      	bne.n	80052b2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80052be:	b480      	push	{r7}
 80052c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80052c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80052ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052d2:	d101      	bne.n	80052d8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80052e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80052f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f8:	d101      	bne.n	80052fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800531c:	d101      	bne.n	8005322 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800533c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005340:	d101      	bne.n	8005346 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b08d      	sub	sp, #52	@ 0x34
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e363      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 808d 	beq.w	800548e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005374:	f7ff fea1 	bl	80050ba <LL_RCC_GetSysClkSource>
 8005378:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800537a:	f7ff ff82 	bl	8005282 <LL_RCC_PLL_GetMainSource>
 800537e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_RCC_OscConfig+0x3e>
 8005386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005388:	2b0c      	cmp	r3, #12
 800538a:	d147      	bne.n	800541c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	2b01      	cmp	r3, #1
 8005390:	d144      	bne.n	800541c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e347      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80053a2:	f7ff fe4c 	bl	800503e <LL_RCC_MSI_GetRange>
 80053a6:	4603      	mov	r3, r0
 80053a8:	429c      	cmp	r4, r3
 80053aa:	d914      	bls.n	80053d6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fd05 	bl	8005dc0 <RCC_SetFlashLatencyFromMSIRange>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e336      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fe26 	bl	8005016 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fe4a 	bl	8005068 <LL_RCC_MSI_SetCalibTrimming>
 80053d4:	e013      	b.n	80053fe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fe1b 	bl	8005016 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fe3f 	bl	8005068 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fce6 	bl	8005dc0 <RCC_SetFlashLatencyFromMSIRange>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e317      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053fe:	f000 fccb 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005402:	4603      	mov	r3, r0
 8005404:	4aa4      	ldr	r2, [pc, #656]	@ (8005698 <HAL_RCC_OscConfig+0x344>)
 8005406:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005408:	4ba4      	ldr	r3, [pc, #656]	@ (800569c <HAL_RCC_OscConfig+0x348>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7fc f821 	bl	8001454 <HAL_InitTick>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d039      	beq.n	800548c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e308      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01e      	beq.n	8005462 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005424:	f7ff fdc8 	bl	8004fb8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005428:	f7fc f862 	bl	80014f0 <HAL_GetTick>
 800542c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005430:	f7fc f85e 	bl	80014f0 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e2f5      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005442:	f7ff fdd7 	bl	8004ff4 <LL_RCC_MSI_IsReady>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f1      	beq.n	8005430 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff fde0 	bl	8005016 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff fe04 	bl	8005068 <LL_RCC_MSI_SetCalibTrimming>
 8005460:	e015      	b.n	800548e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005462:	f7ff fdb8 	bl	8004fd6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005466:	f7fc f843 	bl	80014f0 <HAL_GetTick>
 800546a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800546e:	f7fc f83f 	bl	80014f0 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e2d6      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005480:	f7ff fdb8 	bl	8004ff4 <LL_RCC_MSI_IsReady>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1f1      	bne.n	800546e <HAL_RCC_OscConfig+0x11a>
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800548c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d047      	beq.n	800552a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800549a:	f7ff fe0e 	bl	80050ba <LL_RCC_GetSysClkSource>
 800549e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054a0:	f7ff feef 	bl	8005282 <LL_RCC_PLL_GetMainSource>
 80054a4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d005      	beq.n	80054b8 <HAL_RCC_OscConfig+0x164>
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	2b0c      	cmp	r3, #12
 80054b0:	d108      	bne.n	80054c4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d105      	bne.n	80054c4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d134      	bne.n	800552a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e2b4      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054cc:	d102      	bne.n	80054d4 <HAL_RCC_OscConfig+0x180>
 80054ce:	f7ff fbf5 	bl	8004cbc <LL_RCC_HSE_Enable>
 80054d2:	e001      	b.n	80054d8 <HAL_RCC_OscConfig+0x184>
 80054d4:	f7ff fc01 	bl	8004cda <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d012      	beq.n	8005506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fc f806 	bl	80014f0 <HAL_GetTick>
 80054e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e8:	f7fc f802 	bl	80014f0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	@ 0x64
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e299      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80054fa:	f7ff fbfd 	bl	8004cf8 <LL_RCC_HSE_IsReady>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f1      	beq.n	80054e8 <HAL_RCC_OscConfig+0x194>
 8005504:	e011      	b.n	800552a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005506:	f7fb fff3 	bl	80014f0 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800550c:	e008      	b.n	8005520 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800550e:	f7fb ffef 	bl	80014f0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b64      	cmp	r3, #100	@ 0x64
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e286      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005520:	f7ff fbea 	bl	8004cf8 <LL_RCC_HSE_IsReady>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1f1      	bne.n	800550e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d04c      	beq.n	80055d0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005536:	f7ff fdc0 	bl	80050ba <LL_RCC_GetSysClkSource>
 800553a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800553c:	f7ff fea1 	bl	8005282 <LL_RCC_PLL_GetMainSource>
 8005540:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d005      	beq.n	8005554 <HAL_RCC_OscConfig+0x200>
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b0c      	cmp	r3, #12
 800554c:	d10e      	bne.n	800556c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d10b      	bne.n	800556c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e266      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff fc09 	bl	8004d7c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800556a:	e031      	b.n	80055d0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d019      	beq.n	80055a8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005574:	f7ff fbd2 	bl	8004d1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fb ffba 	bl	80014f0 <HAL_GetTick>
 800557c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005580:	f7fb ffb6 	bl	80014f0 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e24d      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005592:	f7ff fbe1 	bl	8004d58 <LL_RCC_HSI_IsReady>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f1      	beq.n	8005580 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fbeb 	bl	8004d7c <LL_RCC_HSI_SetCalibTrimming>
 80055a6:	e013      	b.n	80055d0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a8:	f7ff fbc7 	bl	8004d3a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fb ffa0 	bl	80014f0 <HAL_GetTick>
 80055b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b4:	f7fb ff9c 	bl	80014f0 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e233      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80055c6:	f7ff fbc7 	bl	8004d58 <LL_RCC_HSI_IsReady>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f1      	bne.n	80055b4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 80a3 	beq.w	8005730 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d076      	beq.n	80056e0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d046      	beq.n	800568c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80055fe:	f7ff fc7e 	bl	8004efe <LL_RCC_LSI1_IsReady>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d113      	bne.n	8005630 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005608:	f7ff fc57 	bl	8004eba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800560c:	f7fb ff70 	bl	80014f0 <HAL_GetTick>
 8005610:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005614:	f7fb ff6c 	bl	80014f0 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e203      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005626:	f7ff fc6a 	bl	8004efe <LL_RCC_LSI1_IsReady>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f1      	beq.n	8005614 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005630:	f7ff fc77 	bl	8004f22 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fb ff5c 	bl	80014f0 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800563c:	f7fb ff58 	bl	80014f0 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b03      	cmp	r3, #3
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e1ef      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800564e:	f7ff fc8a 	bl	8004f66 <LL_RCC_LSI2_IsReady>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0f1      	beq.n	800563c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fc94 	bl	8004f8a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005662:	f7ff fc3b 	bl	8004edc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005666:	f7fb ff43 	bl	80014f0 <HAL_GetTick>
 800566a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800566e:	f7fb ff3f 	bl	80014f0 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e1d6      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005680:	f7ff fc3d 	bl	8004efe <LL_RCC_LSI1_IsReady>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f1      	bne.n	800566e <HAL_RCC_OscConfig+0x31a>
 800568a:	e051      	b.n	8005730 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800568c:	f7ff fc15 	bl	8004eba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005690:	f7fb ff2e 	bl	80014f0 <HAL_GetTick>
 8005694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005696:	e00c      	b.n	80056b2 <HAL_RCC_OscConfig+0x35e>
 8005698:	20000070 	.word	0x20000070
 800569c:	20000074 	.word	0x20000074
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80056a0:	f7fb ff26 	bl	80014f0 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e1bd      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80056b2:	f7ff fc24 	bl	8004efe <LL_RCC_LSI1_IsReady>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f1      	beq.n	80056a0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80056bc:	f7ff fc42 	bl	8004f44 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056c2:	f7fb ff15 	bl	80014f0 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e1ac      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80056d4:	f7ff fc47 	bl	8004f66 <LL_RCC_LSI2_IsReady>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f1      	bne.n	80056c2 <HAL_RCC_OscConfig+0x36e>
 80056de:	e027      	b.n	8005730 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80056e0:	f7ff fc30 	bl	8004f44 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e4:	f7fb ff04 	bl	80014f0 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80056ec:	f7fb ff00 	bl	80014f0 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e197      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80056fe:	f7ff fc32 	bl	8004f66 <LL_RCC_LSI2_IsReady>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f1      	bne.n	80056ec <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005708:	f7ff fbe8 	bl	8004edc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570c:	f7fb fef0 	bl	80014f0 <HAL_GetTick>
 8005710:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005714:	f7fb feec 	bl	80014f0 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e183      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005726:	f7ff fbea 	bl	8004efe <LL_RCC_LSI1_IsReady>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f1      	bne.n	8005714 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b00      	cmp	r3, #0
 800573a:	d05b      	beq.n	80057f4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800573c:	4ba7      	ldr	r3, [pc, #668]	@ (80059dc <HAL_RCC_OscConfig+0x688>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005744:	2b00      	cmp	r3, #0
 8005746:	d114      	bne.n	8005772 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005748:	f7ff fa78 	bl	8004c3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800574c:	f7fb fed0 	bl	80014f0 <HAL_GetTick>
 8005750:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005754:	f7fb fecc 	bl	80014f0 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e163      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005766:	4b9d      	ldr	r3, [pc, #628]	@ (80059dc <HAL_RCC_OscConfig+0x688>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0f0      	beq.n	8005754 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d102      	bne.n	8005780 <HAL_RCC_OscConfig+0x42c>
 800577a:	f7ff fb48 	bl	8004e0e <LL_RCC_LSE_Enable>
 800577e:	e00c      	b.n	800579a <HAL_RCC_OscConfig+0x446>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b05      	cmp	r3, #5
 8005786:	d104      	bne.n	8005792 <HAL_RCC_OscConfig+0x43e>
 8005788:	f7ff fb63 	bl	8004e52 <LL_RCC_LSE_EnableBypass>
 800578c:	f7ff fb3f 	bl	8004e0e <LL_RCC_LSE_Enable>
 8005790:	e003      	b.n	800579a <HAL_RCC_OscConfig+0x446>
 8005792:	f7ff fb4d 	bl	8004e30 <LL_RCC_LSE_Disable>
 8005796:	f7ff fb6d 	bl	8004e74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d014      	beq.n	80057cc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fb fea5 	bl	80014f0 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80057a8:	e00a      	b.n	80057c0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fb fea1 	bl	80014f0 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e136      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80057c0:	f7ff fb69 	bl	8004e96 <LL_RCC_LSE_IsReady>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0ef      	beq.n	80057aa <HAL_RCC_OscConfig+0x456>
 80057ca:	e013      	b.n	80057f4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057cc:	f7fb fe90 	bl	80014f0 <HAL_GetTick>
 80057d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057d4:	f7fb fe8c 	bl	80014f0 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e121      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80057ea:	f7ff fb54 	bl	8004e96 <LL_RCC_LSE_IsReady>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1ef      	bne.n	80057d4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d02c      	beq.n	800585a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d014      	beq.n	8005832 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005808:	f7ff facd 	bl	8004da6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580c:	f7fb fe70 	bl	80014f0 <HAL_GetTick>
 8005810:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005814:	f7fb fe6c 	bl	80014f0 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e103      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005826:	f7ff fae0 	bl	8004dea <LL_RCC_HSI48_IsReady>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f1      	beq.n	8005814 <HAL_RCC_OscConfig+0x4c0>
 8005830:	e013      	b.n	800585a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005832:	f7ff fac9 	bl	8004dc8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005836:	f7fb fe5b 	bl	80014f0 <HAL_GetTick>
 800583a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800583e:	f7fb fe57 	bl	80014f0 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0ee      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005850:	f7ff facb 	bl	8004dea <LL_RCC_HSI48_IsReady>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1f1      	bne.n	800583e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 80e4 	beq.w	8005a2c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005864:	f7ff fc29 	bl	80050ba <LL_RCC_GetSysClkSource>
 8005868:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800586a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005876:	2b02      	cmp	r3, #2
 8005878:	f040 80b4 	bne.w	80059e4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0203 	and.w	r2, r3, #3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005886:	429a      	cmp	r2, r3
 8005888:	d123      	bne.n	80058d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d11c      	bne.n	80058d2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	0a1b      	lsrs	r3, r3, #8
 800589c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d114      	bne.n	80058d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10d      	bne.n	80058d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d106      	bne.n	80058d2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d05d      	beq.n	800598e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b0c      	cmp	r3, #12
 80058d6:	d058      	beq.n	800598a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0a1      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058ea:	f7ff fc84 	bl	80051f6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058ee:	f7fb fdff 	bl	80014f0 <HAL_GetTick>
 80058f2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f6:	f7fb fdfb 	bl	80014f0 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e092      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1ef      	bne.n	80058f6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	4b30      	ldr	r3, [pc, #192]	@ (80059e0 <HAL_RCC_OscConfig+0x68c>)
 800591e:	4013      	ands	r3, r2
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005928:	4311      	orrs	r1, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800592e:	0212      	lsls	r2, r2, #8
 8005930:	4311      	orrs	r1, r2
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005936:	4311      	orrs	r1, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800593c:	4311      	orrs	r1, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005942:	430a      	orrs	r2, r1
 8005944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005948:	4313      	orrs	r3, r2
 800594a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800594c:	f7ff fc44 	bl	80051d8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005960:	f7fb fdc6 	bl	80014f0 <HAL_GetTick>
 8005964:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005968:	f7fb fdc2 	bl	80014f0 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e059      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0ef      	beq.n	8005968 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005988:	e050      	b.n	8005a2c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e04f      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d147      	bne.n	8005a2c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800599c:	f7ff fc1c 	bl	80051d8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059b0:	f7fb fd9e 	bl	80014f0 <HAL_GetTick>
 80059b4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b6:	e008      	b.n	80059ca <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b8:	f7fb fd9a 	bl	80014f0 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e031      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0ef      	beq.n	80059b8 <HAL_RCC_OscConfig+0x664>
 80059d8:	e028      	b.n	8005a2c <HAL_RCC_OscConfig+0x6d8>
 80059da:	bf00      	nop
 80059dc:	58000400 	.word	0x58000400
 80059e0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d01e      	beq.n	8005a28 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ea:	f7ff fc04 	bl	80051f6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ee:	f7fb fd7f 	bl	80014f0 <HAL_GetTick>
 80059f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059f4:	e008      	b.n	8005a08 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f6:	f7fb fd7b 	bl	80014f0 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d901      	bls.n	8005a08 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e012      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1ef      	bne.n	80059f6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a20:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_RCC_OscConfig+0x6e4>)
 8005a22:	4013      	ands	r3, r2
 8005a24:	60cb      	str	r3, [r1, #12]
 8005a26:	e001      	b.n	8005a2c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3734      	adds	r7, #52	@ 0x34
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd90      	pop	{r4, r7, pc}
 8005a36:	bf00      	nop
 8005a38:	eefefffc 	.word	0xeefefffc

08005a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e12d      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a50:	4b98      	ldr	r3, [pc, #608]	@ (8005cb4 <HAL_RCC_ClockConfig+0x278>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d91b      	bls.n	8005a96 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5e:	4b95      	ldr	r3, [pc, #596]	@ (8005cb4 <HAL_RCC_ClockConfig+0x278>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f023 0207 	bic.w	r2, r3, #7
 8005a66:	4993      	ldr	r1, [pc, #588]	@ (8005cb4 <HAL_RCC_ClockConfig+0x278>)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a6e:	f7fb fd3f 	bl	80014f0 <HAL_GetTick>
 8005a72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a76:	f7fb fd3b 	bl	80014f0 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e111      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a88:	4b8a      	ldr	r3, [pc, #552]	@ (8005cb4 <HAL_RCC_ClockConfig+0x278>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	683a      	ldr	r2, [r7, #0]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d1ef      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d016      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff fb13 	bl	80050d2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005aac:	f7fb fd20 	bl	80014f0 <HAL_GetTick>
 8005ab0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ab2:	e008      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ab4:	f7fb fd1c 	bl	80014f0 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e0f2      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005ac6:	f7ff fbe8 	bl	800529a <LL_RCC_IsActiveFlag_HPRE>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0f1      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d016      	beq.n	8005b0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fb0a 	bl	80050fa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ae6:	f7fb fd03 	bl	80014f0 <HAL_GetTick>
 8005aea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005aec:	e008      	b.n	8005b00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005aee:	f7fb fcff 	bl	80014f0 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e0d5      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005b00:	f7ff fbdd 	bl	80052be <LL_RCC_IsActiveFlag_C2HPRE>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f1      	beq.n	8005aee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d016      	beq.n	8005b44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fb03 	bl	8005126 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b20:	f7fb fce6 	bl	80014f0 <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b28:	f7fb fce2 	bl	80014f0 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e0b8      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005b3a:	f7ff fbd3 	bl	80052e4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f1      	beq.n	8005b28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d016      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fafd 	bl	8005154 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b5a:	f7fb fcc9 	bl	80014f0 <HAL_GetTick>
 8005b5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b62:	f7fb fcc5 	bl	80014f0 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e09b      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005b74:	f7ff fbc9 	bl	800530a <LL_RCC_IsActiveFlag_PPRE1>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0f1      	beq.n	8005b62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff faf3 	bl	800517c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b96:	f7fb fcab 	bl	80014f0 <HAL_GetTick>
 8005b9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b9e:	f7fb fca7 	bl	80014f0 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e07d      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005bb0:	f7ff fbbd 	bl	800532e <LL_RCC_IsActiveFlag_PPRE2>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f1      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d043      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d106      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005bce:	f7ff f893 	bl	8004cf8 <LL_RCC_HSE_IsReady>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d11e      	bne.n	8005c16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e067      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d106      	bne.n	8005bf2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005be4:	f7ff fb16 	bl	8005214 <LL_RCC_PLL_IsReady>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d113      	bne.n	8005c16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e05c      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005bfa:	f7ff f9fb 	bl	8004ff4 <LL_RCC_MSI_IsReady>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e051      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005c08:	f7ff f8a6 	bl	8004d58 <LL_RCC_HSI_IsReady>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e04a      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fa39 	bl	8005092 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c20:	f7fb fc66 	bl	80014f0 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c28:	f7fb fc62 	bl	80014f0 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e036      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3e:	f7ff fa3c 	bl	80050ba <LL_RCC_GetSysClkSource>
 8005c42:	4602      	mov	r2, r0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d1ec      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c4e:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_RCC_ClockConfig+0x278>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d21b      	bcs.n	8005c94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5c:	4b15      	ldr	r3, [pc, #84]	@ (8005cb4 <HAL_RCC_ClockConfig+0x278>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f023 0207 	bic.w	r2, r3, #7
 8005c64:	4913      	ldr	r1, [pc, #76]	@ (8005cb4 <HAL_RCC_ClockConfig+0x278>)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6c:	f7fb fc40 	bl	80014f0 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c74:	f7fb fc3c 	bl	80014f0 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e012      	b.n	8005cac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c86:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb4 <HAL_RCC_ClockConfig+0x278>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d1ef      	bne.n	8005c74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c94:	f000 f880 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	4a07      	ldr	r2, [pc, #28]	@ (8005cb8 <HAL_RCC_ClockConfig+0x27c>)
 8005c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005c9e:	f7fb fc33 	bl	8001508 <HAL_GetTickPrio>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fb fbd5 	bl	8001454 <HAL_InitTick>
 8005caa:	4603      	mov	r3, r0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	58004000 	.word	0x58004000
 8005cb8:	20000070 	.word	0x20000070

08005cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc2:	f7ff f9fa 	bl	80050ba <LL_RCC_GetSysClkSource>
 8005cc6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005cce:	f7ff f9b6 	bl	800503e <LL_RCC_MSI_GetRange>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	4a2b      	ldr	r2, [pc, #172]	@ (8005d88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e04b      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d102      	bne.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cea:	4b28      	ldr	r3, [pc, #160]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	e045      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d10a      	bne.n	8005d0c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005cf6:	f7fe ffcf 	bl	8004c98 <LL_RCC_HSE_IsEnabledDiv2>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d102      	bne.n	8005d06 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005d00:	4b23      	ldr	r3, [pc, #140]	@ (8005d90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e03a      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005d06:	4b23      	ldr	r3, [pc, #140]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e037      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005d0c:	f7ff fab9 	bl	8005282 <LL_RCC_PLL_GetMainSource>
 8005d10:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d003      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0x64>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_GetSysClockFreq+0x6a>
 8005d1e:	e00d      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005d20:	4b1a      	ldr	r3, [pc, #104]	@ (8005d8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d22:	60bb      	str	r3, [r7, #8]
        break;
 8005d24:	e015      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d26:	f7fe ffb7 	bl	8004c98 <LL_RCC_HSE_IsEnabledDiv2>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d102      	bne.n	8005d36 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005d30:	4b17      	ldr	r3, [pc, #92]	@ (8005d90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005d32:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005d34:	e00d      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005d36:	4b17      	ldr	r3, [pc, #92]	@ (8005d94 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005d38:	60bb      	str	r3, [r7, #8]
        break;
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005d3c:	f7ff f97f 	bl	800503e <LL_RCC_MSI_GetRange>
 8005d40:	4603      	mov	r3, r0
 8005d42:	091b      	lsrs	r3, r3, #4
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	4a0f      	ldr	r2, [pc, #60]	@ (8005d88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d4e:	60bb      	str	r3, [r7, #8]
        break;
 8005d50:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005d52:	f7ff fa71 	bl	8005238 <LL_RCC_PLL_GetN>
 8005d56:	4602      	mov	r2, r0
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	fb03 f402 	mul.w	r4, r3, r2
 8005d5e:	f7ff fa84 	bl	800526a <LL_RCC_PLL_GetDivider>
 8005d62:	4603      	mov	r3, r0
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	3301      	adds	r3, #1
 8005d68:	fbb4 f4f3 	udiv	r4, r4, r3
 8005d6c:	f7ff fa71 	bl	8005252 <LL_RCC_PLL_GetR>
 8005d70:	4603      	mov	r3, r0
 8005d72:	0f5b      	lsrs	r3, r3, #29
 8005d74:	3301      	adds	r3, #1
 8005d76:	fbb4 f3f3 	udiv	r3, r4, r3
 8005d7a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd90      	pop	{r4, r7, pc}
 8005d86:	bf00      	nop
 8005d88:	0800a1d4 	.word	0x0800a1d4
 8005d8c:	00f42400 	.word	0x00f42400
 8005d90:	003d0900 	.word	0x003d0900
 8005d94:	007a1200 	.word	0x007a1200

08005d98 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d98:	b598      	push	{r3, r4, r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d9c:	f7ff ff8e 	bl	8005cbc <HAL_RCC_GetSysClockFreq>
 8005da0:	4604      	mov	r4, r0
 8005da2:	f7ff f9ff 	bl	80051a4 <LL_RCC_GetAHBPrescaler>
 8005da6:	4603      	mov	r3, r0
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	4a03      	ldr	r2, [pc, #12]	@ (8005dbc <HAL_RCC_GetHCLKFreq+0x24>)
 8005db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	bd98      	pop	{r3, r4, r7, pc}
 8005dbc:	0800a194 	.word	0x0800a194

08005dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2bb0      	cmp	r3, #176	@ 0xb0
 8005dcc:	d903      	bls.n	8005dd6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005dce:	4b15      	ldr	r3, [pc, #84]	@ (8005e24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e007      	b.n	8005de6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	4a11      	ldr	r2, [pc, #68]	@ (8005e24 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005de6:	f7ff f9e9 	bl	80051bc <LL_RCC_GetAHB4Prescaler>
 8005dea:	4603      	mov	r3, r0
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	4a0d      	ldr	r2, [pc, #52]	@ (8005e28 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4a0a      	ldr	r2, [pc, #40]	@ (8005e2c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	0c9c      	lsrs	r4, r3, #18
 8005e0a:	f7fe ff27 	bl	8004c5c <HAL_PWREx_GetVoltageRange>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	4619      	mov	r1, r3
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 f80c 	bl	8005e30 <RCC_SetFlashLatency>
 8005e18:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd90      	pop	{r4, r7, pc}
 8005e22:	bf00      	nop
 8005e24:	0800a1d4 	.word	0x0800a1d4
 8005e28:	0800a194 	.word	0x0800a194
 8005e2c:	431bde83 	.word	0x431bde83

08005e30 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b093      	sub	sp, #76	@ 0x4c
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005e3a:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <RCC_SetFlashLatency+0xe8>)
 8005e3c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8005e40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005e46:	4a35      	ldr	r2, [pc, #212]	@ (8005f1c <RCC_SetFlashLatency+0xec>)
 8005e48:	f107 031c 	add.w	r3, r7, #28
 8005e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005e52:	4b33      	ldr	r3, [pc, #204]	@ (8005f20 <RCC_SetFlashLatency+0xf0>)
 8005e54:	f107 040c 	add.w	r4, r7, #12
 8005e58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e5e:	2300      	movs	r3, #0
 8005e60:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e68:	d11a      	bne.n	8005ea0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e6e:	e013      	b.n	8005e98 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	3348      	adds	r3, #72	@ 0x48
 8005e76:	443b      	add	r3, r7
 8005e78:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d807      	bhi.n	8005e92 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	3348      	adds	r3, #72	@ 0x48
 8005e88:	443b      	add	r3, r7
 8005e8a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e8e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005e90:	e020      	b.n	8005ed4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e94:	3301      	adds	r3, #1
 8005e96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d9e8      	bls.n	8005e70 <RCC_SetFlashLatency+0x40>
 8005e9e:	e019      	b.n	8005ed4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ea4:	e013      	b.n	8005ece <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	3348      	adds	r3, #72	@ 0x48
 8005eac:	443b      	add	r3, r7
 8005eae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d807      	bhi.n	8005ec8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	3348      	adds	r3, #72	@ 0x48
 8005ebe:	443b      	add	r3, r7
 8005ec0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005ec4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8005ec6:	e005      	b.n	8005ed4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eca:	3301      	adds	r3, #1
 8005ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d9e8      	bls.n	8005ea6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005ed4:	4b13      	ldr	r3, [pc, #76]	@ (8005f24 <RCC_SetFlashLatency+0xf4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f023 0207 	bic.w	r2, r3, #7
 8005edc:	4911      	ldr	r1, [pc, #68]	@ (8005f24 <RCC_SetFlashLatency+0xf4>)
 8005ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ee4:	f7fb fb04 	bl	80014f0 <HAL_GetTick>
 8005ee8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005eea:	e008      	b.n	8005efe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005eec:	f7fb fb00 	bl	80014f0 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e007      	b.n	8005f0e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005efe:	4b09      	ldr	r3, [pc, #36]	@ (8005f24 <RCC_SetFlashLatency+0xf4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d1ef      	bne.n	8005eec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	374c      	adds	r7, #76	@ 0x4c
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd90      	pop	{r4, r7, pc}
 8005f16:	bf00      	nop
 8005f18:	0800a154 	.word	0x0800a154
 8005f1c:	0800a164 	.word	0x0800a164
 8005f20:	0800a170 	.word	0x0800a170
 8005f24:	58004000 	.word	0x58004000

08005f28 <LL_RCC_MSI_EnablePLLMode>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f36:	f043 0304 	orr.w	r3, r3, #4
 8005f3a:	6013      	str	r3, [r2, #0]
}
 8005f3c:	bf00      	nop
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <LL_APB1_GRP1_ForceReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <LL_APB1_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f80:	4013      	ands	r3, r2
 8005f82:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005f94:	f7ff ffc8 	bl	8005f28 <LL_RCC_MSI_EnablePLLMode>
}
 8005f98:	bf00      	nop
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8005fa4:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8005fa8:	f7ff ffcd 	bl	8005f46 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8005fac:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8005fb0:	f7ff ffdb 	bl	8005f6a <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8005fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800600c <HAL_RCCEx_CRSConfig+0x70>)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800600c <HAL_RCCEx_CRSConfig+0x70>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	4906      	ldr	r1, [pc, #24]	@ (800600c <HAL_RCCEx_CRSConfig+0x70>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005ff6:	4b05      	ldr	r3, [pc, #20]	@ (800600c <HAL_RCCEx_CRSConfig+0x70>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a04      	ldr	r2, [pc, #16]	@ (800600c <HAL_RCCEx_CRSConfig+0x70>)
 8005ffc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006000:	6013      	str	r3, [r2, #0]
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40006000 	.word	0x40006000

08006010 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006020:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8006024:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	b29a      	uxth	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006046:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800604a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	b29b      	uxth	r3, r3
 8006058:	43db      	mvns	r3, r3
 800605a:	b29b      	uxth	r3, r3
 800605c:	4013      	ands	r3, r2
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	1d3b      	adds	r3, r7, #4
 800607e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b09d      	sub	sp, #116	@ 0x74
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80060d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	78db      	ldrb	r3, [r3, #3]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d81f      	bhi.n	8006122 <USB_ActivateEndpoint+0x72>
 80060e2:	a201      	add	r2, pc, #4	@ (adr r2, 80060e8 <USB_ActivateEndpoint+0x38>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	08006115 	.word	0x08006115
 80060f0:	0800612b 	.word	0x0800612b
 80060f4:	08006107 	.word	0x08006107
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80060f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80060fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006100:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006104:	e012      	b.n	800612c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006106:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800610a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800610e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006112:	e00b      	b.n	800612c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006114:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006118:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800611c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006120:	e004      	b.n	800612c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006128:	e000      	b.n	800612c <USB_ActivateEndpoint+0x7c>
      break;
 800612a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	441a      	add	r2, r3
 8006136:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800613a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800613e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614a:	b29b      	uxth	r3, r3
 800614c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	b21b      	sxth	r3, r3
 800615e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006166:	b21a      	sxth	r2, r3
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b21b      	sxth	r3, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	b21b      	sxth	r3, r3
 8006172:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800618c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006194:	b29b      	uxth	r3, r3
 8006196:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	7b1b      	ldrb	r3, [r3, #12]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f040 8178 	bne.w	8006492 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 8084 	beq.w	80062b4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	4413      	add	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	00da      	lsls	r2, r3, #3
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	88db      	ldrh	r3, [r3, #6]
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	827b      	strh	r3, [r7, #18]
 80061ee:	8a7b      	ldrh	r3, [r7, #18]
 80061f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01b      	beq.n	8006230 <USB_ActivateEndpoint+0x180>
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800620e:	823b      	strh	r3, [r7, #16]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	8a3b      	ldrh	r3, [r7, #16]
 800621c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006220:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006224:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006228:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800622c:	b29b      	uxth	r3, r3
 800622e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	78db      	ldrb	r3, [r3, #3]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d020      	beq.n	800627a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800624e:	81bb      	strh	r3, [r7, #12]
 8006250:	89bb      	ldrh	r3, [r7, #12]
 8006252:	f083 0320 	eor.w	r3, r3, #32
 8006256:	81bb      	strh	r3, [r7, #12]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	89bb      	ldrh	r3, [r7, #12]
 8006264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800626c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]
 8006278:	e2d5      	b.n	8006826 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006290:	81fb      	strh	r3, [r7, #14]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	441a      	add	r2, r3
 800629c:	89fb      	ldrh	r3, [r7, #14]
 800629e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	8013      	strh	r3, [r2, #0]
 80062b2:	e2b8      	b.n	8006826 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c4:	4413      	add	r3, r2
 80062c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	00da      	lsls	r2, r3, #3
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	4413      	add	r3, r2
 80062d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	88db      	ldrh	r3, [r3, #6]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	b29b      	uxth	r3, r3
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	4413      	add	r3, r2
 80062fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	00da      	lsls	r2, r3, #3
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	4413      	add	r3, r2
 8006306:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800630a:	627b      	str	r3, [r7, #36]	@ 0x24
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006316:	b29a      	uxth	r2, r3
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b3e      	cmp	r3, #62	@ 0x3e
 8006322:	d91d      	bls.n	8006360 <USB_ActivateEndpoint+0x2b0>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	2b00      	cmp	r3, #0
 8006336:	d102      	bne.n	800633e <USB_ActivateEndpoint+0x28e>
 8006338:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800633a:	3b01      	subs	r3, #1
 800633c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	b29a      	uxth	r2, r3
 8006344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006346:	b29b      	uxth	r3, r3
 8006348:	029b      	lsls	r3, r3, #10
 800634a:	b29b      	uxth	r3, r3
 800634c:	4313      	orrs	r3, r2
 800634e:	b29b      	uxth	r3, r3
 8006350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006358:	b29a      	uxth	r2, r3
 800635a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e026      	b.n	80063ae <USB_ActivateEndpoint+0x2fe>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <USB_ActivateEndpoint+0x2ce>
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006376:	b29a      	uxth	r2, r3
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	801a      	strh	r2, [r3, #0]
 800637c:	e017      	b.n	80063ae <USB_ActivateEndpoint+0x2fe>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <USB_ActivateEndpoint+0x2e8>
 8006392:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006394:	3301      	adds	r3, #1
 8006396:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29a      	uxth	r2, r3
 800639e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	029b      	lsls	r3, r3, #10
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	4313      	orrs	r3, r2
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 80063bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80063be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01b      	beq.n	80063fe <USB_ActivateEndpoint+0x34e>
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063dc:	843b      	strh	r3, [r7, #32]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	441a      	add	r2, r3
 80063e8:	8c3b      	ldrh	r3, [r7, #32]
 80063ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d124      	bne.n	8006450 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641c:	83bb      	strh	r3, [r7, #28]
 800641e:	8bbb      	ldrh	r3, [r7, #28]
 8006420:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006424:	83bb      	strh	r3, [r7, #28]
 8006426:	8bbb      	ldrh	r3, [r7, #28]
 8006428:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800642c:	83bb      	strh	r3, [r7, #28]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	8bbb      	ldrh	r3, [r7, #28]
 800643a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800643e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644a:	b29b      	uxth	r3, r3
 800644c:	8013      	strh	r3, [r2, #0]
 800644e:	e1ea      	b.n	8006826 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006466:	83fb      	strh	r3, [r7, #30]
 8006468:	8bfb      	ldrh	r3, [r7, #30]
 800646a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800646e:	83fb      	strh	r3, [r7, #30]
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	8bfb      	ldrh	r3, [r7, #30]
 800647c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006480:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800648c:	b29b      	uxth	r3, r3
 800648e:	8013      	strh	r3, [r2, #0]
 8006490:	e1c9      	b.n	8006826 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	78db      	ldrb	r3, [r3, #3]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d11e      	bne.n	80064d8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80064c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80064ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	8013      	strh	r3, [r2, #0]
 80064d6:	e01d      	b.n	8006514 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4413      	add	r3, r2
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80064ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	441a      	add	r2, r3
 80064fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006510:	b29b      	uxth	r3, r3
 8006512:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800651e:	b29b      	uxth	r3, r3
 8006520:	461a      	mov	r2, r3
 8006522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006524:	4413      	add	r3, r2
 8006526:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	00da      	lsls	r2, r3, #3
 800652e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006530:	4413      	add	r3, r2
 8006532:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006536:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	891b      	ldrh	r3, [r3, #8]
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	b29b      	uxth	r3, r3
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006546:	801a      	strh	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	657b      	str	r3, [r7, #84]	@ 0x54
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006558:	4413      	add	r3, r2
 800655a:	657b      	str	r3, [r7, #84]	@ 0x54
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	00da      	lsls	r2, r3, #3
 8006562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006564:	4413      	add	r3, r2
 8006566:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800656a:	653b      	str	r3, [r7, #80]	@ 0x50
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	895b      	ldrh	r3, [r3, #10]
 8006570:	085b      	lsrs	r3, r3, #1
 8006572:	b29b      	uxth	r3, r3
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800657a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	785b      	ldrb	r3, [r3, #1]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 8093 	bne.w	80066ac <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800659a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01b      	beq.n	80065da <USB_ActivateEndpoint+0x52a>
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	441a      	add	r2, r3
 80065c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80065c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80065e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80065ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01b      	beq.n	800662a <USB_ActivateEndpoint+0x57a>
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006608:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	441a      	add	r2, r3
 8006614:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800661a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800661e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006622:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006626:	b29b      	uxth	r3, r3
 8006628:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800663c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006640:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006642:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006644:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006648:	873b      	strh	r3, [r7, #56]	@ 0x38
 800664a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800664c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006650:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	441a      	add	r2, r3
 800665c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800665e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800666e:	b29b      	uxth	r3, r3
 8006670:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006684:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006688:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
 80066aa:	e0bc      	b.n	8006826 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80066bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80066c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01d      	beq.n	8006704 <USB_ActivateEndpoint+0x654>
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066de:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	441a      	add	r2, r3
 80066ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80066f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006700:	b29b      	uxth	r3, r3
 8006702:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01d      	beq.n	800675c <USB_ActivateEndpoint+0x6ac>
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006736:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800674c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006754:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006758:	b29b      	uxth	r3, r3
 800675a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	78db      	ldrb	r3, [r3, #3]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d024      	beq.n	80067ae <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800677e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006782:	f083 0320 	eor.w	r3, r3, #32
 8006786:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800679c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]
 80067ac:	e01d      	b.n	80067ea <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	441a      	add	r2, r3
 80067d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80067d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006800:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	441a      	add	r2, r3
 800680e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800681e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006826:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800682a:	4618      	mov	r0, r3
 800682c:	3774      	adds	r7, #116	@ 0x74
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop

08006838 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b08d      	sub	sp, #52	@ 0x34
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	7b1b      	ldrb	r3, [r3, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	f040 808e 	bne.w	8006968 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d044      	beq.n	80068de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	81bb      	strh	r3, [r7, #12]
 8006862:	89bb      	ldrh	r3, [r7, #12]
 8006864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01b      	beq.n	80068a4 <USB_DeactivateEndpoint+0x6c>
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006882:	817b      	strh	r3, [r7, #10]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	441a      	add	r2, r3
 800688e:	897b      	ldrh	r3, [r7, #10]
 8006890:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006894:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800689c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ba:	813b      	strh	r3, [r7, #8]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	441a      	add	r2, r3
 80068c6:	893b      	ldrh	r3, [r7, #8]
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]
 80068dc:	e192      	b.n	8006c04 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	827b      	strh	r3, [r7, #18]
 80068ec:	8a7b      	ldrh	r3, [r7, #18]
 80068ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01b      	beq.n	800692e <USB_DeactivateEndpoint+0xf6>
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	4413      	add	r3, r2
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690c:	823b      	strh	r3, [r7, #16]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	8a3b      	ldrh	r3, [r7, #16]
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006922:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006944:	81fb      	strh	r3, [r7, #14]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	441a      	add	r2, r3
 8006950:	89fb      	ldrh	r3, [r7, #14]
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800695a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800695e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]
 8006966:	e14d      	b.n	8006c04 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	785b      	ldrb	r3, [r3, #1]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 80a5 	bne.w	8006abc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	843b      	strh	r3, [r7, #32]
 8006980:	8c3b      	ldrh	r3, [r7, #32]
 8006982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01b      	beq.n	80069c2 <USB_DeactivateEndpoint+0x18a>
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	b29b      	uxth	r3, r3
 8006998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800699c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a0:	83fb      	strh	r3, [r7, #30]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	8bfb      	ldrh	r3, [r7, #30]
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	83bb      	strh	r3, [r7, #28]
 80069d0:	8bbb      	ldrh	r3, [r7, #28]
 80069d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d01b      	beq.n	8006a12 <USB_DeactivateEndpoint+0x1da>
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f0:	837b      	strh	r3, [r7, #26]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	441a      	add	r2, r3
 80069fc:	8b7b      	ldrh	r3, [r7, #26]
 80069fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a28:	833b      	strh	r3, [r7, #24]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	8b3b      	ldrh	r3, [r7, #24]
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a60:	82fb      	strh	r3, [r7, #22]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	8afb      	ldrh	r3, [r7, #22]
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a98:	82bb      	strh	r3, [r7, #20]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	441a      	add	r2, r3
 8006aa4:	8abb      	ldrh	r3, [r7, #20]
 8006aa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	8013      	strh	r3, [r2, #0]
 8006aba:	e0a3      	b.n	8006c04 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	881b      	ldrh	r3, [r3, #0]
 8006ac8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006aca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d01b      	beq.n	8006b0c <USB_DeactivateEndpoint+0x2d4>
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006af8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006afc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006b1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01b      	beq.n	8006b5c <USB_DeactivateEndpoint+0x324>
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	441a      	add	r2, r3
 8006b46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b72:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006baa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	441a      	add	r2, r3
 8006bb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3734      	adds	r7, #52	@ 0x34
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b0c2      	sub	sp, #264	@ 0x108
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c20:	6018      	str	r0, [r3, #0]
 8006c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	f040 86b7 	bne.w	80079ac <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d908      	bls.n	8006c6c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006c6a:	e007      	b.n	8006c7c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	7b1b      	ldrb	r3, [r3, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d13a      	bne.n	8006d02 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6959      	ldr	r1, [r3, #20]
 8006c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	88da      	ldrh	r2, [r3, #6]
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cb2:	6800      	ldr	r0, [r0, #0]
 8006cb4:	f001 fcc2 	bl	800863c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	613b      	str	r3, [r7, #16]
 8006cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	4413      	add	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	00da      	lsls	r2, r3, #3
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4413      	add	r3, r2
 8006cee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	801a      	strh	r2, [r3, #0]
 8006cfe:	f000 be1f 	b.w	8007940 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	78db      	ldrb	r3, [r3, #3]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	f040 8462 	bne.w	80075d8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6a1a      	ldr	r2, [r3, #32]
 8006d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	f240 83df 	bls.w	80074f0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d58:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	441a      	add	r2, r3
 8006d76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006d7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d82:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9e:	1ad2      	subs	r2, r2, r3
 8006da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 81c7 	beq.w	8007162 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d177      	bne.n	8006ee0 <USB_EPStartXfer+0x2ce>
 8006df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e10:	4413      	add	r3, r2
 8006e12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	00da      	lsls	r2, r3, #3
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	4413      	add	r3, r2
 8006e26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e40:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e42:	d921      	bls.n	8006e88 <USB_EPStartXfer+0x276>
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e52:	f003 031f 	and.w	r3, r3, #31
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d104      	bne.n	8006e64 <USB_EPStartXfer+0x252>
 8006e5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	029b      	lsls	r3, r3, #10
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	4313      	orrs	r3, r2
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e050      	b.n	8006f2a <USB_EPStartXfer+0x318>
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <USB_EPStartXfer+0x294>
 8006e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e041      	b.n	8006f2a <USB_EPStartXfer+0x318>
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d004      	beq.n	8006ec6 <USB_EPStartXfer+0x2b4>
 8006ebc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	029b      	lsls	r3, r3, #10
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	801a      	strh	r2, [r3, #0]
 8006ede:	e024      	b.n	8006f2a <USB_EPStartXfer+0x318>
 8006ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	785b      	ldrb	r3, [r3, #1]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d11c      	bne.n	8006f2a <USB_EPStartXfer+0x318>
 8006ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	4413      	add	r3, r2
 8006f06:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	00da      	lsls	r2, r3, #3
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	4413      	add	r3, r2
 8006f1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	895b      	ldrh	r3, [r3, #10]
 8006f36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6959      	ldr	r1, [r3, #20]
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f58:	6800      	ldr	r0, [r0, #0]
 8006f5a:	f001 fb6f 	bl	800863c <USB_WritePMA>
            ep->xfer_buff += len;
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6e:	441a      	add	r2, r3
 8006f70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6a1a      	ldr	r2, [r3, #32]
 8006f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d90f      	bls.n	8006fb8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6a1a      	ldr	r2, [r3, #32]
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa8:	1ad2      	subs	r2, r2, r3
 8006faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	621a      	str	r2, [r3, #32]
 8006fb6:	e00e      	b.n	8006fd6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d177      	bne.n	80070d6 <USB_EPStartXfer+0x4c4>
 8006fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007000:	b29b      	uxth	r3, r3
 8007002:	461a      	mov	r2, r3
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	4413      	add	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00da      	lsls	r2, r3, #3
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	4413      	add	r3, r2
 800701c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800702c:	b29a      	uxth	r2, r3
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007036:	2b3e      	cmp	r3, #62	@ 0x3e
 8007038:	d921      	bls.n	800707e <USB_EPStartXfer+0x46c>
 800703a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703e:	095b      	lsrs	r3, r3, #5
 8007040:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <USB_EPStartXfer+0x448>
 8007050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007054:	3b01      	subs	r3, #1
 8007056:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	b29a      	uxth	r2, r3
 8007060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007064:	b29b      	uxth	r3, r3
 8007066:	029b      	lsls	r3, r3, #10
 8007068:	b29b      	uxth	r3, r3
 800706a:	4313      	orrs	r3, r2
 800706c:	b29b      	uxth	r3, r3
 800706e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007076:	b29a      	uxth	r2, r3
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e056      	b.n	800712c <USB_EPStartXfer+0x51a>
 800707e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <USB_EPStartXfer+0x48a>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007094:	b29a      	uxth	r2, r3
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	e047      	b.n	800712c <USB_EPStartXfer+0x51a>
 800709c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a0:	085b      	lsrs	r3, r3, #1
 80070a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <USB_EPStartXfer+0x4aa>
 80070b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070b6:	3301      	adds	r3, #1
 80070b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	029b      	lsls	r3, r3, #10
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	4313      	orrs	r3, r2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	801a      	strh	r2, [r3, #0]
 80070d4:	e02a      	b.n	800712c <USB_EPStartXfer+0x51a>
 80070d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d122      	bne.n	800712c <USB_EPStartXfer+0x51a>
 80070e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	4413      	add	r3, r2
 8007108:	623b      	str	r3, [r7, #32]
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	00da      	lsls	r2, r3, #3
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	4413      	add	r3, r2
 800711c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007120:	61fb      	str	r3, [r7, #28]
 8007122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007126:	b29a      	uxth	r2, r3
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800712c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	891b      	ldrh	r3, [r3, #8]
 8007138:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800713c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6959      	ldr	r1, [r3, #20]
 8007148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714c:	b29b      	uxth	r3, r3
 800714e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007152:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007156:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800715a:	6800      	ldr	r0, [r0, #0]
 800715c:	f001 fa6e 	bl	800863c <USB_WritePMA>
 8007160:	e3ee      	b.n	8007940 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	785b      	ldrb	r3, [r3, #1]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d177      	bne.n	8007262 <USB_EPStartXfer+0x650>
 8007172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007176:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800717e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800718c:	b29b      	uxth	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007192:	4413      	add	r3, r2
 8007194:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	00da      	lsls	r2, r3, #3
 80071a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071bc:	801a      	strh	r2, [r3, #0]
 80071be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80071c4:	d921      	bls.n	800720a <USB_EPStartXfer+0x5f8>
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d4:	f003 031f 	and.w	r3, r3, #31
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <USB_EPStartXfer+0x5d4>
 80071dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071e0:	3b01      	subs	r3, #1
 80071e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80071e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	029b      	lsls	r3, r3, #10
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	4313      	orrs	r3, r2
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e056      	b.n	80072b8 <USB_EPStartXfer+0x6a6>
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <USB_EPStartXfer+0x616>
 8007212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007220:	b29a      	uxth	r2, r3
 8007222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	e047      	b.n	80072b8 <USB_EPStartXfer+0x6a6>
 8007228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d004      	beq.n	8007248 <USB_EPStartXfer+0x636>
 800723e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007242:	3301      	adds	r3, #1
 8007244:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	b29a      	uxth	r2, r3
 800724e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007252:	b29b      	uxth	r3, r3
 8007254:	029b      	lsls	r3, r3, #10
 8007256:	b29b      	uxth	r3, r3
 8007258:	4313      	orrs	r3, r2
 800725a:	b29a      	uxth	r2, r3
 800725c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	e02a      	b.n	80072b8 <USB_EPStartXfer+0x6a6>
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d122      	bne.n	80072b8 <USB_EPStartXfer+0x6a6>
 8007272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	653b      	str	r3, [r7, #80]	@ 0x50
 800727e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800728c:	b29b      	uxth	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007292:	4413      	add	r3, r2
 8007294:	653b      	str	r3, [r7, #80]	@ 0x50
 8007296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	00da      	lsls	r2, r3, #3
 80072a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072a6:	4413      	add	r3, r2
 80072a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	891b      	ldrh	r3, [r3, #8]
 80072c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6959      	ldr	r1, [r3, #20]
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072e6:	6800      	ldr	r0, [r0, #0]
 80072e8:	f001 f9a8 	bl	800863c <USB_WritePMA>
            ep->xfer_buff += len;
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695a      	ldr	r2, [r3, #20]
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	441a      	add	r2, r3
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800730a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6a1a      	ldr	r2, [r3, #32]
 8007316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	429a      	cmp	r2, r3
 8007324:	d90f      	bls.n	8007346 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6a1a      	ldr	r2, [r3, #32]
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007336:	1ad2      	subs	r2, r2, r3
 8007338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	621a      	str	r2, [r3, #32]
 8007344:	e00e      	b.n	8007364 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2200      	movs	r2, #0
 8007362:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	785b      	ldrb	r3, [r3, #1]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d177      	bne.n	8007470 <USB_EPStartXfer+0x85e>
 8007380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	4413      	add	r3, r2
 80073a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	00da      	lsls	r2, r3, #3
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	4413      	add	r3, r2
 80073b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80073ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80073bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80073d2:	d921      	bls.n	8007418 <USB_EPStartXfer+0x806>
 80073d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	f003 031f 	and.w	r3, r3, #31
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <USB_EPStartXfer+0x7e2>
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ee:	3b01      	subs	r3, #1
 80073f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80073f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fe:	b29b      	uxth	r3, r3
 8007400:	029b      	lsls	r3, r3, #10
 8007402:	b29b      	uxth	r3, r3
 8007404:	4313      	orrs	r3, r2
 8007406:	b29b      	uxth	r3, r3
 8007408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007410:	b29a      	uxth	r2, r3
 8007412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e050      	b.n	80074ba <USB_EPStartXfer+0x8a8>
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <USB_EPStartXfer+0x824>
 8007420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800742a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800742e:	b29a      	uxth	r2, r3
 8007430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e041      	b.n	80074ba <USB_EPStartXfer+0x8a8>
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <USB_EPStartXfer+0x844>
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007450:	3301      	adds	r3, #1
 8007452:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007458:	881b      	ldrh	r3, [r3, #0]
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007460:	b29b      	uxth	r3, r3
 8007462:	029b      	lsls	r3, r3, #10
 8007464:	b29b      	uxth	r3, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	b29a      	uxth	r2, r3
 800746a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e024      	b.n	80074ba <USB_EPStartXfer+0x8a8>
 8007470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d11c      	bne.n	80074ba <USB_EPStartXfer+0x8a8>
 8007480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800748e:	b29b      	uxth	r3, r3
 8007490:	461a      	mov	r2, r3
 8007492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007494:	4413      	add	r3, r2
 8007496:	643b      	str	r3, [r7, #64]	@ 0x40
 8007498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	00da      	lsls	r2, r3, #3
 80074a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074a8:	4413      	add	r3, r2
 80074aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	895b      	ldrh	r3, [r3, #10]
 80074c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6959      	ldr	r1, [r3, #20]
 80074d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074da:	b29b      	uxth	r3, r3
 80074dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80074e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80074e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80074e8:	6800      	ldr	r0, [r0, #0]
 80074ea:	f001 f8a7 	bl	800863c <USB_WritePMA>
 80074ee:	e227      	b.n	8007940 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80074f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007526:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800752a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	441a      	add	r2, r3
 8007544:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800754c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007558:	b29b      	uxth	r3, r3
 800755a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007576:	b29b      	uxth	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800757c:	4413      	add	r3, r2
 800757e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	00da      	lsls	r2, r3, #3
 800758e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007590:	4413      	add	r3, r2
 8007592:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007596:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800759c:	b29a      	uxth	r2, r3
 800759e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80075a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	891b      	ldrh	r3, [r3, #8]
 80075ae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80075b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6959      	ldr	r1, [r3, #20]
 80075be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80075c8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80075cc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80075d0:	6800      	ldr	r0, [r0, #0]
 80075d2:	f001 f833 	bl	800863c <USB_WritePMA>
 80075d6:	e1b3      	b.n	8007940 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80075d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e8:	1ad2      	subs	r2, r2, r3
 80075ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80075f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	b29b      	uxth	r3, r3
 8007614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 80c6 	beq.w	80077aa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800761e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	673b      	str	r3, [r7, #112]	@ 0x70
 800762a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d177      	bne.n	800772a <USB_EPStartXfer+0xb18>
 800763a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007654:	b29b      	uxth	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800765a:	4413      	add	r3, r2
 800765c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800765e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007662:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	00da      	lsls	r2, r3, #3
 800766c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800766e:	4413      	add	r3, r2
 8007670:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007674:	667b      	str	r3, [r7, #100]	@ 0x64
 8007676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007680:	b29a      	uxth	r2, r3
 8007682:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800768a:	2b3e      	cmp	r3, #62	@ 0x3e
 800768c:	d921      	bls.n	80076d2 <USB_EPStartXfer+0xac0>
 800768e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <USB_EPStartXfer+0xa9c>
 80076a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80076a8:	3b01      	subs	r3, #1
 80076aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80076ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	029b      	lsls	r3, r3, #10
 80076bc:	b29b      	uxth	r3, r3
 80076be:	4313      	orrs	r3, r2
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ce:	801a      	strh	r2, [r3, #0]
 80076d0:	e050      	b.n	8007774 <USB_EPStartXfer+0xb62>
 80076d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <USB_EPStartXfer+0xade>
 80076da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e041      	b.n	8007774 <USB_EPStartXfer+0xb62>
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f4:	085b      	lsrs	r3, r3, #1
 80076f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d004      	beq.n	8007710 <USB_EPStartXfer+0xafe>
 8007706:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800770a:	3301      	adds	r3, #1
 800770c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800771a:	b29b      	uxth	r3, r3
 800771c:	029b      	lsls	r3, r3, #10
 800771e:	b29b      	uxth	r3, r3
 8007720:	4313      	orrs	r3, r2
 8007722:	b29a      	uxth	r2, r3
 8007724:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007726:	801a      	strh	r2, [r3, #0]
 8007728:	e024      	b.n	8007774 <USB_EPStartXfer+0xb62>
 800772a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d11c      	bne.n	8007774 <USB_EPStartXfer+0xb62>
 800773a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007748:	b29b      	uxth	r3, r3
 800774a:	461a      	mov	r2, r3
 800774c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800774e:	4413      	add	r3, r2
 8007750:	673b      	str	r3, [r7, #112]	@ 0x70
 8007752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	00da      	lsls	r2, r3, #3
 8007760:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007762:	4413      	add	r3, r2
 8007764:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007768:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800776a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800776e:	b29a      	uxth	r2, r3
 8007770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007772:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	895b      	ldrh	r3, [r3, #10]
 8007780:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6959      	ldr	r1, [r3, #20]
 8007790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007794:	b29b      	uxth	r3, r3
 8007796:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800779a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800779e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80077a2:	6800      	ldr	r0, [r0, #0]
 80077a4:	f000 ff4a 	bl	800863c <USB_WritePMA>
 80077a8:	e0ca      	b.n	8007940 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d177      	bne.n	80078aa <USB_EPStartXfer+0xc98>
 80077ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	461a      	mov	r2, r3
 80077d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077da:	4413      	add	r3, r2
 80077dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	00da      	lsls	r2, r3, #3
 80077ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077ee:	4413      	add	r3, r2
 80077f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80077f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007800:	b29a      	uxth	r2, r3
 8007802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780a:	2b3e      	cmp	r3, #62	@ 0x3e
 800780c:	d921      	bls.n	8007852 <USB_EPStartXfer+0xc40>
 800780e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <USB_EPStartXfer+0xc1c>
 8007824:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007828:	3b01      	subs	r3, #1
 800782a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800782e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29a      	uxth	r2, r3
 8007834:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007838:	b29b      	uxth	r3, r3
 800783a:	029b      	lsls	r3, r3, #10
 800783c:	b29b      	uxth	r3, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	b29b      	uxth	r3, r3
 8007842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800784a:	b29a      	uxth	r2, r3
 800784c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	e05c      	b.n	800790c <USB_EPStartXfer+0xcfa>
 8007852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <USB_EPStartXfer+0xc5e>
 800785a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007868:	b29a      	uxth	r2, r3
 800786a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	e04d      	b.n	800790c <USB_EPStartXfer+0xcfa>
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007874:	085b      	lsrs	r3, r3, #1
 8007876:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d004      	beq.n	8007890 <USB_EPStartXfer+0xc7e>
 8007886:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800788a:	3301      	adds	r3, #1
 800788c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007890:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007892:	881b      	ldrh	r3, [r3, #0]
 8007894:	b29a      	uxth	r2, r3
 8007896:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800789a:	b29b      	uxth	r3, r3
 800789c:	029b      	lsls	r3, r3, #10
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4313      	orrs	r3, r2
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078a6:	801a      	strh	r2, [r3, #0]
 80078a8:	e030      	b.n	800790c <USB_EPStartXfer+0xcfa>
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d128      	bne.n	800790c <USB_EPStartXfer+0xcfa>
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078de:	4413      	add	r3, r2
 80078e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	00da      	lsls	r2, r3, #3
 80078f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078f6:	4413      	add	r3, r2
 80078f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80078fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	b29a      	uxth	r2, r3
 8007906:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800790a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	891b      	ldrh	r3, [r3, #8]
 8007918:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6959      	ldr	r1, [r3, #20]
 8007928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792c:	b29b      	uxth	r3, r3
 800792e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007932:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007936:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	f000 fe7e 	bl	800863c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007966:	817b      	strh	r3, [r7, #10]
 8007968:	897b      	ldrh	r3, [r7, #10]
 800796a:	f083 0310 	eor.w	r3, r3, #16
 800796e:	817b      	strh	r3, [r7, #10]
 8007970:	897b      	ldrh	r3, [r7, #10]
 8007972:	f083 0320 	eor.w	r3, r3, #32
 8007976:	817b      	strh	r3, [r7, #10]
 8007978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	441a      	add	r2, r3
 8007992:	897b      	ldrh	r3, [r7, #10]
 8007994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800799c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	8013      	strh	r3, [r2, #0]
 80079a8:	f000 bcde 	b.w	8008368 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	7b1b      	ldrb	r3, [r3, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f040 80bb 	bne.w	8007b34 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80079be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d917      	bls.n	8007a0a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80079da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fa:	1ad2      	subs	r2, r2, r3
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	619a      	str	r2, [r3, #24]
 8007a08:	e00e      	b.n	8007a28 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2200      	movs	r2, #0
 8007a26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	00da      	lsls	r2, r3, #3
 8007a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a64:	4413      	add	r3, r2
 8007a66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a80:	801a      	strh	r2, [r3, #0]
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a86:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a88:	d924      	bls.n	8007ad4 <USB_EPStartXfer+0xec2>
 8007a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a98:	f003 031f 	and.w	r3, r3, #31
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <USB_EPStartXfer+0xe98>
 8007aa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	029b      	lsls	r3, r3, #10
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	4313      	orrs	r3, r2
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ace:	801a      	strh	r2, [r3, #0]
 8007ad0:	f000 bc10 	b.w	80082f4 <USB_EPStartXfer+0x16e2>
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10c      	bne.n	8007af6 <USB_EPStartXfer+0xee4>
 8007adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	e3fe      	b.n	80082f4 <USB_EPStartXfer+0x16e2>
 8007af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007afa:	085b      	lsrs	r3, r3, #1
 8007afc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d004      	beq.n	8007b16 <USB_EPStartXfer+0xf04>
 8007b0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007b10:	3301      	adds	r3, #1
 8007b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	029b      	lsls	r3, r3, #10
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b30:	801a      	strh	r2, [r3, #0]
 8007b32:	e3df      	b.n	80082f4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	78db      	ldrb	r3, [r3, #3]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	f040 8218 	bne.w	8007f76 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f040 809d 	bne.w	8007c92 <USB_EPStartXfer+0x1080>
 8007b58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	00da      	lsls	r2, r3, #3
 8007b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b94:	4413      	add	r3, r2
 8007b96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bc0:	d92b      	bls.n	8007c1a <USB_EPStartXfer+0x1008>
 8007bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	095b      	lsrs	r3, r3, #5
 8007bd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f003 031f 	and.w	r3, r3, #31
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <USB_EPStartXfer+0xfe0>
 8007be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bec:	3b01      	subs	r3, #1
 8007bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	029b      	lsls	r3, r3, #10
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	4313      	orrs	r3, r2
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	e070      	b.n	8007cfc <USB_EPStartXfer+0x10ea>
 8007c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10c      	bne.n	8007c44 <USB_EPStartXfer+0x1032>
 8007c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c2e:	881b      	ldrh	r3, [r3, #0]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c40:	801a      	strh	r2, [r3, #0]
 8007c42:	e05b      	b.n	8007cfc <USB_EPStartXfer+0x10ea>
 8007c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	085b      	lsrs	r3, r3, #1
 8007c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <USB_EPStartXfer+0x1062>
 8007c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c6e:	3301      	adds	r3, #1
 8007c70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	029b      	lsls	r3, r3, #10
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	4313      	orrs	r3, r2
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	e034      	b.n	8007cfc <USB_EPStartXfer+0x10ea>
 8007c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d12c      	bne.n	8007cfc <USB_EPStartXfer+0x10ea>
 8007ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	00da      	lsls	r2, r3, #3
 8007cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cde:	4413      	add	r3, r2
 8007ce0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	785b      	ldrb	r3, [r3, #1]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f040 809d 	bne.w	8007e56 <USB_EPStartXfer+0x1244>
 8007d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d40:	4413      	add	r3, r2
 8007d42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	00da      	lsls	r2, r3, #3
 8007d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d58:	4413      	add	r3, r2
 8007d5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d74:	801a      	strh	r2, [r3, #0]
 8007d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d84:	d92b      	bls.n	8007dde <USB_EPStartXfer+0x11cc>
 8007d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f003 031f 	and.w	r3, r3, #31
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d104      	bne.n	8007db6 <USB_EPStartXfer+0x11a4>
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db0:	3b01      	subs	r3, #1
 8007db2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007db6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	029b      	lsls	r3, r3, #10
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dda:	801a      	strh	r2, [r3, #0]
 8007ddc:	e069      	b.n	8007eb2 <USB_EPStartXfer+0x12a0>
 8007dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10c      	bne.n	8007e08 <USB_EPStartXfer+0x11f6>
 8007dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	e054      	b.n	8007eb2 <USB_EPStartXfer+0x12a0>
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	085b      	lsrs	r3, r3, #1
 8007e16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d004      	beq.n	8007e38 <USB_EPStartXfer+0x1226>
 8007e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e32:	3301      	adds	r3, #1
 8007e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	e02d      	b.n	8007eb2 <USB_EPStartXfer+0x12a0>
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d125      	bne.n	8007eb2 <USB_EPStartXfer+0x12a0>
 8007e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	461a      	mov	r2, r3
 8007e78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	00da      	lsls	r2, r3, #3
 8007e90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e94:	4413      	add	r3, r2
 8007e96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007eb0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 8218 	beq.w	80082f4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007ee4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <USB_EPStartXfer+0x12ea>
 8007ef0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10d      	bne.n	8007f18 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007efc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007f00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f040 81f5 	bne.w	80082f4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007f0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f040 81ee 	bne.w	80082f4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007f18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f3e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007f42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	8013      	strh	r3, [r2, #0]
 8007f74:	e1be      	b.n	80082f4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	78db      	ldrb	r3, [r3, #3]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	f040 81b4 	bne.w	80082f0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	699a      	ldr	r2, [r3, #24]
 8007f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d917      	bls.n	8007fd4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	699a      	ldr	r2, [r3, #24]
 8007fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc4:	1ad2      	subs	r2, r2, r3
 8007fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	619a      	str	r2, [r3, #24]
 8007fd2:	e00e      	b.n	8007ff2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 8085 	bne.w	800810e <USB_EPStartXfer+0x14fc>
 8008004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008008:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008016:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008020:	b29b      	uxth	r3, r3
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008028:	4413      	add	r3, r2
 800802a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800802e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	00da      	lsls	r2, r3, #3
 800803c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008040:	4413      	add	r3, r2
 8008042:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008046:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800804a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800804e:	881b      	ldrh	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008056:	b29a      	uxth	r2, r3
 8008058:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800805c:	801a      	strh	r2, [r3, #0]
 800805e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008062:	2b3e      	cmp	r3, #62	@ 0x3e
 8008064:	d923      	bls.n	80080ae <USB_EPStartXfer+0x149c>
 8008066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008074:	f003 031f 	and.w	r3, r3, #31
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <USB_EPStartXfer+0x1474>
 800807c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008080:	3b01      	subs	r3, #1
 8008082:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	b29a      	uxth	r2, r3
 800808e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008092:	b29b      	uxth	r3, r3
 8008094:	029b      	lsls	r3, r3, #10
 8008096:	b29b      	uxth	r3, r3
 8008098:	4313      	orrs	r3, r2
 800809a:	b29b      	uxth	r3, r3
 800809c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	e060      	b.n	8008170 <USB_EPStartXfer+0x155e>
 80080ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10c      	bne.n	80080d0 <USB_EPStartXfer+0x14be>
 80080b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080cc:	801a      	strh	r2, [r3, #0]
 80080ce:	e04f      	b.n	8008170 <USB_EPStartXfer+0x155e>
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080d4:	085b      	lsrs	r3, r3, #1
 80080d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080de:	f003 0301 	and.w	r3, r3, #1
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <USB_EPStartXfer+0x14de>
 80080e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080ea:	3301      	adds	r3, #1
 80080ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80080f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	029b      	lsls	r3, r3, #10
 8008100:	b29b      	uxth	r3, r3
 8008102:	4313      	orrs	r3, r2
 8008104:	b29a      	uxth	r2, r3
 8008106:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e030      	b.n	8008170 <USB_EPStartXfer+0x155e>
 800810e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d128      	bne.n	8008170 <USB_EPStartXfer+0x155e>
 800811e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800812c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008130:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800813a:	b29b      	uxth	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008142:	4413      	add	r3, r2
 8008144:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800814c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	00da      	lsls	r2, r3, #3
 8008156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800815a:	4413      	add	r3, r2
 800815c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008168:	b29a      	uxth	r2, r3
 800816a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800816e:	801a      	strh	r2, [r3, #0]
 8008170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800817e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f040 8085 	bne.w	800829a <USB_EPStartXfer+0x1688>
 8008190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008194:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800819e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	461a      	mov	r2, r3
 80081b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081b4:	4413      	add	r3, r2
 80081b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80081ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	00da      	lsls	r2, r3, #3
 80081c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80081cc:	4413      	add	r3, r2
 80081ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80081e8:	801a      	strh	r2, [r3, #0]
 80081ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80081f0:	d923      	bls.n	800823a <USB_EPStartXfer+0x1628>
 80081f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008200:	f003 031f 	and.w	r3, r3, #31
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <USB_EPStartXfer+0x1600>
 8008208:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800820c:	3b01      	subs	r3, #1
 800820e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	b29a      	uxth	r2, r3
 800821a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800821e:	b29b      	uxth	r3, r3
 8008220:	029b      	lsls	r3, r3, #10
 8008222:	b29b      	uxth	r3, r3
 8008224:	4313      	orrs	r3, r2
 8008226:	b29b      	uxth	r3, r3
 8008228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800822c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008230:	b29a      	uxth	r2, r3
 8008232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008236:	801a      	strh	r2, [r3, #0]
 8008238:	e05c      	b.n	80082f4 <USB_EPStartXfer+0x16e2>
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10c      	bne.n	800825c <USB_EPStartXfer+0x164a>
 8008242:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b29b      	uxth	r3, r3
 800824a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800824e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008252:	b29a      	uxth	r2, r3
 8008254:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008258:	801a      	strh	r2, [r3, #0]
 800825a:	e04b      	b.n	80082f4 <USB_EPStartXfer+0x16e2>
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008260:	085b      	lsrs	r3, r3, #1
 8008262:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	2b00      	cmp	r3, #0
 8008270:	d004      	beq.n	800827c <USB_EPStartXfer+0x166a>
 8008272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008276:	3301      	adds	r3, #1
 8008278:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800827c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	b29a      	uxth	r2, r3
 8008284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008288:	b29b      	uxth	r3, r3
 800828a:	029b      	lsls	r3, r3, #10
 800828c:	b29b      	uxth	r3, r3
 800828e:	4313      	orrs	r3, r2
 8008290:	b29a      	uxth	r2, r3
 8008292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e02c      	b.n	80082f4 <USB_EPStartXfer+0x16e2>
 800829a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d124      	bne.n	80082f4 <USB_EPStartXfer+0x16e2>
 80082aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	461a      	mov	r2, r3
 80082bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082c0:	4413      	add	r3, r2
 80082c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	00da      	lsls	r2, r3, #3
 80082d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082d8:	4413      	add	r3, r2
 80082da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082ec:	801a      	strh	r2, [r3, #0]
 80082ee:	e001      	b.n	80082f4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e03a      	b.n	800836a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80082f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	b29b      	uxth	r3, r3
 8008312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800831e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008322:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008326:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800832a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800832e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008332:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	441a      	add	r2, r3
 8008350:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800835c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008364:	b29b      	uxth	r3, r3
 8008366:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d020      	beq.n	80083c8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29b      	uxth	r3, r3
 8008394:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800839c:	81bb      	strh	r3, [r7, #12]
 800839e:	89bb      	ldrh	r3, [r7, #12]
 80083a0:	f083 0310 	eor.w	r3, r3, #16
 80083a4:	81bb      	strh	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	441a      	add	r2, r3
 80083b0:	89bb      	ldrh	r3, [r7, #12]
 80083b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	8013      	strh	r3, [r2, #0]
 80083c6:	e01f      	b.n	8008408 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083de:	81fb      	strh	r3, [r7, #14]
 80083e0:	89fb      	ldrh	r3, [r7, #14]
 80083e2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80083e6:	81fb      	strh	r3, [r7, #14]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	441a      	add	r2, r3
 80083f2:	89fb      	ldrh	r3, [r7, #14]
 80083f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008404:	b29b      	uxth	r3, r3
 8008406:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008416:	b480      	push	{r7}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	7b1b      	ldrb	r3, [r3, #12]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f040 809d 	bne.w	8008564 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	785b      	ldrb	r3, [r3, #1]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d04c      	beq.n	80084cc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	823b      	strh	r3, [r7, #16]
 8008440:	8a3b      	ldrh	r3, [r7, #16]
 8008442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d01b      	beq.n	8008482 <USB_EPClearStall+0x6c>
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	b29b      	uxth	r3, r3
 8008458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800845c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008460:	81fb      	strh	r3, [r7, #14]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	441a      	add	r2, r3
 800846c:	89fb      	ldrh	r3, [r7, #14]
 800846e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800847a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800847e:	b29b      	uxth	r3, r3
 8008480:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	78db      	ldrb	r3, [r3, #3]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d06c      	beq.n	8008564 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800849c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a0:	81bb      	strh	r3, [r7, #12]
 80084a2:	89bb      	ldrh	r3, [r7, #12]
 80084a4:	f083 0320 	eor.w	r3, r3, #32
 80084a8:	81bb      	strh	r3, [r7, #12]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	441a      	add	r2, r3
 80084b4:	89bb      	ldrh	r3, [r7, #12]
 80084b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	8013      	strh	r3, [r2, #0]
 80084ca:	e04b      	b.n	8008564 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	82fb      	strh	r3, [r7, #22]
 80084da:	8afb      	ldrh	r3, [r7, #22]
 80084dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d01b      	beq.n	800851c <USB_EPClearStall+0x106>
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fa:	82bb      	strh	r3, [r7, #20]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	441a      	add	r2, r3
 8008506:	8abb      	ldrh	r3, [r7, #20]
 8008508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800850c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008510:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008518:	b29b      	uxth	r3, r3
 800851a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800852e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008532:	827b      	strh	r3, [r7, #18]
 8008534:	8a7b      	ldrh	r3, [r7, #18]
 8008536:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800853a:	827b      	strh	r3, [r7, #18]
 800853c:	8a7b      	ldrh	r3, [r7, #18]
 800853e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008542:	827b      	strh	r3, [r7, #18]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	441a      	add	r2, r3
 800854e:	8a7b      	ldrh	r3, [r7, #18]
 8008550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008558:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800855c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008560:	b29b      	uxth	r3, r3
 8008562:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	460b      	mov	r3, r1
 800857c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2280      	movs	r2, #128	@ 0x80
 8008588:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80085da:	68fb      	ldr	r3, [r7, #12]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USB_ActivateRemoteWakeup>:
  * @brief  USB_ActivateRemoteWakeup : active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateRemoteWakeup(USB_TypeDef *USBx)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  USBx->CNTR |= (uint16_t)USB_CNTR_RESUME;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f043 0310 	orr.w	r3, r3, #16
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <USB_DeActivateRemoteWakeup>:
  * @brief  USB_DeActivateRemoteWakeup de-active remote wakeup signalling
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeActivateRemoteWakeup(USB_TypeDef *USBx)
{
 8008612:	b480      	push	{r7}
 8008614:	b083      	sub	sp, #12
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USBx->CNTR &= (uint16_t)(~USB_CNTR_RESUME);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008620:	b29b      	uxth	r3, r3
 8008622:	f023 0310 	bic.w	r3, r3, #16
 8008626:	b29a      	uxth	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800863c:	b480      	push	{r7}
 800863e:	b08b      	sub	sp, #44	@ 0x2c
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	4611      	mov	r1, r2
 8008648:	461a      	mov	r2, r3
 800864a:	460b      	mov	r3, r1
 800864c:	80fb      	strh	r3, [r7, #6]
 800864e:	4613      	mov	r3, r2
 8008650:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008652:	88bb      	ldrh	r3, [r7, #4]
 8008654:	3301      	adds	r3, #1
 8008656:	085b      	lsrs	r3, r3, #1
 8008658:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008662:	88fa      	ldrh	r2, [r7, #6]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800866c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	627b      	str	r3, [r7, #36]	@ 0x24
 8008672:	e01b      	b.n	80086ac <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	3301      	adds	r3, #1
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	021b      	lsls	r3, r3, #8
 8008682:	b21a      	sxth	r2, r3
 8008684:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008688:	4313      	orrs	r3, r2
 800868a:	b21b      	sxth	r3, r3
 800868c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	8a7a      	ldrh	r2, [r7, #18]
 8008692:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	3302      	adds	r3, #2
 8008698:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	3301      	adds	r3, #1
 800869e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	3301      	adds	r3, #1
 80086a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80086a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a8:	3b01      	subs	r3, #1
 80086aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e0      	bne.n	8008674 <USB_WritePMA+0x38>
  }
}
 80086b2:	bf00      	nop
 80086b4:	bf00      	nop
 80086b6:	372c      	adds	r7, #44	@ 0x2c
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b08b      	sub	sp, #44	@ 0x2c
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4611      	mov	r1, r2
 80086cc:	461a      	mov	r2, r3
 80086ce:	460b      	mov	r3, r1
 80086d0:	80fb      	strh	r3, [r7, #6]
 80086d2:	4613      	mov	r3, r2
 80086d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80086d6:	88bb      	ldrh	r3, [r7, #4]
 80086d8:	085b      	lsrs	r3, r3, #1
 80086da:	b29b      	uxth	r3, r3
 80086dc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80086e6:	88fa      	ldrh	r2, [r7, #6]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f6:	e018      	b.n	800872a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	881b      	ldrh	r3, [r3, #0]
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	3302      	adds	r3, #2
 8008704:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	b2da      	uxtb	r2, r3
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	3301      	adds	r3, #1
 8008712:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	0a1b      	lsrs	r3, r3, #8
 8008718:	b2da      	uxtb	r2, r3
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	3301      	adds	r3, #1
 8008722:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	3b01      	subs	r3, #1
 8008728:	627b      	str	r3, [r7, #36]	@ 0x24
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e3      	bne.n	80086f8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008730:	88bb      	ldrh	r3, [r7, #4]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	881b      	ldrh	r3, [r3, #0]
 8008740:	b29b      	uxth	r3, r3
 8008742:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	b2da      	uxtb	r2, r3
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	701a      	strb	r2, [r3, #0]
  }
}
 800874c:	bf00      	nop
 800874e:	372c      	adds	r7, #44	@ 0x2c
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800876c:	2303      	movs	r3, #3
 800876e:	e01f      	b.n	80087b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	79fa      	ldrb	r2, [r7, #7]
 80087a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f7f8 fb7b 	bl	8000ea0 <USBD_LL_Init>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087c2:	2300      	movs	r3, #0
 80087c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e025      	b.n	800881c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	32ae      	adds	r2, #174	@ 0xae
 80087e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00f      	beq.n	800880c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	32ae      	adds	r2, #174	@ 0xae
 80087f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	f107 020e 	add.w	r2, r7, #14
 8008800:	4610      	mov	r0, r2
 8008802:	4798      	blx	r3
 8008804:	4602      	mov	r2, r0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7f8 fb87 	bl	8000f40 <USBD_LL_Start>
 8008832:	4603      	mov	r3, r0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008868:	2b00      	cmp	r3, #0
 800886a:	d009      	beq.n	8008880 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	78fa      	ldrb	r2, [r7, #3]
 8008876:	4611      	mov	r1, r2
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	4798      	blx	r3
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	460b      	mov	r3, r1
 8008894:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f001 f87a 	bl	80099ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80088f2:	f003 031f 	and.w	r3, r3, #31
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d01a      	beq.n	8008930 <USBD_LL_SetupStage+0x72>
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d822      	bhi.n	8008944 <USBD_LL_SetupStage+0x86>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <USBD_LL_SetupStage+0x4a>
 8008902:	2b01      	cmp	r3, #1
 8008904:	d00a      	beq.n	800891c <USBD_LL_SetupStage+0x5e>
 8008906:	e01d      	b.n	8008944 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 fad1 	bl	8008eb8 <USBD_StdDevReq>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]
      break;
 800891a:	e020      	b.n	800895e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fb39 	bl	8008f9c <USBD_StdItfReq>
 800892a:	4603      	mov	r3, r0
 800892c:	73fb      	strb	r3, [r7, #15]
      break;
 800892e:	e016      	b.n	800895e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 fb9b 	bl	8009074 <USBD_StdEPReq>
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
      break;
 8008942:	e00c      	b.n	800895e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800894a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800894e:	b2db      	uxtb	r3, r3
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7f8 fb54 	bl	8001000 <USBD_LL_StallEP>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
      break;
 800895c:	bf00      	nop
  }

  return ret;
 800895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	460b      	mov	r3, r1
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d16e      	bne.n	8008a5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008986:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800898e:	2b03      	cmp	r3, #3
 8008990:	f040 8098 	bne.w	8008ac4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	429a      	cmp	r2, r3
 800899e:	d913      	bls.n	80089c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	1ad2      	subs	r2, r2, r3
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	4293      	cmp	r3, r2
 80089b8:	bf28      	it	cs
 80089ba:	4613      	movcs	r3, r2
 80089bc:	461a      	mov	r2, r3
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f001 fb33 	bl	800a02c <USBD_CtlContinueRx>
 80089c6:	e07d      	b.n	8008ac4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d014      	beq.n	8008a00 <USBD_LL_DataOutStage+0x98>
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d81d      	bhi.n	8008a16 <USBD_LL_DataOutStage+0xae>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <USBD_LL_DataOutStage+0x7c>
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d003      	beq.n	80089ea <USBD_LL_DataOutStage+0x82>
 80089e2:	e018      	b.n	8008a16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80089e4:	2300      	movs	r3, #0
 80089e6:	75bb      	strb	r3, [r7, #22]
            break;
 80089e8:	e018      	b.n	8008a1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	4619      	mov	r1, r3
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 f9d2 	bl	8008d9e <USBD_CoreFindIF>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75bb      	strb	r3, [r7, #22]
            break;
 80089fe:	e00d      	b.n	8008a1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	4619      	mov	r1, r3
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f000 f9d4 	bl	8008db8 <USBD_CoreFindEP>
 8008a10:	4603      	mov	r3, r0
 8008a12:	75bb      	strb	r3, [r7, #22]
            break;
 8008a14:	e002      	b.n	8008a1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	75bb      	strb	r3, [r7, #22]
            break;
 8008a1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a1c:	7dbb      	ldrb	r3, [r7, #22]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d119      	bne.n	8008a56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d113      	bne.n	8008a56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a2e:	7dba      	ldrb	r2, [r7, #22]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	32ae      	adds	r2, #174	@ 0xae
 8008a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00b      	beq.n	8008a56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a3e:	7dba      	ldrb	r2, [r7, #22]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a46:	7dba      	ldrb	r2, [r7, #22]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	32ae      	adds	r2, #174	@ 0xae
 8008a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f001 faf9 	bl	800a04e <USBD_CtlSendStatus>
 8008a5c:	e032      	b.n	8008ac4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a5e:	7afb      	ldrb	r3, [r7, #11]
 8008a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	4619      	mov	r1, r3
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f9a5 	bl	8008db8 <USBD_CoreFindEP>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a72:	7dbb      	ldrb	r3, [r7, #22]
 8008a74:	2bff      	cmp	r3, #255	@ 0xff
 8008a76:	d025      	beq.n	8008ac4 <USBD_LL_DataOutStage+0x15c>
 8008a78:	7dbb      	ldrb	r3, [r7, #22]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d122      	bne.n	8008ac4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d117      	bne.n	8008aba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a8a:	7dba      	ldrb	r2, [r7, #22]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	32ae      	adds	r2, #174	@ 0xae
 8008a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00f      	beq.n	8008aba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a9a:	7dba      	ldrb	r2, [r7, #22]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008aa2:	7dba      	ldrb	r2, [r7, #22]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	32ae      	adds	r2, #174	@ 0xae
 8008aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	7afa      	ldrb	r2, [r7, #11]
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	4798      	blx	r3
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008aba:	7dfb      	ldrb	r3, [r7, #23]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	e000      	b.n	8008ac6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b086      	sub	sp, #24
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	60f8      	str	r0, [r7, #12]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	607a      	str	r2, [r7, #4]
 8008ada:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d16f      	bne.n	8008bc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	3314      	adds	r3, #20
 8008ae6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d15a      	bne.n	8008ba8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	689a      	ldr	r2, [r3, #8]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d914      	bls.n	8008b28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6879      	ldr	r1, [r7, #4]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f001 fa78 	bl	800a00a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2100      	movs	r1, #0
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7f8 fb17 	bl	8001154 <USBD_LL_PrepareReceive>
 8008b26:	e03f      	b.n	8008ba8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	68da      	ldr	r2, [r3, #12]
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d11c      	bne.n	8008b6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d316      	bcc.n	8008b6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d20f      	bcs.n	8008b6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2100      	movs	r1, #0
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f001 fa59 	bl	800a00a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b60:	2300      	movs	r3, #0
 8008b62:	2200      	movs	r2, #0
 8008b64:	2100      	movs	r1, #0
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7f8 faf4 	bl	8001154 <USBD_LL_PrepareReceive>
 8008b6c:	e01c      	b.n	8008ba8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d10f      	bne.n	8008b9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d009      	beq.n	8008b9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b9a:	2180      	movs	r1, #128	@ 0x80
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7f8 fa2f 	bl	8001000 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f001 fa66 	bl	800a074 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d03a      	beq.n	8008c28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f7ff fe42 	bl	800883c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008bc0:	e032      	b.n	8008c28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008bc2:	7afb      	ldrb	r3, [r7, #11]
 8008bc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	4619      	mov	r1, r3
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 f8f3 	bl	8008db8 <USBD_CoreFindEP>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	2bff      	cmp	r3, #255	@ 0xff
 8008bda:	d025      	beq.n	8008c28 <USBD_LL_DataInStage+0x15a>
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d122      	bne.n	8008c28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d11c      	bne.n	8008c28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008bee:	7dfa      	ldrb	r2, [r7, #23]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	32ae      	adds	r2, #174	@ 0xae
 8008bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d014      	beq.n	8008c28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008bfe:	7dfa      	ldrb	r2, [r7, #23]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008c06:	7dfa      	ldrb	r2, [r7, #23]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	32ae      	adds	r2, #174	@ 0xae
 8008c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	7afa      	ldrb	r2, [r7, #11]
 8008c14:	4611      	mov	r1, r2
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	4798      	blx	r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c1e:	7dbb      	ldrb	r3, [r7, #22]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c24:	7dbb      	ldrb	r3, [r7, #22]
 8008c26:	e000      	b.n	8008c2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d014      	beq.n	8008c98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00e      	beq.n	8008c98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	6852      	ldr	r2, [r2, #4]
 8008c86:	b2d2      	uxtb	r2, r2
 8008c88:	4611      	mov	r1, r2
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	4798      	blx	r3
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c94:	2303      	movs	r3, #3
 8008c96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c98:	2340      	movs	r3, #64	@ 0x40
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7f8 f969 	bl	8000f76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2240      	movs	r2, #64	@ 0x40
 8008cb0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008cb4:	2340      	movs	r3, #64	@ 0x40
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	2180      	movs	r1, #128	@ 0x80
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7f8 f95b 	bl	8000f76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2240      	movs	r2, #64	@ 0x40
 8008cca:	621a      	str	r2, [r3, #32]

  return ret;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b04      	cmp	r3, #4
 8008d08:	d006      	beq.n	8008d18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2204      	movs	r2, #4
 8008d1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d106      	bne.n	8008d50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b03      	cmp	r3, #3
 8008d70:	d110      	bne.n	8008d94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00b      	beq.n	8008d94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008daa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008dc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b086      	sub	sp, #24
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	885b      	ldrh	r3, [r3, #2]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	7812      	ldrb	r2, [r2, #0]
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d91f      	bls.n	8008e38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008dfe:	e013      	b.n	8008e28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008e00:	f107 030a 	add.w	r3, r7, #10
 8008e04:	4619      	mov	r1, r3
 8008e06:	6978      	ldr	r0, [r7, #20]
 8008e08:	f000 f81b 	bl	8008e42 <USBD_GetNextDesc>
 8008e0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	785b      	ldrb	r3, [r3, #1]
 8008e12:	2b05      	cmp	r3, #5
 8008e14:	d108      	bne.n	8008e28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	789b      	ldrb	r3, [r3, #2]
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d008      	beq.n	8008e36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008e24:	2300      	movs	r3, #0
 8008e26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	885b      	ldrh	r3, [r3, #2]
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	897b      	ldrh	r3, [r7, #10]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d8e5      	bhi.n	8008e00 <USBD_GetEpDesc+0x2e>
 8008e34:	e000      	b.n	8008e38 <USBD_GetEpDesc+0x66>
          break;
 8008e36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008e38:	693b      	ldr	r3, [r7, #16]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	4413      	add	r3, r2
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4413      	add	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b087      	sub	sp, #28
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e98:	8a3b      	ldrh	r3, [r7, #16]
 8008e9a:	021b      	lsls	r3, r3, #8
 8008e9c:	b21a      	sxth	r2, r3
 8008e9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	b21b      	sxth	r3, r3
 8008ea6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ea8:	89fb      	ldrh	r3, [r7, #14]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
	...

08008eb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ece:	2b40      	cmp	r3, #64	@ 0x40
 8008ed0:	d005      	beq.n	8008ede <USBD_StdDevReq+0x26>
 8008ed2:	2b40      	cmp	r3, #64	@ 0x40
 8008ed4:	d857      	bhi.n	8008f86 <USBD_StdDevReq+0xce>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00f      	beq.n	8008efa <USBD_StdDevReq+0x42>
 8008eda:	2b20      	cmp	r3, #32
 8008edc:	d153      	bne.n	8008f86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	32ae      	adds	r2, #174	@ 0xae
 8008ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	4798      	blx	r3
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef8:	e04a      	b.n	8008f90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	785b      	ldrb	r3, [r3, #1]
 8008efe:	2b09      	cmp	r3, #9
 8008f00:	d83b      	bhi.n	8008f7a <USBD_StdDevReq+0xc2>
 8008f02:	a201      	add	r2, pc, #4	@ (adr r2, 8008f08 <USBD_StdDevReq+0x50>)
 8008f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008f71 	.word	0x08008f71
 8008f10:	08008f7b 	.word	0x08008f7b
 8008f14:	08008f67 	.word	0x08008f67
 8008f18:	08008f7b 	.word	0x08008f7b
 8008f1c:	08008f3b 	.word	0x08008f3b
 8008f20:	08008f31 	.word	0x08008f31
 8008f24:	08008f7b 	.word	0x08008f7b
 8008f28:	08008f53 	.word	0x08008f53
 8008f2c:	08008f45 	.word	0x08008f45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa3c 	bl	80093b0 <USBD_GetDescriptor>
          break;
 8008f38:	e024      	b.n	8008f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fba1 	bl	8009684 <USBD_SetAddress>
          break;
 8008f42:	e01f      	b.n	8008f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fbe0 	bl	800970c <USBD_SetConfig>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]
          break;
 8008f50:	e018      	b.n	8008f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc83 	bl	8009860 <USBD_GetConfig>
          break;
 8008f5a:	e013      	b.n	8008f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f5c:	6839      	ldr	r1, [r7, #0]
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fcb4 	bl	80098cc <USBD_GetStatus>
          break;
 8008f64:	e00e      	b.n	8008f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fce3 	bl	8009934 <USBD_SetFeature>
          break;
 8008f6e:	e009      	b.n	8008f84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fd07 	bl	8009986 <USBD_ClrFeature>
          break;
 8008f78:	e004      	b.n	8008f84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fd5e 	bl	8009a3e <USBD_CtlError>
          break;
 8008f82:	bf00      	nop
      }
      break;
 8008f84:	e004      	b.n	8008f90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fd58 	bl	8009a3e <USBD_CtlError>
      break;
 8008f8e:	bf00      	nop
  }

  return ret;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop

08008f9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008fb2:	2b40      	cmp	r3, #64	@ 0x40
 8008fb4:	d005      	beq.n	8008fc2 <USBD_StdItfReq+0x26>
 8008fb6:	2b40      	cmp	r3, #64	@ 0x40
 8008fb8:	d852      	bhi.n	8009060 <USBD_StdItfReq+0xc4>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d001      	beq.n	8008fc2 <USBD_StdItfReq+0x26>
 8008fbe:	2b20      	cmp	r3, #32
 8008fc0:	d14e      	bne.n	8009060 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d840      	bhi.n	8009052 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	889b      	ldrh	r3, [r3, #4]
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d836      	bhi.n	8009048 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	889b      	ldrh	r3, [r3, #4]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff fedb 	bl	8008d9e <USBD_CoreFindIF>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2bff      	cmp	r3, #255	@ 0xff
 8008ff0:	d01d      	beq.n	800902e <USBD_StdItfReq+0x92>
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d11a      	bne.n	800902e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ff8:	7bba      	ldrb	r2, [r7, #14]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	32ae      	adds	r2, #174	@ 0xae
 8008ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00f      	beq.n	8009028 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009008:	7bba      	ldrb	r2, [r7, #14]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009010:	7bba      	ldrb	r2, [r7, #14]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	32ae      	adds	r2, #174	@ 0xae
 8009016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009026:	e004      	b.n	8009032 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800902c:	e001      	b.n	8009032 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800902e:	2303      	movs	r3, #3
 8009030:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	88db      	ldrh	r3, [r3, #6]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d110      	bne.n	800905c <USBD_StdItfReq+0xc0>
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10d      	bne.n	800905c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 f804 	bl	800a04e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009046:	e009      	b.n	800905c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fcf7 	bl	8009a3e <USBD_CtlError>
          break;
 8009050:	e004      	b.n	800905c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009052:	6839      	ldr	r1, [r7, #0]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 fcf2 	bl	8009a3e <USBD_CtlError>
          break;
 800905a:	e000      	b.n	800905e <USBD_StdItfReq+0xc2>
          break;
 800905c:	bf00      	nop
      }
      break;
 800905e:	e004      	b.n	800906a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fceb 	bl	8009a3e <USBD_CtlError>
      break;
 8009068:	bf00      	nop
  }

  return ret;
 800906a:	7bfb      	ldrb	r3, [r7, #15]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	889b      	ldrh	r3, [r3, #4]
 8009086:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009090:	2b40      	cmp	r3, #64	@ 0x40
 8009092:	d007      	beq.n	80090a4 <USBD_StdEPReq+0x30>
 8009094:	2b40      	cmp	r3, #64	@ 0x40
 8009096:	f200 817f 	bhi.w	8009398 <USBD_StdEPReq+0x324>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d02a      	beq.n	80090f4 <USBD_StdEPReq+0x80>
 800909e:	2b20      	cmp	r3, #32
 80090a0:	f040 817a 	bne.w	8009398 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff fe85 	bl	8008db8 <USBD_CoreFindEP>
 80090ae:	4603      	mov	r3, r0
 80090b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090b2:	7b7b      	ldrb	r3, [r7, #13]
 80090b4:	2bff      	cmp	r3, #255	@ 0xff
 80090b6:	f000 8174 	beq.w	80093a2 <USBD_StdEPReq+0x32e>
 80090ba:	7b7b      	ldrb	r3, [r7, #13]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f040 8170 	bne.w	80093a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80090c2:	7b7a      	ldrb	r2, [r7, #13]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80090ca:	7b7a      	ldrb	r2, [r7, #13]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	32ae      	adds	r2, #174	@ 0xae
 80090d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 8163 	beq.w	80093a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80090dc:	7b7a      	ldrb	r2, [r7, #13]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	32ae      	adds	r2, #174	@ 0xae
 80090e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	4798      	blx	r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80090f2:	e156      	b.n	80093a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2b03      	cmp	r3, #3
 80090fa:	d008      	beq.n	800910e <USBD_StdEPReq+0x9a>
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	f300 8145 	bgt.w	800938c <USBD_StdEPReq+0x318>
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 809b 	beq.w	800923e <USBD_StdEPReq+0x1ca>
 8009108:	2b01      	cmp	r3, #1
 800910a:	d03c      	beq.n	8009186 <USBD_StdEPReq+0x112>
 800910c:	e13e      	b.n	800938c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b02      	cmp	r3, #2
 8009118:	d002      	beq.n	8009120 <USBD_StdEPReq+0xac>
 800911a:	2b03      	cmp	r3, #3
 800911c:	d016      	beq.n	800914c <USBD_StdEPReq+0xd8>
 800911e:	e02c      	b.n	800917a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009120:	7bbb      	ldrb	r3, [r7, #14]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00d      	beq.n	8009142 <USBD_StdEPReq+0xce>
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	2b80      	cmp	r3, #128	@ 0x80
 800912a:	d00a      	beq.n	8009142 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800912c:	7bbb      	ldrb	r3, [r7, #14]
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7f7 ff65 	bl	8001000 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009136:	2180      	movs	r1, #128	@ 0x80
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7f7 ff61 	bl	8001000 <USBD_LL_StallEP>
 800913e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009140:	e020      	b.n	8009184 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fc7a 	bl	8009a3e <USBD_CtlError>
              break;
 800914a:	e01b      	b.n	8009184 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	885b      	ldrh	r3, [r3, #2]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10e      	bne.n	8009172 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00b      	beq.n	8009172 <USBD_StdEPReq+0xfe>
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b80      	cmp	r3, #128	@ 0x80
 800915e:	d008      	beq.n	8009172 <USBD_StdEPReq+0xfe>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	88db      	ldrh	r3, [r3, #6]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d104      	bne.n	8009172 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7f7 ff47 	bl	8001000 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 ff6b 	bl	800a04e <USBD_CtlSendStatus>

              break;
 8009178:	e004      	b.n	8009184 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fc5e 	bl	8009a3e <USBD_CtlError>
              break;
 8009182:	bf00      	nop
          }
          break;
 8009184:	e107      	b.n	8009396 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b02      	cmp	r3, #2
 8009190:	d002      	beq.n	8009198 <USBD_StdEPReq+0x124>
 8009192:	2b03      	cmp	r3, #3
 8009194:	d016      	beq.n	80091c4 <USBD_StdEPReq+0x150>
 8009196:	e04b      	b.n	8009230 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009198:	7bbb      	ldrb	r3, [r7, #14]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00d      	beq.n	80091ba <USBD_StdEPReq+0x146>
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	2b80      	cmp	r3, #128	@ 0x80
 80091a2:	d00a      	beq.n	80091ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f7f7 ff29 	bl	8001000 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091ae:	2180      	movs	r1, #128	@ 0x80
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7f7 ff25 	bl	8001000 <USBD_LL_StallEP>
 80091b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091b8:	e040      	b.n	800923c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fc3e 	bl	8009a3e <USBD_CtlError>
              break;
 80091c2:	e03b      	b.n	800923c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	885b      	ldrh	r3, [r3, #2]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d136      	bne.n	800923a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80091d6:	7bbb      	ldrb	r3, [r7, #14]
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7f7 ff2f 	bl	800103e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 ff34 	bl	800a04e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff fde4 	bl	8008db8 <USBD_CoreFindEP>
 80091f0:	4603      	mov	r3, r0
 80091f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091f4:	7b7b      	ldrb	r3, [r7, #13]
 80091f6:	2bff      	cmp	r3, #255	@ 0xff
 80091f8:	d01f      	beq.n	800923a <USBD_StdEPReq+0x1c6>
 80091fa:	7b7b      	ldrb	r3, [r7, #13]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d11c      	bne.n	800923a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009200:	7b7a      	ldrb	r2, [r7, #13]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009208:	7b7a      	ldrb	r2, [r7, #13]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	32ae      	adds	r2, #174	@ 0xae
 800920e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009218:	7b7a      	ldrb	r2, [r7, #13]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	32ae      	adds	r2, #174	@ 0xae
 800921e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	4798      	blx	r3
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800922e:	e004      	b.n	800923a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fc03 	bl	8009a3e <USBD_CtlError>
              break;
 8009238:	e000      	b.n	800923c <USBD_StdEPReq+0x1c8>
              break;
 800923a:	bf00      	nop
          }
          break;
 800923c:	e0ab      	b.n	8009396 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d002      	beq.n	8009250 <USBD_StdEPReq+0x1dc>
 800924a:	2b03      	cmp	r3, #3
 800924c:	d032      	beq.n	80092b4 <USBD_StdEPReq+0x240>
 800924e:	e097      	b.n	8009380 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <USBD_StdEPReq+0x1f2>
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b80      	cmp	r3, #128	@ 0x80
 800925a:	d004      	beq.n	8009266 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fbed 	bl	8009a3e <USBD_CtlError>
                break;
 8009264:	e091      	b.n	800938a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800926a:	2b00      	cmp	r3, #0
 800926c:	da0b      	bge.n	8009286 <USBD_StdEPReq+0x212>
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	3310      	adds	r3, #16
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	4413      	add	r3, r2
 8009282:	3304      	adds	r3, #4
 8009284:	e00b      	b.n	800929e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009286:	7bbb      	ldrb	r3, [r7, #14]
 8009288:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800928c:	4613      	mov	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	4413      	add	r3, r2
 800929c:	3304      	adds	r3, #4
 800929e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2200      	movs	r2, #0
 80092a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2202      	movs	r2, #2
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fe91 	bl	8009fd4 <USBD_CtlSendData>
              break;
 80092b2:	e06a      	b.n	800938a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	da11      	bge.n	80092e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	f003 020f 	and.w	r2, r3, #15
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	3324      	adds	r3, #36	@ 0x24
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d117      	bne.n	8009306 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fbb0 	bl	8009a3e <USBD_CtlError>
                  break;
 80092de:	e054      	b.n	800938a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092e0:	7bbb      	ldrb	r3, [r7, #14]
 80092e2:	f003 020f 	and.w	r2, r3, #15
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fb9d 	bl	8009a3e <USBD_CtlError>
                  break;
 8009304:	e041      	b.n	800938a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800930a:	2b00      	cmp	r3, #0
 800930c:	da0b      	bge.n	8009326 <USBD_StdEPReq+0x2b2>
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	3310      	adds	r3, #16
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	4413      	add	r3, r2
 8009322:	3304      	adds	r3, #4
 8009324:	e00b      	b.n	800933e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	4413      	add	r3, r2
 800933c:	3304      	adds	r3, #4
 800933e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <USBD_StdEPReq+0x2d8>
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	2b80      	cmp	r3, #128	@ 0x80
 800934a:	d103      	bne.n	8009354 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e00e      	b.n	8009372 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7f7 fe8f 	bl	800107c <USBD_LL_IsStallEP>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2201      	movs	r2, #1
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	e002      	b.n	8009372 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2202      	movs	r2, #2
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fe2b 	bl	8009fd4 <USBD_CtlSendData>
              break;
 800937e:	e004      	b.n	800938a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fb5b 	bl	8009a3e <USBD_CtlError>
              break;
 8009388:	bf00      	nop
          }
          break;
 800938a:	e004      	b.n	8009396 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fb55 	bl	8009a3e <USBD_CtlError>
          break;
 8009394:	bf00      	nop
      }
      break;
 8009396:	e005      	b.n	80093a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fb4f 	bl	8009a3e <USBD_CtlError>
      break;
 80093a0:	e000      	b.n	80093a4 <USBD_StdEPReq+0x330>
      break;
 80093a2:	bf00      	nop
  }

  return ret;
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	885b      	ldrh	r3, [r3, #2]
 80093ca:	0a1b      	lsrs	r3, r3, #8
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	2b06      	cmp	r3, #6
 80093d2:	f200 8128 	bhi.w	8009626 <USBD_GetDescriptor+0x276>
 80093d6:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <USBD_GetDescriptor+0x2c>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	080093f9 	.word	0x080093f9
 80093e0:	08009411 	.word	0x08009411
 80093e4:	08009451 	.word	0x08009451
 80093e8:	08009627 	.word	0x08009627
 80093ec:	08009627 	.word	0x08009627
 80093f0:	080095c7 	.word	0x080095c7
 80093f4:	080095f3 	.word	0x080095f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	7c12      	ldrb	r2, [r2, #16]
 8009404:	f107 0108 	add.w	r1, r7, #8
 8009408:	4610      	mov	r0, r2
 800940a:	4798      	blx	r3
 800940c:	60f8      	str	r0, [r7, #12]
      break;
 800940e:	e112      	b.n	8009636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	7c1b      	ldrb	r3, [r3, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10d      	bne.n	8009434 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009420:	f107 0208 	add.w	r2, r7, #8
 8009424:	4610      	mov	r0, r2
 8009426:	4798      	blx	r3
 8009428:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	2202      	movs	r2, #2
 8009430:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009432:	e100      	b.n	8009636 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800943a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943c:	f107 0208 	add.w	r2, r7, #8
 8009440:	4610      	mov	r0, r2
 8009442:	4798      	blx	r3
 8009444:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	3301      	adds	r3, #1
 800944a:	2202      	movs	r2, #2
 800944c:	701a      	strb	r2, [r3, #0]
      break;
 800944e:	e0f2      	b.n	8009636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	885b      	ldrh	r3, [r3, #2]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b05      	cmp	r3, #5
 8009458:	f200 80ac 	bhi.w	80095b4 <USBD_GetDescriptor+0x204>
 800945c:	a201      	add	r2, pc, #4	@ (adr r2, 8009464 <USBD_GetDescriptor+0xb4>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	0800947d 	.word	0x0800947d
 8009468:	080094b1 	.word	0x080094b1
 800946c:	080094e5 	.word	0x080094e5
 8009470:	08009519 	.word	0x08009519
 8009474:	0800954d 	.word	0x0800954d
 8009478:	08009581 	.word	0x08009581
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	7c12      	ldrb	r2, [r2, #16]
 8009494:	f107 0108 	add.w	r1, r7, #8
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
 800949c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800949e:	e091      	b.n	80095c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094a0:	6839      	ldr	r1, [r7, #0]
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 facb 	bl	8009a3e <USBD_CtlError>
            err++;
 80094a8:	7afb      	ldrb	r3, [r7, #11]
 80094aa:	3301      	adds	r3, #1
 80094ac:	72fb      	strb	r3, [r7, #11]
          break;
 80094ae:	e089      	b.n	80095c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	7c12      	ldrb	r2, [r2, #16]
 80094c8:	f107 0108 	add.w	r1, r7, #8
 80094cc:	4610      	mov	r0, r2
 80094ce:	4798      	blx	r3
 80094d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094d2:	e077      	b.n	80095c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fab1 	bl	8009a3e <USBD_CtlError>
            err++;
 80094dc:	7afb      	ldrb	r3, [r7, #11]
 80094de:	3301      	adds	r3, #1
 80094e0:	72fb      	strb	r3, [r7, #11]
          break;
 80094e2:	e06f      	b.n	80095c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00b      	beq.n	8009508 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	7c12      	ldrb	r2, [r2, #16]
 80094fc:	f107 0108 	add.w	r1, r7, #8
 8009500:	4610      	mov	r0, r2
 8009502:	4798      	blx	r3
 8009504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009506:	e05d      	b.n	80095c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa97 	bl	8009a3e <USBD_CtlError>
            err++;
 8009510:	7afb      	ldrb	r3, [r7, #11]
 8009512:	3301      	adds	r3, #1
 8009514:	72fb      	strb	r3, [r7, #11]
          break;
 8009516:	e055      	b.n	80095c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	7c12      	ldrb	r2, [r2, #16]
 8009530:	f107 0108 	add.w	r1, r7, #8
 8009534:	4610      	mov	r0, r2
 8009536:	4798      	blx	r3
 8009538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800953a:	e043      	b.n	80095c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fa7d 	bl	8009a3e <USBD_CtlError>
            err++;
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	3301      	adds	r3, #1
 8009548:	72fb      	strb	r3, [r7, #11]
          break;
 800954a:	e03b      	b.n	80095c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800955e:	695b      	ldr	r3, [r3, #20]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7c12      	ldrb	r2, [r2, #16]
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800956e:	e029      	b.n	80095c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 fa63 	bl	8009a3e <USBD_CtlError>
            err++;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	3301      	adds	r3, #1
 800957c:	72fb      	strb	r3, [r7, #11]
          break;
 800957e:	e021      	b.n	80095c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009586:	699b      	ldr	r3, [r3, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095a2:	e00f      	b.n	80095c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fa49 	bl	8009a3e <USBD_CtlError>
            err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
          break;
 80095b2:	e007      	b.n	80095c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fa41 	bl	8009a3e <USBD_CtlError>
          err++;
 80095bc:	7afb      	ldrb	r3, [r7, #11]
 80095be:	3301      	adds	r3, #1
 80095c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80095c2:	bf00      	nop
      }
      break;
 80095c4:	e037      	b.n	8009636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	7c1b      	ldrb	r3, [r3, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d109      	bne.n	80095e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095d6:	f107 0208 	add.w	r2, r7, #8
 80095da:	4610      	mov	r0, r2
 80095dc:	4798      	blx	r3
 80095de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095e0:	e029      	b.n	8009636 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fa2a 	bl	8009a3e <USBD_CtlError>
        err++;
 80095ea:	7afb      	ldrb	r3, [r7, #11]
 80095ec:	3301      	adds	r3, #1
 80095ee:	72fb      	strb	r3, [r7, #11]
      break;
 80095f0:	e021      	b.n	8009636 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	7c1b      	ldrb	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10d      	bne.n	8009616 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009602:	f107 0208 	add.w	r2, r7, #8
 8009606:	4610      	mov	r0, r2
 8009608:	4798      	blx	r3
 800960a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	3301      	adds	r3, #1
 8009610:	2207      	movs	r2, #7
 8009612:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009614:	e00f      	b.n	8009636 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fa10 	bl	8009a3e <USBD_CtlError>
        err++;
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	3301      	adds	r3, #1
 8009622:	72fb      	strb	r3, [r7, #11]
      break;
 8009624:	e007      	b.n	8009636 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fa08 	bl	8009a3e <USBD_CtlError>
      err++;
 800962e:	7afb      	ldrb	r3, [r7, #11]
 8009630:	3301      	adds	r3, #1
 8009632:	72fb      	strb	r3, [r7, #11]
      break;
 8009634:	bf00      	nop
  }

  if (err != 0U)
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d11e      	bne.n	800967a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	88db      	ldrh	r3, [r3, #6]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d016      	beq.n	8009672 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009644:	893b      	ldrh	r3, [r7, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00e      	beq.n	8009668 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	88da      	ldrh	r2, [r3, #6]
 800964e:	893b      	ldrh	r3, [r7, #8]
 8009650:	4293      	cmp	r3, r2
 8009652:	bf28      	it	cs
 8009654:	4613      	movcs	r3, r2
 8009656:	b29b      	uxth	r3, r3
 8009658:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800965a:	893b      	ldrh	r3, [r7, #8]
 800965c:	461a      	mov	r2, r3
 800965e:	68f9      	ldr	r1, [r7, #12]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fcb7 	bl	8009fd4 <USBD_CtlSendData>
 8009666:	e009      	b.n	800967c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9e7 	bl	8009a3e <USBD_CtlError>
 8009670:	e004      	b.n	800967c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fceb 	bl	800a04e <USBD_CtlSendStatus>
 8009678:	e000      	b.n	800967c <USBD_GetDescriptor+0x2cc>
    return;
 800967a:	bf00      	nop
  }
}
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop

08009684 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	889b      	ldrh	r3, [r3, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d131      	bne.n	80096fa <USBD_SetAddress+0x76>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	88db      	ldrh	r3, [r3, #6]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d12d      	bne.n	80096fa <USBD_SetAddress+0x76>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	885b      	ldrh	r3, [r3, #2]
 80096a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80096a4:	d829      	bhi.n	80096fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	885b      	ldrh	r3, [r3, #2]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	d104      	bne.n	80096c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80096be:	6839      	ldr	r1, [r7, #0]
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f9bc 	bl	8009a3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096c6:	e01d      	b.n	8009704 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	7bfa      	ldrb	r2, [r7, #15]
 80096cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7f7 fcfd 	bl	80010d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fcb7 	bl	800a04e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d004      	beq.n	80096f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2202      	movs	r2, #2
 80096ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ee:	e009      	b.n	8009704 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f8:	e004      	b.n	8009704 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f99e 	bl	8009a3e <USBD_CtlError>
  }
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	885b      	ldrh	r3, [r3, #2]
 800971e:	b2da      	uxtb	r2, r3
 8009720:	4b4e      	ldr	r3, [pc, #312]	@ (800985c <USBD_SetConfig+0x150>)
 8009722:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009724:	4b4d      	ldr	r3, [pc, #308]	@ (800985c <USBD_SetConfig+0x150>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d905      	bls.n	8009738 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f985 	bl	8009a3e <USBD_CtlError>
    return USBD_FAIL;
 8009734:	2303      	movs	r3, #3
 8009736:	e08c      	b.n	8009852 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800973e:	b2db      	uxtb	r3, r3
 8009740:	2b02      	cmp	r3, #2
 8009742:	d002      	beq.n	800974a <USBD_SetConfig+0x3e>
 8009744:	2b03      	cmp	r3, #3
 8009746:	d029      	beq.n	800979c <USBD_SetConfig+0x90>
 8009748:	e075      	b.n	8009836 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800974a:	4b44      	ldr	r3, [pc, #272]	@ (800985c <USBD_SetConfig+0x150>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d020      	beq.n	8009794 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009752:	4b42      	ldr	r3, [pc, #264]	@ (800985c <USBD_SetConfig+0x150>)
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800975c:	4b3f      	ldr	r3, [pc, #252]	@ (800985c <USBD_SetConfig+0x150>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff f875 	bl	8008852 <USBD_SetClassConfig>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d008      	beq.n	8009784 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f962 	bl	8009a3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2202      	movs	r2, #2
 800977e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009782:	e065      	b.n	8009850 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fc62 	bl	800a04e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2203      	movs	r2, #3
 800978e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009792:	e05d      	b.n	8009850 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fc5a 	bl	800a04e <USBD_CtlSendStatus>
      break;
 800979a:	e059      	b.n	8009850 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800979c:	4b2f      	ldr	r3, [pc, #188]	@ (800985c <USBD_SetConfig+0x150>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d112      	bne.n	80097ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80097ac:	4b2b      	ldr	r3, [pc, #172]	@ (800985c <USBD_SetConfig+0x150>)
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	461a      	mov	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097b6:	4b29      	ldr	r3, [pc, #164]	@ (800985c <USBD_SetConfig+0x150>)
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff f864 	bl	800888a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fc43 	bl	800a04e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097c8:	e042      	b.n	8009850 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80097ca:	4b24      	ldr	r3, [pc, #144]	@ (800985c <USBD_SetConfig+0x150>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d02a      	beq.n	800982e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff f852 	bl	800888a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80097e6:	4b1d      	ldr	r3, [pc, #116]	@ (800985c <USBD_SetConfig+0x150>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097f0:	4b1a      	ldr	r3, [pc, #104]	@ (800985c <USBD_SetConfig+0x150>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff f82b 	bl	8008852 <USBD_SetClassConfig>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00f      	beq.n	8009826 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f918 	bl	8009a3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff f837 	bl	800888a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009824:	e014      	b.n	8009850 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fc11 	bl	800a04e <USBD_CtlSendStatus>
      break;
 800982c:	e010      	b.n	8009850 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fc0d 	bl	800a04e <USBD_CtlSendStatus>
      break;
 8009834:	e00c      	b.n	8009850 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009836:	6839      	ldr	r1, [r7, #0]
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 f900 	bl	8009a3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800983e:	4b07      	ldr	r3, [pc, #28]	@ (800985c <USBD_SetConfig+0x150>)
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff f820 	bl	800888a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800984a:	2303      	movs	r3, #3
 800984c:	73fb      	strb	r3, [r7, #15]
      break;
 800984e:	bf00      	nop
  }

  return ret;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	2000087c 	.word	0x2000087c

08009860 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	88db      	ldrh	r3, [r3, #6]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d004      	beq.n	800987c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f8e2 	bl	8009a3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800987a:	e023      	b.n	80098c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b02      	cmp	r3, #2
 8009886:	dc02      	bgt.n	800988e <USBD_GetConfig+0x2e>
 8009888:	2b00      	cmp	r3, #0
 800988a:	dc03      	bgt.n	8009894 <USBD_GetConfig+0x34>
 800988c:	e015      	b.n	80098ba <USBD_GetConfig+0x5a>
 800988e:	2b03      	cmp	r3, #3
 8009890:	d00b      	beq.n	80098aa <USBD_GetConfig+0x4a>
 8009892:	e012      	b.n	80098ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3308      	adds	r3, #8
 800989e:	2201      	movs	r2, #1
 80098a0:	4619      	mov	r1, r3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 fb96 	bl	8009fd4 <USBD_CtlSendData>
        break;
 80098a8:	e00c      	b.n	80098c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	3304      	adds	r3, #4
 80098ae:	2201      	movs	r2, #1
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fb8e 	bl	8009fd4 <USBD_CtlSendData>
        break;
 80098b8:	e004      	b.n	80098c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f8be 	bl	8009a3e <USBD_CtlError>
        break;
 80098c2:	bf00      	nop
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	3b01      	subs	r3, #1
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d81e      	bhi.n	8009922 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	88db      	ldrh	r3, [r3, #6]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d004      	beq.n	80098f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f8a5 	bl	8009a3e <USBD_CtlError>
        break;
 80098f4:	e01a      	b.n	800992c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009902:	2b00      	cmp	r3, #0
 8009904:	d005      	beq.n	8009912 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f043 0202 	orr.w	r2, r3, #2
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	330c      	adds	r3, #12
 8009916:	2202      	movs	r2, #2
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fb5a 	bl	8009fd4 <USBD_CtlSendData>
      break;
 8009920:	e004      	b.n	800992c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f88a 	bl	8009a3e <USBD_CtlError>
      break;
 800992a:	bf00      	nop
  }
}
 800992c:	bf00      	nop
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	885b      	ldrh	r3, [r3, #2]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d107      	bne.n	8009956 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 fb7d 	bl	800a04e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009954:	e013      	b.n	800997e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	885b      	ldrh	r3, [r3, #2]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d10b      	bne.n	8009976 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	889b      	ldrh	r3, [r3, #4]
 8009962:	0a1b      	lsrs	r3, r3, #8
 8009964:	b29b      	uxth	r3, r3
 8009966:	b2da      	uxtb	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fb6d 	bl	800a04e <USBD_CtlSendStatus>
}
 8009974:	e003      	b.n	800997e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f860 	bl	8009a3e <USBD_CtlError>
}
 800997e:	bf00      	nop
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b082      	sub	sp, #8
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009996:	b2db      	uxtb	r3, r3
 8009998:	3b01      	subs	r3, #1
 800999a:	2b02      	cmp	r3, #2
 800999c:	d80b      	bhi.n	80099b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	885b      	ldrh	r3, [r3, #2]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d10c      	bne.n	80099c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fb4d 	bl	800a04e <USBD_CtlSendStatus>
      }
      break;
 80099b4:	e004      	b.n	80099c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f840 	bl	8009a3e <USBD_CtlError>
      break;
 80099be:	e000      	b.n	80099c2 <USBD_ClrFeature+0x3c>
      break;
 80099c0:	bf00      	nop
  }
}
 80099c2:	bf00      	nop
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3301      	adds	r3, #1
 80099e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	781a      	ldrb	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	3301      	adds	r3, #1
 80099f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff fa40 	bl	8008e7a <SWAPBYTE>
 80099fa:	4603      	mov	r3, r0
 80099fc:	461a      	mov	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3301      	adds	r3, #1
 8009a06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f7ff fa33 	bl	8008e7a <SWAPBYTE>
 8009a14:	4603      	mov	r3, r0
 8009a16:	461a      	mov	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f7ff fa26 	bl	8008e7a <SWAPBYTE>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	461a      	mov	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	80da      	strh	r2, [r3, #6]
}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b082      	sub	sp, #8
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a48:	2180      	movs	r1, #128	@ 0x80
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7f7 fad8 	bl	8001000 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a50:	2100      	movs	r1, #0
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7f7 fad4 	bl	8001000 <USBD_LL_StallEP>
}
 8009a58:	bf00      	nop
 8009a5a:	3708      	adds	r7, #8
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d036      	beq.n	8009ae4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	f000 f836 	bl	8009aec <USBD_GetLen>
 8009a80:	4603      	mov	r3, r0
 8009a82:	3301      	adds	r3, #1
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	68ba      	ldr	r2, [r7, #8]
 8009a92:	4413      	add	r3, r2
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	7812      	ldrb	r2, [r2, #0]
 8009a98:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009aaa:	7dfb      	ldrb	r3, [r7, #23]
 8009aac:	3301      	adds	r3, #1
 8009aae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ab0:	e013      	b.n	8009ada <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	7812      	ldrb	r2, [r2, #0]
 8009abc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	613b      	str	r3, [r7, #16]
    idx++;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
 8009acc:	68ba      	ldr	r2, [r7, #8]
 8009ace:	4413      	add	r3, r2
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1e7      	bne.n	8009ab2 <USBD_GetString+0x52>
 8009ae2:	e000      	b.n	8009ae6 <USBD_GetString+0x86>
    return;
 8009ae4:	bf00      	nop
  }
}
 8009ae6:	3718      	adds	r7, #24
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009afc:	e005      	b.n	8009b0a <USBD_GetLen+0x1e>
  {
    len++;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	3301      	adds	r3, #1
 8009b02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	3301      	adds	r3, #1
 8009b08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f5      	bne.n	8009afe <USBD_GetLen+0x12>
  }

  return len;
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009b2c:	2010      	movs	r0, #16
 8009b2e:	f7f7 fb33 	bl	8001198 <USBD_static_malloc>
 8009b32:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	32b0      	adds	r2, #176	@ 0xb0
 8009b44:	2100      	movs	r1, #0
 8009b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e048      	b.n	8009be0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	32b0      	adds	r2, #176	@ 0xb0
 8009b58:	68f9      	ldr	r1, [r7, #12]
 8009b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	32b0      	adds	r2, #176	@ 0xb0
 8009b68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	7c1b      	ldrb	r3, [r3, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10d      	bne.n	8009b96 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8009be8 <USBD_HID_Init+0xc8>)
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	f003 020f 	and.w	r2, r3, #15
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	440b      	add	r3, r1
 8009b8e:	3326      	adds	r3, #38	@ 0x26
 8009b90:	2207      	movs	r2, #7
 8009b92:	801a      	strh	r2, [r3, #0]
 8009b94:	e00c      	b.n	8009bb0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009b96:	4b14      	ldr	r3, [pc, #80]	@ (8009be8 <USBD_HID_Init+0xc8>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	f003 020f 	and.w	r2, r3, #15
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	3326      	adds	r3, #38	@ 0x26
 8009bac:	220a      	movs	r2, #10
 8009bae:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8009be8 <USBD_HID_Init+0xc8>)
 8009bb2:	7819      	ldrb	r1, [r3, #0]
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	2203      	movs	r2, #3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7f7 f9dc 	bl	8000f76 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009be8 <USBD_HID_Init+0xc8>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	f003 020f 	and.w	r2, r3, #15
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4613      	mov	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	440b      	add	r3, r1
 8009bd2:	3324      	adds	r3, #36	@ 0x24
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	2000013a 	.word	0x2000013a

08009bec <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8009c78 <USBD_HID_DeInit+0x8c>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7f7 f9df 	bl	8000fc2 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009c04:	4b1c      	ldr	r3, [pc, #112]	@ (8009c78 <USBD_HID_DeInit+0x8c>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	f003 020f 	and.w	r2, r3, #15
 8009c0c:	6879      	ldr	r1, [r7, #4]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	440b      	add	r3, r1
 8009c18:	3324      	adds	r3, #36	@ 0x24
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009c1e:	4b16      	ldr	r3, [pc, #88]	@ (8009c78 <USBD_HID_DeInit+0x8c>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	f003 020f 	and.w	r2, r3, #15
 8009c26:	6879      	ldr	r1, [r7, #4]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	3326      	adds	r3, #38	@ 0x26
 8009c34:	2200      	movs	r2, #0
 8009c36:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	32b0      	adds	r2, #176	@ 0xb0
 8009c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d011      	beq.n	8009c6e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	32b0      	adds	r2, #176	@ 0xb0
 8009c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f7 faab 	bl	80011b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	32b0      	adds	r2, #176	@ 0xb0
 8009c68:	2100      	movs	r1, #0
 8009c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	2000013a 	.word	0x2000013a

08009c7c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	32b0      	adds	r2, #176	@ 0xb0
 8009c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c94:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d101      	bne.n	8009ca8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	e0e8      	b.n	8009e7a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d046      	beq.n	8009d42 <USBD_HID_Setup+0xc6>
 8009cb4:	2b20      	cmp	r3, #32
 8009cb6:	f040 80d8 	bne.w	8009e6a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	3b02      	subs	r3, #2
 8009cc0:	2b09      	cmp	r3, #9
 8009cc2:	d836      	bhi.n	8009d32 <USBD_HID_Setup+0xb6>
 8009cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009ccc <USBD_HID_Setup+0x50>)
 8009cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cca:	bf00      	nop
 8009ccc:	08009d23 	.word	0x08009d23
 8009cd0:	08009d03 	.word	0x08009d03
 8009cd4:	08009d33 	.word	0x08009d33
 8009cd8:	08009d33 	.word	0x08009d33
 8009cdc:	08009d33 	.word	0x08009d33
 8009ce0:	08009d33 	.word	0x08009d33
 8009ce4:	08009d33 	.word	0x08009d33
 8009ce8:	08009d33 	.word	0x08009d33
 8009cec:	08009d11 	.word	0x08009d11
 8009cf0:	08009cf5 	.word	0x08009cf5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	885b      	ldrh	r3, [r3, #2]
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	601a      	str	r2, [r3, #0]
          break;
 8009d00:	e01e      	b.n	8009d40 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2201      	movs	r2, #1
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f963 	bl	8009fd4 <USBD_CtlSendData>
          break;
 8009d0e:	e017      	b.n	8009d40 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	885b      	ldrh	r3, [r3, #2]
 8009d14:	0a1b      	lsrs	r3, r3, #8
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	605a      	str	r2, [r3, #4]
          break;
 8009d20:	e00e      	b.n	8009d40 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	3304      	adds	r3, #4
 8009d26:	2201      	movs	r2, #1
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f952 	bl	8009fd4 <USBD_CtlSendData>
          break;
 8009d30:	e006      	b.n	8009d40 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff fe82 	bl	8009a3e <USBD_CtlError>
          ret = USBD_FAIL;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d3e:	bf00      	nop
      }
      break;
 8009d40:	e09a      	b.n	8009e78 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	785b      	ldrb	r3, [r3, #1]
 8009d46:	2b0b      	cmp	r3, #11
 8009d48:	f200 8086 	bhi.w	8009e58 <USBD_HID_Setup+0x1dc>
 8009d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d54 <USBD_HID_Setup+0xd8>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d85 	.word	0x08009d85
 8009d58:	08009e67 	.word	0x08009e67
 8009d5c:	08009e59 	.word	0x08009e59
 8009d60:	08009e59 	.word	0x08009e59
 8009d64:	08009e59 	.word	0x08009e59
 8009d68:	08009e59 	.word	0x08009e59
 8009d6c:	08009daf 	.word	0x08009daf
 8009d70:	08009e59 	.word	0x08009e59
 8009d74:	08009e59 	.word	0x08009e59
 8009d78:	08009e59 	.word	0x08009e59
 8009d7c:	08009e07 	.word	0x08009e07
 8009d80:	08009e31 	.word	0x08009e31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	2b03      	cmp	r3, #3
 8009d8e:	d107      	bne.n	8009da0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d90:	f107 030a 	add.w	r3, r7, #10
 8009d94:	2202      	movs	r2, #2
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f91b 	bl	8009fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d9e:	e063      	b.n	8009e68 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff fe4b 	bl	8009a3e <USBD_CtlError>
            ret = USBD_FAIL;
 8009da8:	2303      	movs	r3, #3
 8009daa:	75fb      	strb	r3, [r7, #23]
          break;
 8009dac:	e05c      	b.n	8009e68 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	885b      	ldrh	r3, [r3, #2]
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	2b22      	cmp	r3, #34	@ 0x22
 8009db8:	d108      	bne.n	8009dcc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	88db      	ldrh	r3, [r3, #6]
 8009dbe:	2b4a      	cmp	r3, #74	@ 0x4a
 8009dc0:	bf28      	it	cs
 8009dc2:	234a      	movcs	r3, #74	@ 0x4a
 8009dc4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8009e84 <USBD_HID_Setup+0x208>)
 8009dc8:	613b      	str	r3, [r7, #16]
 8009dca:	e015      	b.n	8009df8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	885b      	ldrh	r3, [r3, #2]
 8009dd0:	0a1b      	lsrs	r3, r3, #8
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b21      	cmp	r3, #33	@ 0x21
 8009dd6:	d108      	bne.n	8009dea <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8009e88 <USBD_HID_Setup+0x20c>)
 8009dda:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	88db      	ldrh	r3, [r3, #6]
 8009de0:	2b09      	cmp	r3, #9
 8009de2:	bf28      	it	cs
 8009de4:	2309      	movcs	r3, #9
 8009de6:	82bb      	strh	r3, [r7, #20]
 8009de8:	e006      	b.n	8009df8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff fe26 	bl	8009a3e <USBD_CtlError>
            ret = USBD_FAIL;
 8009df2:	2303      	movs	r3, #3
 8009df4:	75fb      	strb	r3, [r7, #23]
            break;
 8009df6:	e037      	b.n	8009e68 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009df8:	8abb      	ldrh	r3, [r7, #20]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	6939      	ldr	r1, [r7, #16]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f8e8 	bl	8009fd4 <USBD_CtlSendData>
          break;
 8009e04:	e030      	b.n	8009e68 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d107      	bne.n	8009e22 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3308      	adds	r3, #8
 8009e16:	2201      	movs	r2, #1
 8009e18:	4619      	mov	r1, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f8da 	bl	8009fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e20:	e022      	b.n	8009e68 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7ff fe0a 	bl	8009a3e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e2e:	e01b      	b.n	8009e68 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d106      	bne.n	8009e4a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	885b      	ldrh	r3, [r3, #2]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	461a      	mov	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e48:	e00e      	b.n	8009e68 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff fdf6 	bl	8009a3e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e52:	2303      	movs	r3, #3
 8009e54:	75fb      	strb	r3, [r7, #23]
          break;
 8009e56:	e007      	b.n	8009e68 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7ff fdef 	bl	8009a3e <USBD_CtlError>
          ret = USBD_FAIL;
 8009e60:	2303      	movs	r3, #3
 8009e62:	75fb      	strb	r3, [r7, #23]
          break;
 8009e64:	e000      	b.n	8009e68 <USBD_HID_Setup+0x1ec>
          break;
 8009e66:	bf00      	nop
      }
      break;
 8009e68:	e006      	b.n	8009e78 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f7ff fde6 	bl	8009a3e <USBD_CtlError>
      ret = USBD_FAIL;
 8009e72:	2303      	movs	r3, #3
 8009e74:	75fb      	strb	r3, [r7, #23]
      break;
 8009e76:	bf00      	nop
  }

  return (uint8_t)ret;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	200000f0 	.word	0x200000f0
 8009e88:	200000d8 	.word	0x200000d8

08009e8c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	4613      	mov	r3, r2
 8009e98:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	32b0      	adds	r2, #176	@ 0xb0
 8009ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea8:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e014      	b.n	8009ede <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d10d      	bne.n	8009edc <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	7b1b      	ldrb	r3, [r3, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d109      	bne.n	8009edc <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8009ece:	4b06      	ldr	r3, [pc, #24]	@ (8009ee8 <USBD_HID_SendReport+0x5c>)
 8009ed0:	7819      	ldrb	r1, [r3, #0]
 8009ed2:	88fb      	ldrh	r3, [r7, #6]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7f7 f91b 	bl	8001112 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3718      	adds	r7, #24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	2000013a 	.word	0x2000013a

08009eec <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009ef4:	2181      	movs	r1, #129	@ 0x81
 8009ef6:	4809      	ldr	r0, [pc, #36]	@ (8009f1c <USBD_HID_GetFSCfgDesc+0x30>)
 8009ef8:	f7fe ff6b 	bl	8008dd2 <USBD_GetEpDesc>
 8009efc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	220a      	movs	r2, #10
 8009f08:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2222      	movs	r2, #34	@ 0x22
 8009f0e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009f10:	4b02      	ldr	r3, [pc, #8]	@ (8009f1c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200000b4 	.word	0x200000b4

08009f20 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009f28:	2181      	movs	r1, #129	@ 0x81
 8009f2a:	4809      	ldr	r0, [pc, #36]	@ (8009f50 <USBD_HID_GetHSCfgDesc+0x30>)
 8009f2c:	f7fe ff51 	bl	8008dd2 <USBD_GetEpDesc>
 8009f30:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2207      	movs	r2, #7
 8009f3c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2222      	movs	r2, #34	@ 0x22
 8009f42:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009f44:	4b02      	ldr	r3, [pc, #8]	@ (8009f50 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	200000b4 	.word	0x200000b4

08009f54 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009f5c:	2181      	movs	r1, #129	@ 0x81
 8009f5e:	4809      	ldr	r0, [pc, #36]	@ (8009f84 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009f60:	f7fe ff37 	bl	8008dd2 <USBD_GetEpDesc>
 8009f64:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	220a      	movs	r2, #10
 8009f70:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2222      	movs	r2, #34	@ 0x22
 8009f76:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009f78:	4b02      	ldr	r3, [pc, #8]	@ (8009f84 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	200000b4 	.word	0x200000b4

08009f88 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	32b0      	adds	r2, #176	@ 0xb0
 8009f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	220a      	movs	r2, #10
 8009fc0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009fc2:	4b03      	ldr	r3, [pc, #12]	@ (8009fd0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	200000e4 	.word	0x200000e4

08009fd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7f7 f889 	bl	8001112 <USBD_LL_Transmit>

  return USBD_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	60b9      	str	r1, [r7, #8]
 800a014:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	2100      	movs	r1, #0
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7f7 f878 	bl	8001112 <USBD_LL_Transmit>

  return USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	2100      	movs	r1, #0
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7f7 f888 	bl	8001154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b082      	sub	sp, #8
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2204      	movs	r2, #4
 800a05a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a05e:	2300      	movs	r3, #0
 800a060:	2200      	movs	r2, #0
 800a062:	2100      	movs	r1, #0
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7f7 f854 	bl	8001112 <USBD_LL_Transmit>

  return USBD_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3708      	adds	r7, #8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2205      	movs	r2, #5
 800a080:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a084:	2300      	movs	r3, #0
 800a086:	2200      	movs	r2, #0
 800a088:	2100      	movs	r1, #0
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7f7 f862 	bl	8001154 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <memset>:
 800a09a:	4402      	add	r2, r0
 800a09c:	4603      	mov	r3, r0
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d100      	bne.n	800a0a4 <memset+0xa>
 800a0a2:	4770      	bx	lr
 800a0a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a0a8:	e7f9      	b.n	800a09e <memset+0x4>
	...

0800a0ac <__libc_init_array>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	4d0d      	ldr	r5, [pc, #52]	@ (800a0e4 <__libc_init_array+0x38>)
 800a0b0:	4c0d      	ldr	r4, [pc, #52]	@ (800a0e8 <__libc_init_array+0x3c>)
 800a0b2:	1b64      	subs	r4, r4, r5
 800a0b4:	10a4      	asrs	r4, r4, #2
 800a0b6:	2600      	movs	r6, #0
 800a0b8:	42a6      	cmp	r6, r4
 800a0ba:	d109      	bne.n	800a0d0 <__libc_init_array+0x24>
 800a0bc:	4d0b      	ldr	r5, [pc, #44]	@ (800a0ec <__libc_init_array+0x40>)
 800a0be:	4c0c      	ldr	r4, [pc, #48]	@ (800a0f0 <__libc_init_array+0x44>)
 800a0c0:	f000 f818 	bl	800a0f4 <_init>
 800a0c4:	1b64      	subs	r4, r4, r5
 800a0c6:	10a4      	asrs	r4, r4, #2
 800a0c8:	2600      	movs	r6, #0
 800a0ca:	42a6      	cmp	r6, r4
 800a0cc:	d105      	bne.n	800a0da <__libc_init_array+0x2e>
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}
 800a0d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d4:	4798      	blx	r3
 800a0d6:	3601      	adds	r6, #1
 800a0d8:	e7ee      	b.n	800a0b8 <__libc_init_array+0xc>
 800a0da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0de:	4798      	blx	r3
 800a0e0:	3601      	adds	r6, #1
 800a0e2:	e7f2      	b.n	800a0ca <__libc_init_array+0x1e>
 800a0e4:	0800a214 	.word	0x0800a214
 800a0e8:	0800a214 	.word	0x0800a214
 800a0ec:	0800a214 	.word	0x0800a214
 800a0f0:	0800a218 	.word	0x0800a218

0800a0f4 <_init>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	bf00      	nop
 800a0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0fa:	bc08      	pop	{r3}
 800a0fc:	469e      	mov	lr, r3
 800a0fe:	4770      	bx	lr

0800a100 <_fini>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr
